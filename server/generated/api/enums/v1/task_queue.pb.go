// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/enums/v1/task_queue.proto

package enums

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskQueueKind int32

const (
	TASK_QUEUE_KIND_UNSPECIFIED TaskQueueKind = 0
	// Tasks from a normal workflow task queue always include complete workflow history
	//
	// The task queue specified by the user is always a normal task queue. There can be as many
	// workers as desired for a single normal task queue. All those workers may pick up tasks from
	// that queue.
	TASK_QUEUE_KIND_NORMAL TaskQueueKind = 1
	// A sticky queue only includes new history since the last workflow task, and they are
	// per-worker.
	//
	// Sticky queues are created dynamically by each worker during their start up. They only exist
	// for the lifetime of the worker process. Tasks in a sticky task queue are only available to
	// the worker that created the sticky queue.
	//
	// Sticky queues are only for workflow tasks. There are no sticky task queues for activities.
	TASK_QUEUE_KIND_STICKY TaskQueueKind = 2
)

var TaskQueueKind_name = map[int32]string{
	0: "Unspecified",
	1: "Normal",
	2: "Sticky",
}

var TaskQueueKind_value = map[string]int32{
	"Unspecified": 0,
	"Normal":      1,
	"Sticky":      2,
}

func (TaskQueueKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf13a6eba37ec772, []int{0}
}

type TaskQueueType int32

const (
	TASK_QUEUE_TYPE_UNSPECIFIED TaskQueueType = 0
	// Workflow type of task queue.
	TASK_QUEUE_TYPE_WORKFLOW TaskQueueType = 1
	// Activity type of task queue.
	TASK_QUEUE_TYPE_ACTIVITY TaskQueueType = 2
)

var TaskQueueType_name = map[int32]string{
	0: "Unspecified",
	1: "Workflow",
	2: "Activity",
}

var TaskQueueType_value = map[string]int32{
	"Unspecified": 0,
	"Workflow":    1,
	"Activity":    2,
}

func (TaskQueueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf13a6eba37ec772, []int{1}
}

func init() {
	proto.RegisterEnum("temporal.api.enums.v1.TaskQueueKind", TaskQueueKind_name, TaskQueueKind_value)
	proto.RegisterEnum("temporal.api.enums.v1.TaskQueueType", TaskQueueType_name, TaskQueueType_value)
}

func init() {
	proto.RegisterFile("temporal/api/enums/v1/task_queue.proto", fileDescriptor_cf13a6eba37ec772)
}

var fileDescriptor_cf13a6eba37ec772 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0x49, 0xcd, 0x2d,
	0xc8, 0x2f, 0x4a, 0xcc, 0xd1, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcd, 0x2b, 0xcd, 0x2d, 0xd6, 0x2f,
	0x33, 0xd4, 0x2f, 0x49, 0x2c, 0xce, 0x8e, 0x2f, 0x2c, 0x4d, 0x2d, 0x4d, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x85, 0xa9, 0xd3, 0x4b, 0x2c, 0xc8, 0xd4, 0x03, 0xab, 0xd3, 0x2b, 0x33,
	0xd4, 0xca, 0xe0, 0xe2, 0x0d, 0x49, 0x2c, 0xce, 0x0e, 0x04, 0xa9, 0xf4, 0xce, 0xcc, 0x4b, 0x11,
	0x92, 0xe7, 0x92, 0x0e, 0x71, 0x0c, 0xf6, 0x8e, 0x0f, 0x0c, 0x75, 0x0d, 0x75, 0x8d, 0xf7, 0xf6,
	0xf4, 0x73, 0x89, 0x0f, 0xf5, 0x0b, 0x0e, 0x70, 0x75, 0xf6, 0x74, 0xf3, 0x74, 0x75, 0x11, 0x60,
	0x10, 0x92, 0xe2, 0x12, 0x43, 0x57, 0xe0, 0xe7, 0x1f, 0xe4, 0xeb, 0xe8, 0x23, 0xc0, 0x88, 0x4d,
	0x2e, 0x38, 0xc4, 0xd3, 0xd9, 0x3b, 0x52, 0x80, 0x49, 0x2b, 0x07, 0xc9, 0xa6, 0x90, 0xca, 0x82,
	0x54, 0x34, 0x9b, 0x42, 0x22, 0x03, 0x5c, 0xd1, 0x6c, 0x92, 0xe1, 0x92, 0x40, 0x57, 0x10, 0xee,
	0x1f, 0xe4, 0xed, 0xe6, 0xe3, 0x1f, 0x2e, 0xc0, 0x88, 0x4d, 0xd6, 0xd1, 0x39, 0xc4, 0x33, 0xcc,
	0x33, 0x24, 0x52, 0x80, 0xc9, 0x69, 0x1b, 0xe3, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31,
	0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4,
	0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x06, 0x2e,
	0x89, 0xcc, 0x7c, 0x3d, 0xac, 0x01, 0xe5, 0xc4, 0x07, 0x77, 0x7c, 0x00, 0x28, 0x3c, 0x03, 0x18,
	0xa3, 0x14, 0xd3, 0x91, 0xd4, 0x66, 0xe6, 0xa3, 0x84, 0xbf, 0x35, 0x98, 0xb1, 0x8a, 0x49, 0x34,
	0x04, 0xa6, 0xc0, 0xb1, 0x20, 0x53, 0xcf, 0x15, 0x6c, 0x58, 0x98, 0xe1, 0x2b, 0x26, 0x09, 0x98,
	0xb8, 0x95, 0x95, 0x63, 0x41, 0xa6, 0x95, 0x15, 0x58, 0xc6, 0xca, 0x2a, 0xcc, 0x30, 0x89, 0x0d,
	0x1c, 0x5d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x8a, 0x6c, 0x40, 0xd8, 0x01, 0x00,
	0x00,
}

func (x TaskQueueKind) String() string {
	s, ok := TaskQueueKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TaskQueueType) String() string {
	s, ok := TaskQueueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
