// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/errordetails/v1/message.proto

package errordetails

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NotFoundFailure struct {
	CurrentCluster string `protobuf:"bytes,1,opt,name=current_cluster,json=currentCluster,proto3" json:"current_cluster,omitempty"`
	ActiveCluster  string `protobuf:"bytes,2,opt,name=active_cluster,json=activeCluster,proto3" json:"active_cluster,omitempty"`
}

func (m *NotFoundFailure) Reset()      { *m = NotFoundFailure{} }
func (*NotFoundFailure) ProtoMessage() {}
func (*NotFoundFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed300ab0b02d291, []int{0}
}
func (m *NotFoundFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotFoundFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotFoundFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotFoundFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotFoundFailure.Merge(m, src)
}
func (m *NotFoundFailure) XXX_Size() int {
	return m.Size()
}
func (m *NotFoundFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_NotFoundFailure.DiscardUnknown(m)
}

var xxx_messageInfo_NotFoundFailure proto.InternalMessageInfo

func (m *NotFoundFailure) GetCurrentCluster() string {
	if m != nil {
		return m.CurrentCluster
	}
	return ""
}

func (m *NotFoundFailure) GetActiveCluster() string {
	if m != nil {
		return m.ActiveCluster
	}
	return ""
}

type WorkflowExecutionAlreadyStartedFailure struct {
	StartRequestId string `protobuf:"bytes,1,opt,name=start_request_id,json=startRequestId,proto3" json:"start_request_id,omitempty"`
	RunId          string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (m *WorkflowExecutionAlreadyStartedFailure) Reset() {
	*m = WorkflowExecutionAlreadyStartedFailure{}
}
func (*WorkflowExecutionAlreadyStartedFailure) ProtoMessage() {}
func (*WorkflowExecutionAlreadyStartedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed300ab0b02d291, []int{1}
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionAlreadyStartedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionAlreadyStartedFailure.Merge(m, src)
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionAlreadyStartedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionAlreadyStartedFailure proto.InternalMessageInfo

func (m *WorkflowExecutionAlreadyStartedFailure) GetStartRequestId() string {
	if m != nil {
		return m.StartRequestId
	}
	return ""
}

func (m *WorkflowExecutionAlreadyStartedFailure) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type NamespaceNotActiveFailure struct {
	Namespace      string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CurrentCluster string `protobuf:"bytes,2,opt,name=current_cluster,json=currentCluster,proto3" json:"current_cluster,omitempty"`
	ActiveCluster  string `protobuf:"bytes,3,opt,name=active_cluster,json=activeCluster,proto3" json:"active_cluster,omitempty"`
}

func (m *NamespaceNotActiveFailure) Reset()      { *m = NamespaceNotActiveFailure{} }
func (*NamespaceNotActiveFailure) ProtoMessage() {}
func (*NamespaceNotActiveFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed300ab0b02d291, []int{2}
}
func (m *NamespaceNotActiveFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceNotActiveFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceNotActiveFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceNotActiveFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceNotActiveFailure.Merge(m, src)
}
func (m *NamespaceNotActiveFailure) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceNotActiveFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceNotActiveFailure.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceNotActiveFailure proto.InternalMessageInfo

func (m *NamespaceNotActiveFailure) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NamespaceNotActiveFailure) GetCurrentCluster() string {
	if m != nil {
		return m.CurrentCluster
	}
	return ""
}

func (m *NamespaceNotActiveFailure) GetActiveCluster() string {
	if m != nil {
		return m.ActiveCluster
	}
	return ""
}

type ClientVersionNotSupportedFailure struct {
	ClientVersion     string `protobuf:"bytes,1,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientName        string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	SupportedVersions string `protobuf:"bytes,3,opt,name=supported_versions,json=supportedVersions,proto3" json:"supported_versions,omitempty"`
}

func (m *ClientVersionNotSupportedFailure) Reset()      { *m = ClientVersionNotSupportedFailure{} }
func (*ClientVersionNotSupportedFailure) ProtoMessage() {}
func (*ClientVersionNotSupportedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed300ab0b02d291, []int{3}
}
func (m *ClientVersionNotSupportedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientVersionNotSupportedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientVersionNotSupportedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientVersionNotSupportedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientVersionNotSupportedFailure.Merge(m, src)
}
func (m *ClientVersionNotSupportedFailure) XXX_Size() int {
	return m.Size()
}
func (m *ClientVersionNotSupportedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientVersionNotSupportedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_ClientVersionNotSupportedFailure proto.InternalMessageInfo

func (m *ClientVersionNotSupportedFailure) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ClientVersionNotSupportedFailure) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ClientVersionNotSupportedFailure) GetSupportedVersions() string {
	if m != nil {
		return m.SupportedVersions
	}
	return ""
}

type ServerVersionNotSupportedFailure struct {
	ServerVersion                 string `protobuf:"bytes,1,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	ClientSupportedServerVersions string `protobuf:"bytes,2,opt,name=client_supported_server_versions,json=clientSupportedServerVersions,proto3" json:"client_supported_server_versions,omitempty"`
}

func (m *ServerVersionNotSupportedFailure) Reset()      { *m = ServerVersionNotSupportedFailure{} }
func (*ServerVersionNotSupportedFailure) ProtoMessage() {}
func (*ServerVersionNotSupportedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed300ab0b02d291, []int{4}
}
func (m *ServerVersionNotSupportedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerVersionNotSupportedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerVersionNotSupportedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerVersionNotSupportedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerVersionNotSupportedFailure.Merge(m, src)
}
func (m *ServerVersionNotSupportedFailure) XXX_Size() int {
	return m.Size()
}
func (m *ServerVersionNotSupportedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerVersionNotSupportedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_ServerVersionNotSupportedFailure proto.InternalMessageInfo

func (m *ServerVersionNotSupportedFailure) GetServerVersion() string {
	if m != nil {
		return m.ServerVersion
	}
	return ""
}

func (m *ServerVersionNotSupportedFailure) GetClientSupportedServerVersions() string {
	if m != nil {
		return m.ClientSupportedServerVersions
	}
	return ""
}

type NamespaceAlreadyExistsFailure struct {
}

func (m *NamespaceAlreadyExistsFailure) Reset()      { *m = NamespaceAlreadyExistsFailure{} }
func (*NamespaceAlreadyExistsFailure) ProtoMessage() {}
func (*NamespaceAlreadyExistsFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed300ab0b02d291, []int{5}
}
func (m *NamespaceAlreadyExistsFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceAlreadyExistsFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceAlreadyExistsFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceAlreadyExistsFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceAlreadyExistsFailure.Merge(m, src)
}
func (m *NamespaceAlreadyExistsFailure) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceAlreadyExistsFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceAlreadyExistsFailure.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceAlreadyExistsFailure proto.InternalMessageInfo

type CancellationAlreadyRequestedFailure struct {
}

func (m *CancellationAlreadyRequestedFailure) Reset()      { *m = CancellationAlreadyRequestedFailure{} }
func (*CancellationAlreadyRequestedFailure) ProtoMessage() {}
func (*CancellationAlreadyRequestedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed300ab0b02d291, []int{6}
}
func (m *CancellationAlreadyRequestedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancellationAlreadyRequestedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancellationAlreadyRequestedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancellationAlreadyRequestedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationAlreadyRequestedFailure.Merge(m, src)
}
func (m *CancellationAlreadyRequestedFailure) XXX_Size() int {
	return m.Size()
}
func (m *CancellationAlreadyRequestedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationAlreadyRequestedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationAlreadyRequestedFailure proto.InternalMessageInfo

type QueryFailedFailure struct {
}

func (m *QueryFailedFailure) Reset()      { *m = QueryFailedFailure{} }
func (*QueryFailedFailure) ProtoMessage() {}
func (*QueryFailedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed300ab0b02d291, []int{7}
}
func (m *QueryFailedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFailedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFailedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFailedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFailedFailure.Merge(m, src)
}
func (m *QueryFailedFailure) XXX_Size() int {
	return m.Size()
}
func (m *QueryFailedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFailedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFailedFailure proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NotFoundFailure)(nil), "temporal.api.errordetails.v1.NotFoundFailure")
	proto.RegisterType((*WorkflowExecutionAlreadyStartedFailure)(nil), "temporal.api.errordetails.v1.WorkflowExecutionAlreadyStartedFailure")
	proto.RegisterType((*NamespaceNotActiveFailure)(nil), "temporal.api.errordetails.v1.NamespaceNotActiveFailure")
	proto.RegisterType((*ClientVersionNotSupportedFailure)(nil), "temporal.api.errordetails.v1.ClientVersionNotSupportedFailure")
	proto.RegisterType((*ServerVersionNotSupportedFailure)(nil), "temporal.api.errordetails.v1.ServerVersionNotSupportedFailure")
	proto.RegisterType((*NamespaceAlreadyExistsFailure)(nil), "temporal.api.errordetails.v1.NamespaceAlreadyExistsFailure")
	proto.RegisterType((*CancellationAlreadyRequestedFailure)(nil), "temporal.api.errordetails.v1.CancellationAlreadyRequestedFailure")
	proto.RegisterType((*QueryFailedFailure)(nil), "temporal.api.errordetails.v1.QueryFailedFailure")
}

func init() {
	proto.RegisterFile("temporal/api/errordetails/v1/message.proto", fileDescriptor_2ed300ab0b02d291)
}

var fileDescriptor_2ed300ab0b02d291 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x41, 0x54, 0xea, 0x42, 0x5b, 0xb0, 0x40, 0x02, 0x29, 0xdd, 0x44, 0x46, 0x81,
	0x0a, 0x09, 0x47, 0x11, 0x37, 0x73, 0x4a, 0x43, 0x8a, 0x7a, 0x20, 0x2a, 0x0d, 0x0a, 0x12, 0x97,
	0x68, 0xb1, 0x87, 0x6a, 0x85, 0xe3, 0x35, 0xfb, 0xc7, 0xb4, 0x37, 0xae, 0xdc, 0x10, 0x37, 0xde,
	0x00, 0xf1, 0x24, 0x1c, 0x73, 0xa3, 0x47, 0xe2, 0x5c, 0x10, 0xa7, 0x3e, 0x02, 0xb2, 0xbd, 0x76,
	0x5d, 0x14, 0x55, 0x1c, 0xfd, 0xcd, 0x37, 0xdf, 0xfc, 0x46, 0xde, 0xc1, 0x0f, 0x15, 0xcc, 0x62,
	0x2e, 0x68, 0xd8, 0xa5, 0x31, 0xeb, 0x82, 0x10, 0x5c, 0x04, 0xa0, 0x28, 0x0b, 0x65, 0x37, 0xe9,
	0x75, 0x67, 0x20, 0x25, 0x3d, 0x02, 0x37, 0x16, 0x5c, 0x71, 0xbb, 0x59, 0x7a, 0x5d, 0x1a, 0x33,
	0xb7, 0xee, 0x75, 0x93, 0x9e, 0x43, 0xf1, 0xd6, 0x88, 0xab, 0x3d, 0xae, 0xa3, 0x60, 0x8f, 0xb2,
	0x50, 0x0b, 0xb0, 0x1f, 0xe0, 0x2d, 0x5f, 0x0b, 0x01, 0x91, 0x9a, 0xfa, 0xa1, 0x96, 0x0a, 0xc4,
	0x1d, 0xd4, 0x46, 0x3b, 0xeb, 0x87, 0x9b, 0x46, 0x1e, 0x14, 0xaa, 0xdd, 0xc1, 0x9b, 0xd4, 0x57,
	0x2c, 0x81, 0xca, 0xd7, 0xc8, 0x7d, 0x1b, 0x85, 0x6a, 0x6c, 0x0e, 0xc3, 0xf7, 0x5f, 0x71, 0xf1,
	0xee, 0x6d, 0xc8, 0x3f, 0x0c, 0x8f, 0xc1, 0xd7, 0x8a, 0xf1, 0xa8, 0x1f, 0x0a, 0xa0, 0xc1, 0xc9,
	0x58, 0x51, 0xa1, 0xa0, 0x9a, 0xbc, 0x83, 0x6f, 0xc8, 0x4c, 0x99, 0x0a, 0x78, 0xaf, 0x41, 0xaa,
	0x29, 0x0b, 0xca, 0xd1, 0xb9, 0x7e, 0x58, 0xc8, 0xfb, 0x81, 0x7d, 0x1b, 0xaf, 0x09, 0x1d, 0x65,
	0xf5, 0x62, 0xe4, 0x55, 0xa1, 0xa3, 0xfd, 0xc0, 0xf9, 0x84, 0xf0, 0xdd, 0x11, 0x9d, 0x81, 0x8c,
	0xa9, 0x0f, 0x23, 0xae, 0xfa, 0x39, 0x48, 0x19, 0xdf, 0xc4, 0xeb, 0x51, 0x59, 0x34, 0xb9, 0xe7,
	0xc2, 0xaa, 0xb5, 0x1b, 0xff, 0xb9, 0xf6, 0x95, 0x55, 0x6b, 0x7f, 0x45, 0xb8, 0x3d, 0x08, 0x19,
	0x44, 0x6a, 0x02, 0x42, 0x32, 0x1e, 0x8d, 0xb8, 0x1a, 0xeb, 0x38, 0xe6, 0xf5, 0x8d, 0x3b, 0x78,
	0xd3, 0xcf, 0x3d, 0xd3, 0xa4, 0x30, 0x19, 0xae, 0x0d, 0xbf, 0xde, 0x69, 0xb7, 0xf0, 0x35, 0x63,
	0xcb, 0x78, 0x0d, 0x17, 0x2e, 0xa4, 0x6c, 0x5f, 0xfb, 0x11, 0xb6, 0x65, 0x99, 0x5d, 0x46, 0x49,
	0xc3, 0x75, 0xb3, 0xaa, 0x98, 0x38, 0xe9, 0x7c, 0x41, 0xb8, 0x3d, 0x06, 0x91, 0x80, 0xb8, 0x9c,
	0x4d, 0xe6, 0x9e, 0x7f, 0xd9, 0x64, 0xbd, 0xd3, 0x7e, 0x86, 0xdb, 0x86, 0xed, 0x9c, 0xe0, 0x62,
	0x9f, 0x34, 0xc0, 0xdb, 0x85, 0xaf, 0x1a, 0x74, 0x81, 0x40, 0x3a, 0x2d, 0xbc, 0x5d, 0xfd, 0x3b,
	0xf3, 0x3e, 0x86, 0xc7, 0x4c, 0x2a, 0x69, 0x80, 0x9c, 0x0e, 0xbe, 0x37, 0xa0, 0x91, 0x0f, 0x61,
	0x48, 0x6b, 0x6f, 0xc8, 0x3c, 0x8a, 0x8a, 0xdb, 0xb9, 0x85, 0xed, 0x17, 0x1a, 0xc4, 0x49, 0xf6,
	0x5d, 0xa9, 0xbb, 0x3f, 0xd1, 0x7c, 0x41, 0xac, 0xd3, 0x05, 0xb1, 0xce, 0x16, 0x04, 0x7d, 0x4c,
	0x09, 0xfa, 0x96, 0x12, 0xf4, 0x23, 0x25, 0x68, 0x9e, 0x12, 0xf4, 0x2b, 0x25, 0xe8, 0x77, 0x4a,
	0xac, 0xb3, 0x94, 0xa0, 0xcf, 0x4b, 0x62, 0xcd, 0x97, 0xc4, 0x3a, 0x5d, 0x12, 0x0b, 0xb7, 0x18,
	0x77, 0x2f, 0x3b, 0xa0, 0xdd, 0xeb, 0xcf, 0x8b, 0x6b, 0x3b, 0xc8, 0x8e, 0xed, 0x00, 0xbd, 0xee,
	0x1e, 0xd5, 0x1a, 0x18, 0x5f, 0x75, 0xa0, 0x4f, 0xea, 0xdf, 0xdf, 0x1b, 0xcd, 0x97, 0xa5, 0xbd,
	0x1f, 0x33, 0x77, 0x98, 0xd5, 0x9e, 0x9a, 0xfc, 0x49, 0xef, 0x4f, 0xa3, 0x55, 0x96, 0x3d, 0xaf,
	0x1f, 0x33, 0xcf, 0xab, 0x1b, 0x3c, 0x6f, 0xd2, 0x7b, 0xb3, 0x96, 0xdf, 0xf9, 0xe3, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xaa, 0x7e, 0x02, 0x87, 0x15, 0x04, 0x00, 0x00,
}

func (this *NotFoundFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotFoundFailure)
	if !ok {
		that2, ok := that.(NotFoundFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrentCluster != that1.CurrentCluster {
		return false
	}
	if this.ActiveCluster != that1.ActiveCluster {
		return false
	}
	return true
}
func (this *WorkflowExecutionAlreadyStartedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionAlreadyStartedFailure)
	if !ok {
		that2, ok := that.(WorkflowExecutionAlreadyStartedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartRequestId != that1.StartRequestId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *NamespaceNotActiveFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceNotActiveFailure)
	if !ok {
		that2, ok := that.(NamespaceNotActiveFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.CurrentCluster != that1.CurrentCluster {
		return false
	}
	if this.ActiveCluster != that1.ActiveCluster {
		return false
	}
	return true
}
func (this *ClientVersionNotSupportedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientVersionNotSupportedFailure)
	if !ok {
		that2, ok := that.(ClientVersionNotSupportedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientVersion != that1.ClientVersion {
		return false
	}
	if this.ClientName != that1.ClientName {
		return false
	}
	if this.SupportedVersions != that1.SupportedVersions {
		return false
	}
	return true
}
func (this *ServerVersionNotSupportedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerVersionNotSupportedFailure)
	if !ok {
		that2, ok := that.(ServerVersionNotSupportedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerVersion != that1.ServerVersion {
		return false
	}
	if this.ClientSupportedServerVersions != that1.ClientSupportedServerVersions {
		return false
	}
	return true
}
func (this *NamespaceAlreadyExistsFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceAlreadyExistsFailure)
	if !ok {
		that2, ok := that.(NamespaceAlreadyExistsFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CancellationAlreadyRequestedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancellationAlreadyRequestedFailure)
	if !ok {
		that2, ok := that.(CancellationAlreadyRequestedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryFailedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryFailedFailure)
	if !ok {
		that2, ok := that.(QueryFailedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NotFoundFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&errordetails.NotFoundFailure{")
	s = append(s, "CurrentCluster: "+fmt.Sprintf("%#v", this.CurrentCluster)+",\n")
	s = append(s, "ActiveCluster: "+fmt.Sprintf("%#v", this.ActiveCluster)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionAlreadyStartedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&errordetails.WorkflowExecutionAlreadyStartedFailure{")
	s = append(s, "StartRequestId: "+fmt.Sprintf("%#v", this.StartRequestId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceNotActiveFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&errordetails.NamespaceNotActiveFailure{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "CurrentCluster: "+fmt.Sprintf("%#v", this.CurrentCluster)+",\n")
	s = append(s, "ActiveCluster: "+fmt.Sprintf("%#v", this.ActiveCluster)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientVersionNotSupportedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&errordetails.ClientVersionNotSupportedFailure{")
	s = append(s, "ClientVersion: "+fmt.Sprintf("%#v", this.ClientVersion)+",\n")
	s = append(s, "ClientName: "+fmt.Sprintf("%#v", this.ClientName)+",\n")
	s = append(s, "SupportedVersions: "+fmt.Sprintf("%#v", this.SupportedVersions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerVersionNotSupportedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&errordetails.ServerVersionNotSupportedFailure{")
	s = append(s, "ServerVersion: "+fmt.Sprintf("%#v", this.ServerVersion)+",\n")
	s = append(s, "ClientSupportedServerVersions: "+fmt.Sprintf("%#v", this.ClientSupportedServerVersions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceAlreadyExistsFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&errordetails.NamespaceAlreadyExistsFailure{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancellationAlreadyRequestedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&errordetails.CancellationAlreadyRequestedFailure{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryFailedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&errordetails.QueryFailedFailure{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NotFoundFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotFoundFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotFoundFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActiveCluster) > 0 {
		i -= len(m.ActiveCluster)
		copy(dAtA[i:], m.ActiveCluster)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActiveCluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CurrentCluster) > 0 {
		i -= len(m.CurrentCluster)
		copy(dAtA[i:], m.CurrentCluster)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CurrentCluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionAlreadyStartedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionAlreadyStartedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionAlreadyStartedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartRequestId) > 0 {
		i -= len(m.StartRequestId)
		copy(dAtA[i:], m.StartRequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceNotActiveFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceNotActiveFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceNotActiveFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActiveCluster) > 0 {
		i -= len(m.ActiveCluster)
		copy(dAtA[i:], m.ActiveCluster)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActiveCluster)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentCluster) > 0 {
		i -= len(m.CurrentCluster)
		copy(dAtA[i:], m.CurrentCluster)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CurrentCluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientVersionNotSupportedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientVersionNotSupportedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientVersionNotSupportedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportedVersions) > 0 {
		i -= len(m.SupportedVersions)
		copy(dAtA[i:], m.SupportedVersions)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SupportedVersions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientName) > 0 {
		i -= len(m.ClientName)
		copy(dAtA[i:], m.ClientName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerVersionNotSupportedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerVersionNotSupportedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerVersionNotSupportedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientSupportedServerVersions) > 0 {
		i -= len(m.ClientSupportedServerVersions)
		copy(dAtA[i:], m.ClientSupportedServerVersions)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientSupportedServerVersions)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServerVersion) > 0 {
		i -= len(m.ServerVersion)
		copy(dAtA[i:], m.ServerVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ServerVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceAlreadyExistsFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceAlreadyExistsFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceAlreadyExistsFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CancellationAlreadyRequestedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancellationAlreadyRequestedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancellationAlreadyRequestedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFailedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFailedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFailedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NotFoundFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentCluster)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ActiveCluster)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionAlreadyStartedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartRequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *NamespaceNotActiveFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CurrentCluster)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ActiveCluster)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ClientVersionNotSupportedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ClientName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SupportedVersions)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ServerVersionNotSupportedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerVersion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ClientSupportedServerVersions)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *NamespaceAlreadyExistsFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CancellationAlreadyRequestedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFailedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NotFoundFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotFoundFailure{`,
		`CurrentCluster:` + fmt.Sprintf("%v", this.CurrentCluster) + `,`,
		`ActiveCluster:` + fmt.Sprintf("%v", this.ActiveCluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionAlreadyStartedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionAlreadyStartedFailure{`,
		`StartRequestId:` + fmt.Sprintf("%v", this.StartRequestId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceNotActiveFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceNotActiveFailure{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`CurrentCluster:` + fmt.Sprintf("%v", this.CurrentCluster) + `,`,
		`ActiveCluster:` + fmt.Sprintf("%v", this.ActiveCluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientVersionNotSupportedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientVersionNotSupportedFailure{`,
		`ClientVersion:` + fmt.Sprintf("%v", this.ClientVersion) + `,`,
		`ClientName:` + fmt.Sprintf("%v", this.ClientName) + `,`,
		`SupportedVersions:` + fmt.Sprintf("%v", this.SupportedVersions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerVersionNotSupportedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerVersionNotSupportedFailure{`,
		`ServerVersion:` + fmt.Sprintf("%v", this.ServerVersion) + `,`,
		`ClientSupportedServerVersions:` + fmt.Sprintf("%v", this.ClientSupportedServerVersions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceAlreadyExistsFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceAlreadyExistsFailure{`,
		`}`,
	}, "")
	return s
}
func (this *CancellationAlreadyRequestedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancellationAlreadyRequestedFailure{`,
		`}`,
	}, "")
	return s
}
func (this *QueryFailedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryFailedFailure{`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NotFoundFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotFoundFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotFoundFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionAlreadyStartedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionAlreadyStartedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionAlreadyStartedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceNotActiveFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceNotActiveFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceNotActiveFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientVersionNotSupportedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientVersionNotSupportedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientVersionNotSupportedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedVersions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerVersionNotSupportedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerVersionNotSupportedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerVersionNotSupportedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSupportedServerVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSupportedServerVersions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceAlreadyExistsFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceAlreadyExistsFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceAlreadyExistsFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancellationAlreadyRequestedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancellationAlreadyRequestedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancellationAlreadyRequestedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFailedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFailedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFailedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
