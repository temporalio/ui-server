// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/failure/v1/message.proto

package failure

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/temporalio/ui-server/v2/server/generated/api/common/v1"
	v11 "github.com/temporalio/ui-server/v2/server/generated/api/enums/v1"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApplicationFailureInfo struct {
	Type         string       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	NonRetryable bool         `protobuf:"varint,2,opt,name=non_retryable,json=nonRetryable,proto3" json:"non_retryable,omitempty"`
	Details      *v1.Payloads `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *ApplicationFailureInfo) Reset()      { *m = ApplicationFailureInfo{} }
func (*ApplicationFailureInfo) ProtoMessage() {}
func (*ApplicationFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{0}
}
func (m *ApplicationFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationFailureInfo.Merge(m, src)
}
func (m *ApplicationFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationFailureInfo proto.InternalMessageInfo

func (m *ApplicationFailureInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplicationFailureInfo) GetNonRetryable() bool {
	if m != nil {
		return m.NonRetryable
	}
	return false
}

func (m *ApplicationFailureInfo) GetDetails() *v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

type TimeoutFailureInfo struct {
	TimeoutType          v11.TimeoutType `protobuf:"varint,1,opt,name=timeout_type,json=timeoutType,proto3,enum=temporal.api.enums.v1.TimeoutType" json:"timeout_type,omitempty"`
	LastHeartbeatDetails *v1.Payloads    `protobuf:"bytes,2,opt,name=last_heartbeat_details,json=lastHeartbeatDetails,proto3" json:"last_heartbeat_details,omitempty"`
}

func (m *TimeoutFailureInfo) Reset()      { *m = TimeoutFailureInfo{} }
func (*TimeoutFailureInfo) ProtoMessage() {}
func (*TimeoutFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{1}
}
func (m *TimeoutFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutFailureInfo.Merge(m, src)
}
func (m *TimeoutFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutFailureInfo proto.InternalMessageInfo

func (m *TimeoutFailureInfo) GetTimeoutType() v11.TimeoutType {
	if m != nil {
		return m.TimeoutType
	}
	return v11.TIMEOUT_TYPE_UNSPECIFIED
}

func (m *TimeoutFailureInfo) GetLastHeartbeatDetails() *v1.Payloads {
	if m != nil {
		return m.LastHeartbeatDetails
	}
	return nil
}

type CanceledFailureInfo struct {
	Details *v1.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *CanceledFailureInfo) Reset()      { *m = CanceledFailureInfo{} }
func (*CanceledFailureInfo) ProtoMessage() {}
func (*CanceledFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{2}
}
func (m *CanceledFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanceledFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanceledFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanceledFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanceledFailureInfo.Merge(m, src)
}
func (m *CanceledFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *CanceledFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CanceledFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CanceledFailureInfo proto.InternalMessageInfo

func (m *CanceledFailureInfo) GetDetails() *v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

type TerminatedFailureInfo struct {
}

func (m *TerminatedFailureInfo) Reset()      { *m = TerminatedFailureInfo{} }
func (*TerminatedFailureInfo) ProtoMessage() {}
func (*TerminatedFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{3}
}
func (m *TerminatedFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminatedFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminatedFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminatedFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminatedFailureInfo.Merge(m, src)
}
func (m *TerminatedFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *TerminatedFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminatedFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TerminatedFailureInfo proto.InternalMessageInfo

type ServerFailureInfo struct {
	NonRetryable bool `protobuf:"varint,1,opt,name=non_retryable,json=nonRetryable,proto3" json:"non_retryable,omitempty"`
}

func (m *ServerFailureInfo) Reset()      { *m = ServerFailureInfo{} }
func (*ServerFailureInfo) ProtoMessage() {}
func (*ServerFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{4}
}
func (m *ServerFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerFailureInfo.Merge(m, src)
}
func (m *ServerFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerFailureInfo proto.InternalMessageInfo

func (m *ServerFailureInfo) GetNonRetryable() bool {
	if m != nil {
		return m.NonRetryable
	}
	return false
}

type ResetWorkflowFailureInfo struct {
	LastHeartbeatDetails *v1.Payloads `protobuf:"bytes,1,opt,name=last_heartbeat_details,json=lastHeartbeatDetails,proto3" json:"last_heartbeat_details,omitempty"`
}

func (m *ResetWorkflowFailureInfo) Reset()      { *m = ResetWorkflowFailureInfo{} }
func (*ResetWorkflowFailureInfo) ProtoMessage() {}
func (*ResetWorkflowFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{5}
}
func (m *ResetWorkflowFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetWorkflowFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetWorkflowFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetWorkflowFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetWorkflowFailureInfo.Merge(m, src)
}
func (m *ResetWorkflowFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResetWorkflowFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetWorkflowFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResetWorkflowFailureInfo proto.InternalMessageInfo

func (m *ResetWorkflowFailureInfo) GetLastHeartbeatDetails() *v1.Payloads {
	if m != nil {
		return m.LastHeartbeatDetails
	}
	return nil
}

type ActivityFailureInfo struct {
	ScheduledEventId int64            `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId   int64            `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Identity         string           `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	ActivityType     *v1.ActivityType `protobuf:"bytes,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	ActivityId       string           `protobuf:"bytes,5,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	RetryState       v11.RetryState   `protobuf:"varint,6,opt,name=retry_state,json=retryState,proto3,enum=temporal.api.enums.v1.RetryState" json:"retry_state,omitempty"`
}

func (m *ActivityFailureInfo) Reset()      { *m = ActivityFailureInfo{} }
func (*ActivityFailureInfo) ProtoMessage() {}
func (*ActivityFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{6}
}
func (m *ActivityFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityFailureInfo.Merge(m, src)
}
func (m *ActivityFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActivityFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityFailureInfo proto.InternalMessageInfo

func (m *ActivityFailureInfo) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityFailureInfo) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityFailureInfo) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ActivityFailureInfo) GetActivityType() *v1.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *ActivityFailureInfo) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ActivityFailureInfo) GetRetryState() v11.RetryState {
	if m != nil {
		return m.RetryState
	}
	return v11.RETRY_STATE_UNSPECIFIED
}

type ChildWorkflowExecutionFailureInfo struct {
	Namespace         string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *v1.WorkflowType      `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	InitiatedEventId  int64                 `protobuf:"varint,4,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	StartedEventId    int64                 `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	RetryState        v11.RetryState        `protobuf:"varint,6,opt,name=retry_state,json=retryState,proto3,enum=temporal.api.enums.v1.RetryState" json:"retry_state,omitempty"`
}

func (m *ChildWorkflowExecutionFailureInfo) Reset()      { *m = ChildWorkflowExecutionFailureInfo{} }
func (*ChildWorkflowExecutionFailureInfo) ProtoMessage() {}
func (*ChildWorkflowExecutionFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{7}
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionFailureInfo.Merge(m, src)
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionFailureInfo proto.InternalMessageInfo

func (m *ChildWorkflowExecutionFailureInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionFailureInfo) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionFailureInfo) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionFailureInfo) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionFailureInfo) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionFailureInfo) GetRetryState() v11.RetryState {
	if m != nil {
		return m.RetryState
	}
	return v11.RETRY_STATE_UNSPECIFIED
}

type Failure struct {
	Message    string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Source     string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	StackTrace string   `protobuf:"bytes,3,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	Cause      *Failure `protobuf:"bytes,4,opt,name=cause,proto3" json:"cause,omitempty"`
	// Types that are valid to be assigned to FailureInfo:
	//	*Failure_ApplicationFailureInfo
	//	*Failure_TimeoutFailureInfo
	//	*Failure_CanceledFailureInfo
	//	*Failure_TerminatedFailureInfo
	//	*Failure_ServerFailureInfo
	//	*Failure_ResetWorkflowFailureInfo
	//	*Failure_ActivityFailureInfo
	//	*Failure_ChildWorkflowExecutionFailureInfo
	FailureInfo isFailure_FailureInfo `protobuf_oneof:"failure_info"`
}

func (m *Failure) Reset()      { *m = Failure{} }
func (*Failure) ProtoMessage() {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_1721afaf388ff262, []int{8}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

type isFailure_FailureInfo interface {
	isFailure_FailureInfo()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Failure_ApplicationFailureInfo struct {
	ApplicationFailureInfo *ApplicationFailureInfo `protobuf:"bytes,5,opt,name=application_failure_info,json=applicationFailureInfo,proto3,oneof" json:"application_failure_info,omitempty"`
}
type Failure_TimeoutFailureInfo struct {
	TimeoutFailureInfo *TimeoutFailureInfo `protobuf:"bytes,6,opt,name=timeout_failure_info,json=timeoutFailureInfo,proto3,oneof" json:"timeout_failure_info,omitempty"`
}
type Failure_CanceledFailureInfo struct {
	CanceledFailureInfo *CanceledFailureInfo `protobuf:"bytes,7,opt,name=canceled_failure_info,json=canceledFailureInfo,proto3,oneof" json:"canceled_failure_info,omitempty"`
}
type Failure_TerminatedFailureInfo struct {
	TerminatedFailureInfo *TerminatedFailureInfo `protobuf:"bytes,8,opt,name=terminated_failure_info,json=terminatedFailureInfo,proto3,oneof" json:"terminated_failure_info,omitempty"`
}
type Failure_ServerFailureInfo struct {
	ServerFailureInfo *ServerFailureInfo `protobuf:"bytes,9,opt,name=server_failure_info,json=serverFailureInfo,proto3,oneof" json:"server_failure_info,omitempty"`
}
type Failure_ResetWorkflowFailureInfo struct {
	ResetWorkflowFailureInfo *ResetWorkflowFailureInfo `protobuf:"bytes,10,opt,name=reset_workflow_failure_info,json=resetWorkflowFailureInfo,proto3,oneof" json:"reset_workflow_failure_info,omitempty"`
}
type Failure_ActivityFailureInfo struct {
	ActivityFailureInfo *ActivityFailureInfo `protobuf:"bytes,11,opt,name=activity_failure_info,json=activityFailureInfo,proto3,oneof" json:"activity_failure_info,omitempty"`
}
type Failure_ChildWorkflowExecutionFailureInfo struct {
	ChildWorkflowExecutionFailureInfo *ChildWorkflowExecutionFailureInfo `protobuf:"bytes,12,opt,name=child_workflow_execution_failure_info,json=childWorkflowExecutionFailureInfo,proto3,oneof" json:"child_workflow_execution_failure_info,omitempty"`
}

func (*Failure_ApplicationFailureInfo) isFailure_FailureInfo()            {}
func (*Failure_TimeoutFailureInfo) isFailure_FailureInfo()                {}
func (*Failure_CanceledFailureInfo) isFailure_FailureInfo()               {}
func (*Failure_TerminatedFailureInfo) isFailure_FailureInfo()             {}
func (*Failure_ServerFailureInfo) isFailure_FailureInfo()                 {}
func (*Failure_ResetWorkflowFailureInfo) isFailure_FailureInfo()          {}
func (*Failure_ActivityFailureInfo) isFailure_FailureInfo()               {}
func (*Failure_ChildWorkflowExecutionFailureInfo) isFailure_FailureInfo() {}

func (m *Failure) GetFailureInfo() isFailure_FailureInfo {
	if m != nil {
		return m.FailureInfo
	}
	return nil
}

func (m *Failure) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Failure) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Failure) GetStackTrace() string {
	if m != nil {
		return m.StackTrace
	}
	return ""
}

func (m *Failure) GetCause() *Failure {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (m *Failure) GetApplicationFailureInfo() *ApplicationFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ApplicationFailureInfo); ok {
		return x.ApplicationFailureInfo
	}
	return nil
}

func (m *Failure) GetTimeoutFailureInfo() *TimeoutFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_TimeoutFailureInfo); ok {
		return x.TimeoutFailureInfo
	}
	return nil
}

func (m *Failure) GetCanceledFailureInfo() *CanceledFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_CanceledFailureInfo); ok {
		return x.CanceledFailureInfo
	}
	return nil
}

func (m *Failure) GetTerminatedFailureInfo() *TerminatedFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_TerminatedFailureInfo); ok {
		return x.TerminatedFailureInfo
	}
	return nil
}

func (m *Failure) GetServerFailureInfo() *ServerFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ServerFailureInfo); ok {
		return x.ServerFailureInfo
	}
	return nil
}

func (m *Failure) GetResetWorkflowFailureInfo() *ResetWorkflowFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ResetWorkflowFailureInfo); ok {
		return x.ResetWorkflowFailureInfo
	}
	return nil
}

func (m *Failure) GetActivityFailureInfo() *ActivityFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ActivityFailureInfo); ok {
		return x.ActivityFailureInfo
	}
	return nil
}

func (m *Failure) GetChildWorkflowExecutionFailureInfo() *ChildWorkflowExecutionFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ChildWorkflowExecutionFailureInfo); ok {
		return x.ChildWorkflowExecutionFailureInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Failure) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Failure_ApplicationFailureInfo)(nil),
		(*Failure_TimeoutFailureInfo)(nil),
		(*Failure_CanceledFailureInfo)(nil),
		(*Failure_TerminatedFailureInfo)(nil),
		(*Failure_ServerFailureInfo)(nil),
		(*Failure_ResetWorkflowFailureInfo)(nil),
		(*Failure_ActivityFailureInfo)(nil),
		(*Failure_ChildWorkflowExecutionFailureInfo)(nil),
	}
}

func init() {
	proto.RegisterType((*ApplicationFailureInfo)(nil), "temporal.api.failure.v1.ApplicationFailureInfo")
	proto.RegisterType((*TimeoutFailureInfo)(nil), "temporal.api.failure.v1.TimeoutFailureInfo")
	proto.RegisterType((*CanceledFailureInfo)(nil), "temporal.api.failure.v1.CanceledFailureInfo")
	proto.RegisterType((*TerminatedFailureInfo)(nil), "temporal.api.failure.v1.TerminatedFailureInfo")
	proto.RegisterType((*ServerFailureInfo)(nil), "temporal.api.failure.v1.ServerFailureInfo")
	proto.RegisterType((*ResetWorkflowFailureInfo)(nil), "temporal.api.failure.v1.ResetWorkflowFailureInfo")
	proto.RegisterType((*ActivityFailureInfo)(nil), "temporal.api.failure.v1.ActivityFailureInfo")
	proto.RegisterType((*ChildWorkflowExecutionFailureInfo)(nil), "temporal.api.failure.v1.ChildWorkflowExecutionFailureInfo")
	proto.RegisterType((*Failure)(nil), "temporal.api.failure.v1.Failure")
}

func init() {
	proto.RegisterFile("temporal/api/failure/v1/message.proto", fileDescriptor_1721afaf388ff262)
}

var fileDescriptor_1721afaf388ff262 = []byte{
	// 998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xf7, 0xa4, 0xff, 0x5f, 0xb2, 0xd5, 0x76, 0xba, 0x6d, 0xa3, 0x82, 0x4c, 0x1b, 0x76, 0xa5,
	0x02, 0x8b, 0xa3, 0x14, 0x09, 0xa1, 0x70, 0x6a, 0x97, 0xa2, 0x14, 0x09, 0xa9, 0xcc, 0x56, 0x05,
	0x21, 0x24, 0x6b, 0x62, 0x4f, 0x9b, 0x51, 0x1d, 0xdb, 0x1a, 0x4f, 0x52, 0x72, 0x43, 0x5c, 0x38,
	0x81, 0xf8, 0x18, 0x88, 0x2b, 0x27, 0xbe, 0x01, 0xc7, 0x1e, 0xf7, 0x48, 0xd3, 0x0b, 0xe2, 0xb4,
	0x1f, 0x01, 0x79, 0xec, 0x71, 0xed, 0x24, 0xde, 0x82, 0xd8, 0x9b, 0xe7, 0xcd, 0x7b, 0xef, 0xf7,
	0xe6, 0xbd, 0xdf, 0xfc, 0xc6, 0xf0, 0x44, 0xb2, 0x7e, 0x18, 0x08, 0xea, 0x35, 0x69, 0xc8, 0x9b,
	0xe7, 0x94, 0x7b, 0x03, 0xc1, 0x9a, 0xc3, 0x56, 0xb3, 0xcf, 0xa2, 0x88, 0x5e, 0x30, 0x2b, 0x14,
	0x81, 0x0c, 0xf0, 0x96, 0x76, 0xb3, 0x68, 0xc8, 0xad, 0xd4, 0xcd, 0x1a, 0xb6, 0xb6, 0x1f, 0x17,
	0xe2, 0x9d, 0xa0, 0xdf, 0x0f, 0xfc, 0xa9, 0xf0, 0x09, 0x2f, 0xe6, 0x0f, 0xfa, 0x51, 0xec, 0x74,
	0x15, 0x88, 0xcb, 0x73, 0x2f, 0xb8, 0x4a, 0xbc, 0x1a, 0x3f, 0x22, 0xd8, 0x3c, 0x08, 0x43, 0x8f,
	0x3b, 0x54, 0xf2, 0xc0, 0xff, 0x34, 0x41, 0x39, 0xf6, 0xcf, 0x03, 0x8c, 0x61, 0x5e, 0x8e, 0x42,
	0x56, 0x47, 0x3b, 0x68, 0x6f, 0x85, 0xa8, 0x6f, 0xfc, 0x36, 0x3c, 0xf0, 0x03, 0xdf, 0x16, 0x4c,
	0x8a, 0x11, 0xed, 0x7a, 0xac, 0x5e, 0xd9, 0x41, 0x7b, 0xcb, 0xa4, 0xe6, 0x07, 0x3e, 0xd1, 0x36,
	0xdc, 0x86, 0x25, 0x97, 0x49, 0xca, 0xbd, 0xa8, 0x3e, 0xb7, 0x83, 0xf6, 0xaa, 0xfb, 0x3b, 0x56,
	0xe1, 0x28, 0x49, 0xc5, 0xd6, 0xb0, 0x65, 0x9d, 0xd0, 0x91, 0x17, 0x50, 0x37, 0x22, 0x3a, 0xa0,
	0xf1, 0x1b, 0x02, 0x7c, 0xca, 0xfb, 0x2c, 0x18, 0xc8, 0x7c, 0x2d, 0x47, 0x50, 0x93, 0x89, 0xd5,
	0xce, 0x6a, 0x5a, 0xdd, 0x6f, 0x14, 0xf3, 0xaa, 0x33, 0xc6, 0x69, 0xd3, 0x04, 0xa7, 0xa3, 0x90,
	0x91, 0xaa, 0xbc, 0x5b, 0xe0, 0x33, 0xd8, 0xf4, 0x68, 0x24, 0xed, 0x1e, 0xa3, 0x42, 0x76, 0x19,
	0x95, 0xb6, 0x2e, 0xb4, 0xf2, 0x2f, 0x0b, 0x7d, 0x14, 0xc7, 0x77, 0x74, 0xf8, 0x27, 0x69, 0xd5,
	0x5f, 0xc0, 0xfa, 0x33, 0xea, 0x3b, 0xcc, 0x63, 0x6e, 0xbe, 0xea, 0x5c, 0x23, 0xd0, 0x7f, 0x6d,
	0xc4, 0x16, 0x6c, 0x9c, 0x32, 0xd1, 0xe7, 0x3e, 0x95, 0x85, 0xa4, 0x8d, 0x8f, 0x60, 0xed, 0x39,
	0x13, 0x43, 0x26, 0xf2, 0x48, 0x53, 0x73, 0x41, 0xd3, 0x73, 0x69, 0x08, 0xa8, 0x13, 0x16, 0x31,
	0xf9, 0x65, 0x4a, 0x81, 0x7c, 0x82, 0xf2, 0xce, 0xa0, 0xff, 0xd5, 0x99, 0xdf, 0x2b, 0xb0, 0x7e,
	0xe0, 0x48, 0x3e, 0xe4, 0x72, 0x94, 0xc7, 0x7b, 0x0a, 0x38, 0x72, 0x7a, 0xcc, 0x1d, 0x78, 0xcc,
	0xb5, 0xd9, 0x90, 0xf9, 0xd2, 0xe6, 0xae, 0xc2, 0x9a, 0x23, 0x0f, 0xb3, 0x9d, 0xa3, 0x78, 0xe3,
	0xd8, 0xc5, 0x7b, 0xf0, 0x30, 0x92, 0x54, 0xc8, 0xbc, 0x6f, 0x45, 0xf9, 0xae, 0xa6, 0x76, 0xed,
	0xb9, 0x0d, 0xcb, 0xdc, 0x65, 0xbe, 0xe4, 0x72, 0xa4, 0xc8, 0xb7, 0x42, 0xb2, 0x35, 0x3e, 0x86,
	0x07, 0x34, 0x2d, 0x25, 0x61, 0xd1, 0xbc, 0x3a, 0xda, 0xe3, 0xb2, 0xa3, 0xe9, 0xba, 0x15, 0x8f,
	0x6a, 0x34, 0xb7, 0xc2, 0x6f, 0x41, 0x35, 0x4b, 0xc5, 0xdd, 0xfa, 0x82, 0x42, 0x02, 0x6d, 0x3a,
	0x76, 0xf1, 0x21, 0x54, 0xd5, 0x30, 0xec, 0x48, 0x52, 0xc9, 0xea, 0x8b, 0x8a, 0xaf, 0xbb, 0x25,
	0x7c, 0x55, 0x23, 0x7a, 0x1e, 0x3b, 0x12, 0x10, 0xd9, 0x77, 0xe3, 0xfb, 0x39, 0xd8, 0x7d, 0xd6,
	0xe3, 0x9e, 0xab, 0x07, 0x76, 0xf4, 0x2d, 0x73, 0x06, 0x93, 0xd7, 0xf4, 0x4d, 0x58, 0xf1, 0x69,
	0x9f, 0x45, 0x21, 0x75, 0xf4, 0x5d, 0xbd, 0x33, 0xe0, 0xaf, 0x00, 0xeb, 0x1b, 0x6f, 0x33, 0x1d,
	0x9e, 0xb2, 0xfd, 0x9d, 0xb2, 0x83, 0x4f, 0xe1, 0x91, 0xb5, 0xab, 0x49, 0x53, 0xdc, 0xcd, 0x2c,
	0xb3, 0xea, 0xe6, 0xdc, 0xab, 0xbb, 0xa9, 0x93, 0x26, 0xdd, 0xbc, 0xca, 0xad, 0x62, 0x32, 0x70,
	0x9f, 0x4b, 0x4e, 0x0b, 0x03, 0x9e, 0x4f, 0xc8, 0x90, 0xed, 0xbc, 0x8a, 0x0c, 0x0b, 0x33, 0xc9,
	0xf0, 0x3a, 0x86, 0xf0, 0xc3, 0x32, 0x2c, 0xa5, 0xed, 0xc6, 0x75, 0x58, 0x4a, 0x35, 0x36, 0x6d,
	0xb4, 0x5e, 0xe2, 0x4d, 0x58, 0x8c, 0x82, 0x81, 0x70, 0x12, 0x41, 0x5c, 0x21, 0xe9, 0x2a, 0xe6,
	0x49, 0x24, 0xa9, 0x73, 0x69, 0x4b, 0x11, 0x8f, 0x27, 0x61, 0x24, 0x28, 0xd3, 0x69, 0x6c, 0xc1,
	0x1f, 0xc2, 0x82, 0x43, 0x07, 0x91, 0xe6, 0xe2, 0xc4, 0x35, 0xbb, 0x13, 0x7d, 0x2b, 0xad, 0x81,
	0x24, 0xee, 0xf8, 0x12, 0xea, 0xf4, 0x4e, 0xb6, 0xed, 0xd4, 0xd1, 0xe6, 0xfe, 0x79, 0xa0, 0x9a,
	0x51, 0xdd, 0x6f, 0x96, 0xa6, 0x9a, 0xad, 0xf7, 0x1d, 0x83, 0x6c, 0xd2, 0xd9, 0x2f, 0x81, 0x0d,
	0x8f, 0xb4, 0xfa, 0x16, 0x80, 0x16, 0x15, 0xd0, 0x7b, 0xa5, 0x40, 0xd3, 0x42, 0xde, 0x31, 0x08,
	0x96, 0xd3, 0xf2, 0xde, 0x85, 0x0d, 0x27, 0xd5, 0xcf, 0x22, 0xc2, 0x92, 0x42, 0x78, 0x5a, 0x8a,
	0x30, 0x43, 0x75, 0x3b, 0x06, 0x59, 0x77, 0x66, 0x88, 0x71, 0x0f, 0xb6, 0x64, 0x26, 0xa8, 0x45,
	0x94, 0x65, 0x85, 0x62, 0x95, 0x9f, 0x63, 0x96, 0x10, 0x77, 0x0c, 0xb2, 0x21, 0x67, 0x6d, 0xe0,
	0x6f, 0x60, 0x3d, 0x52, 0x0a, 0x5d, 0x44, 0x59, 0x51, 0x28, 0xef, 0x96, 0xa2, 0x4c, 0xa9, 0x7a,
	0xc7, 0x20, 0x6b, 0xd1, 0x94, 0xd4, 0x0b, 0x78, 0x43, 0xc4, 0x2a, 0x6e, 0x67, 0xb7, 0xaf, 0x80,
	0x02, 0x0a, 0xa5, 0x55, 0x8a, 0x52, 0xf6, 0x02, 0x74, 0x0c, 0x52, 0x17, 0x65, 0xaf, 0x43, 0x17,
	0x36, 0x32, 0xb9, 0x2b, 0xa0, 0x55, 0xef, 0x99, 0xcf, 0x0c, 0xe9, 0x8f, 0xe7, 0x43, 0x67, 0xbc,
	0x08, 0x3f, 0x21, 0x78, 0xe2, 0xc4, 0x6a, 0x67, 0x4f, 0x0b, 0x56, 0x11, 0xb4, 0xa6, 0x40, 0xdb,
	0xe5, 0xa4, 0xb8, 0x4f, 0x33, 0x3b, 0x06, 0xd9, 0x75, 0xee, 0x73, 0x3a, 0x5c, 0x85, 0x5a, 0x1e,
	0xf6, 0xf0, 0x16, 0x5d, 0xdf, 0x98, 0xc6, 0x8b, 0x1b, 0xd3, 0x78, 0x79, 0x63, 0xa2, 0xef, 0xc6,
	0x26, 0xfa, 0x65, 0x6c, 0xa2, 0x3f, 0xc6, 0x26, 0xba, 0x1e, 0x9b, 0xe8, 0xcf, 0xb1, 0x89, 0xfe,
	0x1a, 0x9b, 0xc6, 0xcb, 0xb1, 0x89, 0x7e, 0xbe, 0x35, 0x8d, 0xeb, 0x5b, 0xd3, 0x78, 0x71, 0x6b,
	0x1a, 0xb0, 0xcd, 0x83, 0xb2, 0x4a, 0x0f, 0x6b, 0x9f, 0x27, 0xfa, 0x71, 0x12, 0xff, 0x8b, 0x9d,
	0xa0, 0xaf, 0x3f, 0xbb, 0xe0, 0xb2, 0x37, 0xe8, 0xc6, 0xaa, 0xd9, 0xd4, 0x31, 0x3c, 0x68, 0x0e,
	0xf8, 0xfb, 0x09, 0x0f, 0x9a, 0xc3, 0xfd, 0x66, 0xfa, 0x75, 0xc1, 0x7c, 0x26, 0x62, 0xe6, 0x4d,
	0xfc, 0x44, 0x7e, 0x9c, 0x7e, 0xfe, 0x5a, 0xd9, 0x3a, 0xd5, 0xa8, 0x07, 0x21, 0xd7, 0xfa, 0x61,
	0x9d, 0xb5, 0xfe, 0xae, 0x6c, 0xeb, 0x9d, 0x76, 0xfb, 0x20, 0xe4, 0xed, 0x76, 0xba, 0xd7, 0x6e,
	0x9f, 0xb5, 0xba, 0x8b, 0xea, 0xbf, 0xf0, 0x83, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x98, 0x46,
	0xd6, 0x6c, 0xa5, 0x0a, 0x00, 0x00,
}

func (this *ApplicationFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationFailureInfo)
	if !ok {
		that2, ok := that.(ApplicationFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.NonRetryable != that1.NonRetryable {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *TimeoutFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeoutFailureInfo)
	if !ok {
		that2, ok := that.(TimeoutFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeoutType != that1.TimeoutType {
		return false
	}
	if !this.LastHeartbeatDetails.Equal(that1.LastHeartbeatDetails) {
		return false
	}
	return true
}
func (this *CanceledFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CanceledFailureInfo)
	if !ok {
		that2, ok := that.(CanceledFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *TerminatedFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TerminatedFailureInfo)
	if !ok {
		that2, ok := that.(TerminatedFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServerFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerFailureInfo)
	if !ok {
		that2, ok := that.(ServerFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NonRetryable != that1.NonRetryable {
		return false
	}
	return true
}
func (this *ResetWorkflowFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetWorkflowFailureInfo)
	if !ok {
		that2, ok := that.(ResetWorkflowFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LastHeartbeatDetails.Equal(that1.LastHeartbeatDetails) {
		return false
	}
	return true
}
func (this *ActivityFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityFailureInfo)
	if !ok {
		that2, ok := that.(ActivityFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.RetryState != that1.RetryState {
		return false
	}
	return true
}
func (this *ChildWorkflowExecutionFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowExecutionFailureInfo)
	if !ok {
		that2, ok := that.(ChildWorkflowExecutionFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.RetryState != that1.RetryState {
		return false
	}
	return true
}
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure)
	if !ok {
		that2, ok := that.(Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.StackTrace != that1.StackTrace {
		return false
	}
	if !this.Cause.Equal(that1.Cause) {
		return false
	}
	if that1.FailureInfo == nil {
		if this.FailureInfo != nil {
			return false
		}
	} else if this.FailureInfo == nil {
		return false
	} else if !this.FailureInfo.Equal(that1.FailureInfo) {
		return false
	}
	return true
}
func (this *Failure_ApplicationFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure_ApplicationFailureInfo)
	if !ok {
		that2, ok := that.(Failure_ApplicationFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationFailureInfo.Equal(that1.ApplicationFailureInfo) {
		return false
	}
	return true
}
func (this *Failure_TimeoutFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure_TimeoutFailureInfo)
	if !ok {
		that2, ok := that.(Failure_TimeoutFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TimeoutFailureInfo.Equal(that1.TimeoutFailureInfo) {
		return false
	}
	return true
}
func (this *Failure_CanceledFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure_CanceledFailureInfo)
	if !ok {
		that2, ok := that.(Failure_CanceledFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CanceledFailureInfo.Equal(that1.CanceledFailureInfo) {
		return false
	}
	return true
}
func (this *Failure_TerminatedFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure_TerminatedFailureInfo)
	if !ok {
		that2, ok := that.(Failure_TerminatedFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TerminatedFailureInfo.Equal(that1.TerminatedFailureInfo) {
		return false
	}
	return true
}
func (this *Failure_ServerFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure_ServerFailureInfo)
	if !ok {
		that2, ok := that.(Failure_ServerFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServerFailureInfo.Equal(that1.ServerFailureInfo) {
		return false
	}
	return true
}
func (this *Failure_ResetWorkflowFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure_ResetWorkflowFailureInfo)
	if !ok {
		that2, ok := that.(Failure_ResetWorkflowFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResetWorkflowFailureInfo.Equal(that1.ResetWorkflowFailureInfo) {
		return false
	}
	return true
}
func (this *Failure_ActivityFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure_ActivityFailureInfo)
	if !ok {
		that2, ok := that.(Failure_ActivityFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActivityFailureInfo.Equal(that1.ActivityFailureInfo) {
		return false
	}
	return true
}
func (this *Failure_ChildWorkflowExecutionFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure_ChildWorkflowExecutionFailureInfo)
	if !ok {
		that2, ok := that.(Failure_ChildWorkflowExecutionFailureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChildWorkflowExecutionFailureInfo.Equal(that1.ChildWorkflowExecutionFailureInfo) {
		return false
	}
	return true
}
func (this *ApplicationFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&failure.ApplicationFailureInfo{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "NonRetryable: "+fmt.Sprintf("%#v", this.NonRetryable)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimeoutFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&failure.TimeoutFailureInfo{")
	s = append(s, "TimeoutType: "+fmt.Sprintf("%#v", this.TimeoutType)+",\n")
	if this.LastHeartbeatDetails != nil {
		s = append(s, "LastHeartbeatDetails: "+fmt.Sprintf("%#v", this.LastHeartbeatDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CanceledFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&failure.CanceledFailureInfo{")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TerminatedFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&failure.TerminatedFailureInfo{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&failure.ServerFailureInfo{")
	s = append(s, "NonRetryable: "+fmt.Sprintf("%#v", this.NonRetryable)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetWorkflowFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&failure.ResetWorkflowFailureInfo{")
	if this.LastHeartbeatDetails != nil {
		s = append(s, "LastHeartbeatDetails: "+fmt.Sprintf("%#v", this.LastHeartbeatDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&failure.ActivityFailureInfo{")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	s = append(s, "RetryState: "+fmt.Sprintf("%#v", this.RetryState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildWorkflowExecutionFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&failure.ChildWorkflowExecutionFailureInfo{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "RetryState: "+fmt.Sprintf("%#v", this.RetryState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Failure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&failure.Failure{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "StackTrace: "+fmt.Sprintf("%#v", this.StackTrace)+",\n")
	if this.Cause != nil {
		s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	}
	if this.FailureInfo != nil {
		s = append(s, "FailureInfo: "+fmt.Sprintf("%#v", this.FailureInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Failure_ApplicationFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&failure.Failure_ApplicationFailureInfo{` +
		`ApplicationFailureInfo:` + fmt.Sprintf("%#v", this.ApplicationFailureInfo) + `}`}, ", ")
	return s
}
func (this *Failure_TimeoutFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&failure.Failure_TimeoutFailureInfo{` +
		`TimeoutFailureInfo:` + fmt.Sprintf("%#v", this.TimeoutFailureInfo) + `}`}, ", ")
	return s
}
func (this *Failure_CanceledFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&failure.Failure_CanceledFailureInfo{` +
		`CanceledFailureInfo:` + fmt.Sprintf("%#v", this.CanceledFailureInfo) + `}`}, ", ")
	return s
}
func (this *Failure_TerminatedFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&failure.Failure_TerminatedFailureInfo{` +
		`TerminatedFailureInfo:` + fmt.Sprintf("%#v", this.TerminatedFailureInfo) + `}`}, ", ")
	return s
}
func (this *Failure_ServerFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&failure.Failure_ServerFailureInfo{` +
		`ServerFailureInfo:` + fmt.Sprintf("%#v", this.ServerFailureInfo) + `}`}, ", ")
	return s
}
func (this *Failure_ResetWorkflowFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&failure.Failure_ResetWorkflowFailureInfo{` +
		`ResetWorkflowFailureInfo:` + fmt.Sprintf("%#v", this.ResetWorkflowFailureInfo) + `}`}, ", ")
	return s
}
func (this *Failure_ActivityFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&failure.Failure_ActivityFailureInfo{` +
		`ActivityFailureInfo:` + fmt.Sprintf("%#v", this.ActivityFailureInfo) + `}`}, ", ")
	return s
}
func (this *Failure_ChildWorkflowExecutionFailureInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&failure.Failure_ChildWorkflowExecutionFailureInfo{` +
		`ChildWorkflowExecutionFailureInfo:` + fmt.Sprintf("%#v", this.ChildWorkflowExecutionFailureInfo) + `}`}, ", ")
	return s
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ApplicationFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NonRetryable {
		i--
		if m.NonRetryable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeartbeatDetails != nil {
		{
			size, err := m.LastHeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TimeoutType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimeoutType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanceledFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanceledFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanceledFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminatedFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminatedFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminatedFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServerFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NonRetryable {
		i--
		if m.NonRetryable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResetWorkflowFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetWorkflowFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetWorkflowFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeartbeatDetails != nil {
		{
			size, err := m.LastHeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryState))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryState))
		i--
		dAtA[i] = 0x30
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailureInfo != nil {
		{
			size := m.FailureInfo.Size()
			i -= size
			if _, err := m.FailureInfo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Cause != nil {
		{
			size, err := m.Cause.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.StackTrace) > 0 {
		i -= len(m.StackTrace)
		copy(dAtA[i:], m.StackTrace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StackTrace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure_ApplicationFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ApplicationFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApplicationFailureInfo != nil {
		{
			size, err := m.ApplicationFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Failure_TimeoutFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_TimeoutFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimeoutFailureInfo != nil {
		{
			size, err := m.TimeoutFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Failure_CanceledFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_CanceledFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CanceledFailureInfo != nil {
		{
			size, err := m.CanceledFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Failure_TerminatedFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_TerminatedFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TerminatedFailureInfo != nil {
		{
			size, err := m.TerminatedFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Failure_ServerFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ServerFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServerFailureInfo != nil {
		{
			size, err := m.ServerFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Failure_ResetWorkflowFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ResetWorkflowFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResetWorkflowFailureInfo != nil {
		{
			size, err := m.ResetWorkflowFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Failure_ActivityFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ActivityFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityFailureInfo != nil {
		{
			size, err := m.ActivityFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Failure_ChildWorkflowExecutionFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ChildWorkflowExecutionFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionFailureInfo != nil {
		{
			size, err := m.ChildWorkflowExecutionFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplicationFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.NonRetryable {
		n += 2
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TimeoutFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutType != 0 {
		n += 1 + sovMessage(uint64(m.TimeoutType))
	}
	if m.LastHeartbeatDetails != nil {
		l = m.LastHeartbeatDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CanceledFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TerminatedFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServerFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonRetryable {
		n += 2
	}
	return n
}

func (m *ResetWorkflowFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastHeartbeatDetails != nil {
		l = m.LastHeartbeatDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RetryState != 0 {
		n += 1 + sovMessage(uint64(m.RetryState))
	}
	return n
}

func (m *ChildWorkflowExecutionFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.RetryState != 0 {
		n += 1 + sovMessage(uint64(m.RetryState))
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StackTrace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Cause != nil {
		l = m.Cause.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FailureInfo != nil {
		n += m.FailureInfo.Size()
	}
	return n
}

func (m *Failure_ApplicationFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplicationFailureInfo != nil {
		l = m.ApplicationFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_TimeoutFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutFailureInfo != nil {
		l = m.TimeoutFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_CanceledFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanceledFailureInfo != nil {
		l = m.CanceledFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_TerminatedFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TerminatedFailureInfo != nil {
		l = m.TerminatedFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_ServerFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerFailureInfo != nil {
		l = m.ServerFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_ResetWorkflowFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetWorkflowFailureInfo != nil {
		l = m.ResetWorkflowFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_ActivityFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityFailureInfo != nil {
		l = m.ActivityFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_ChildWorkflowExecutionFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionFailureInfo != nil {
		l = m.ChildWorkflowExecutionFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ApplicationFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationFailureInfo{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`NonRetryable:` + fmt.Sprintf("%v", this.NonRetryable) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v1.Payloads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimeoutFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeoutFailureInfo{`,
		`TimeoutType:` + fmt.Sprintf("%v", this.TimeoutType) + `,`,
		`LastHeartbeatDetails:` + strings.Replace(fmt.Sprintf("%v", this.LastHeartbeatDetails), "Payloads", "v1.Payloads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CanceledFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CanceledFailureInfo{`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v1.Payloads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TerminatedFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TerminatedFailureInfo{`,
		`}`,
	}, "")
	return s
}
func (this *ServerFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerFailureInfo{`,
		`NonRetryable:` + fmt.Sprintf("%v", this.NonRetryable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetWorkflowFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetWorkflowFailureInfo{`,
		`LastHeartbeatDetails:` + strings.Replace(fmt.Sprintf("%v", this.LastHeartbeatDetails), "Payloads", "v1.Payloads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityFailureInfo{`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "v1.ActivityType", 1) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`RetryState:` + fmt.Sprintf("%v", this.RetryState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowExecutionFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowExecutionFailureInfo{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`RetryState:` + fmt.Sprintf("%v", this.RetryState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`StackTrace:` + fmt.Sprintf("%v", this.StackTrace) + `,`,
		`Cause:` + strings.Replace(this.Cause.String(), "Failure", "Failure", 1) + `,`,
		`FailureInfo:` + fmt.Sprintf("%v", this.FailureInfo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure_ApplicationFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure_ApplicationFailureInfo{`,
		`ApplicationFailureInfo:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationFailureInfo), "ApplicationFailureInfo", "ApplicationFailureInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure_TimeoutFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure_TimeoutFailureInfo{`,
		`TimeoutFailureInfo:` + strings.Replace(fmt.Sprintf("%v", this.TimeoutFailureInfo), "TimeoutFailureInfo", "TimeoutFailureInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure_CanceledFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure_CanceledFailureInfo{`,
		`CanceledFailureInfo:` + strings.Replace(fmt.Sprintf("%v", this.CanceledFailureInfo), "CanceledFailureInfo", "CanceledFailureInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure_TerminatedFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure_TerminatedFailureInfo{`,
		`TerminatedFailureInfo:` + strings.Replace(fmt.Sprintf("%v", this.TerminatedFailureInfo), "TerminatedFailureInfo", "TerminatedFailureInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure_ServerFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure_ServerFailureInfo{`,
		`ServerFailureInfo:` + strings.Replace(fmt.Sprintf("%v", this.ServerFailureInfo), "ServerFailureInfo", "ServerFailureInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure_ResetWorkflowFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure_ResetWorkflowFailureInfo{`,
		`ResetWorkflowFailureInfo:` + strings.Replace(fmt.Sprintf("%v", this.ResetWorkflowFailureInfo), "ResetWorkflowFailureInfo", "ResetWorkflowFailureInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure_ActivityFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure_ActivityFailureInfo{`,
		`ActivityFailureInfo:` + strings.Replace(fmt.Sprintf("%v", this.ActivityFailureInfo), "ActivityFailureInfo", "ActivityFailureInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure_ChildWorkflowExecutionFailureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure_ChildWorkflowExecutionFailureInfo{`,
		`ChildWorkflowExecutionFailureInfo:` + strings.Replace(fmt.Sprintf("%v", this.ChildWorkflowExecutionFailureInfo), "ChildWorkflowExecutionFailureInfo", "ChildWorkflowExecutionFailureInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApplicationFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonRetryable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonRetryable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v1.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutType", wireType)
			}
			m.TimeoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutType |= v11.TimeoutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatDetails == nil {
				m.LastHeartbeatDetails = &v1.Payloads{}
			}
			if err := m.LastHeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanceledFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanceledFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanceledFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v1.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminatedFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminatedFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminatedFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonRetryable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonRetryable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetWorkflowFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetWorkflowFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetWorkflowFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatDetails == nil {
				m.LastHeartbeatDetails = &v1.Payloads{}
			}
			if err := m.LastHeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &v1.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryState", wireType)
			}
			m.RetryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryState |= v11.RetryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryState", wireType)
			}
			m.RetryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryState |= v11.RetryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackTrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackTrace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cause == nil {
				m.Cause = &Failure{}
			}
			if err := m.Cause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ApplicationFailureInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimeoutFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_TimeoutFailureInfo{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanceledFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CanceledFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_CanceledFailureInfo{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminatedFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TerminatedFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_TerminatedFailureInfo{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServerFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ServerFailureInfo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetWorkflowFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResetWorkflowFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ResetWorkflowFailureInfo{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ActivityFailureInfo{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ChildWorkflowExecutionFailureInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
