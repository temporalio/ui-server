// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/history/v1/message.proto

package history

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	v1 "go.temporal.io/api/common/v1"
	v12 "go.temporal.io/api/enums/v1"
	v13 "go.temporal.io/api/failure/v1"
	v11 "go.temporal.io/api/taskqueue/v1"
	v14 "go.temporal.io/api/workflow/v1"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Always the first event in workflow history
type WorkflowExecutionStartedEventAttributes struct {
	WorkflowType *v1.WorkflowType `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// If this workflow is a child, the namespace our parent lives in
	ParentWorkflowNamespace string                `protobuf:"bytes,2,opt,name=parent_workflow_namespace,json=parentWorkflowNamespace,proto3" json:"parent_workflow_namespace,omitempty"`
	ParentWorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=parent_workflow_execution,json=parentWorkflowExecution,proto3" json:"parent_workflow_execution,omitempty"`
	// TODO: What is this? ID of the event that requested this workflow execution if we are a child?
	ParentInitiatedEventId int64          `protobuf:"varint,4,opt,name=parent_initiated_event_id,json=parentInitiatedEventId,proto3" json:"parent_initiated_event_id,omitempty"`
	TaskQueue              *v11.TaskQueue `protobuf:"bytes,5,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// SDK will deserialize this and provide it as arguments to the workflow function
	Input *v1.Payloads `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *time.Duration `protobuf:"bytes,7,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3,stdduration" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *time.Duration `protobuf:"bytes,8,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3,stdduration" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeout *time.Duration `protobuf:"bytes,9,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3,stdduration" json:"workflow_task_timeout,omitempty"`
	// Run id of the previous workflow which continued-as-new or retired or cron executed into this
	// workflow.
	ContinuedExecutionRunId string                     `protobuf:"bytes,10,opt,name=continued_execution_run_id,json=continuedExecutionRunId,proto3" json:"continued_execution_run_id,omitempty"`
	Initiator               v12.ContinueAsNewInitiator `protobuf:"varint,11,opt,name=initiator,proto3,enum=temporal.api.enums.v1.ContinueAsNewInitiator" json:"initiator,omitempty"`
	ContinuedFailure        *v13.Failure               `protobuf:"bytes,12,opt,name=continued_failure,json=continuedFailure,proto3" json:"continued_failure,omitempty"`
	LastCompletionResult    *v1.Payloads               `protobuf:"bytes,13,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	// This is the run id when the WorkflowExecutionStarted event was written
	OriginalExecutionRunId string `protobuf:"bytes,14,opt,name=original_execution_run_id,json=originalExecutionRunId,proto3" json:"original_execution_run_id,omitempty"`
	// Identity of the client who requested this execution
	Identity string `protobuf:"bytes,15,opt,name=identity,proto3" json:"identity,omitempty"`
	// This is the very first runId along the chain of ContinueAsNew and Reset.
	FirstExecutionRunId string          `protobuf:"bytes,16,opt,name=first_execution_run_id,json=firstExecutionRunId,proto3" json:"first_execution_run_id,omitempty"`
	RetryPolicy         *v1.RetryPolicy `protobuf:"bytes,17,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Starting at 1, the number of times we have tried to execute this workflow
	Attempt int32 `protobuf:"varint,18,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// The absolute time at which the workflow will be timed out.
	// This is passed without change to the next run/retry of a workflow.
	WorkflowExecutionExpirationTime *time.Time `protobuf:"bytes,19,opt,name=workflow_execution_expiration_time,json=workflowExecutionExpirationTime,proto3,stdtime" json:"workflow_execution_expiration_time,omitempty"`
	// If this workflow runs on a cron schedule, it will appear here
	CronSchedule string `protobuf:"bytes,20,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	// For a cron workflow, this contains the amount of time between when this iteration of
	// the cron workflow was scheduled and when it should run next per its cron_schedule.
	FirstWorkflowTaskBackoff *time.Duration       `protobuf:"bytes,21,opt,name=first_workflow_task_backoff,json=firstWorkflowTaskBackoff,proto3,stdduration" json:"first_workflow_task_backoff,omitempty"`
	Memo                     *v1.Memo             `protobuf:"bytes,22,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes         *v1.SearchAttributes `protobuf:"bytes,23,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	PrevAutoResetPoints      *v14.ResetPoints     `protobuf:"bytes,24,opt,name=prev_auto_reset_points,json=prevAutoResetPoints,proto3" json:"prev_auto_reset_points,omitempty"`
	Header                   *v1.Header           `protobuf:"bytes,25,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *WorkflowExecutionStartedEventAttributes) Reset() {
	*m = WorkflowExecutionStartedEventAttributes{}
}
func (*WorkflowExecutionStartedEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{0}
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionStartedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionStartedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionStartedEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetParentWorkflowNamespace() string {
	if m != nil {
		return m.ParentWorkflowNamespace
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetParentWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.ParentWorkflowExecution
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetParentInitiatedEventId() int64 {
	if m != nil {
		return m.ParentInitiatedEventId
	}
	return 0
}

func (m *WorkflowExecutionStartedEventAttributes) GetTaskQueue() *v11.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetWorkflowExecutionTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowExecutionTimeout
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetWorkflowRunTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowRunTimeout
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetWorkflowTaskTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowTaskTimeout
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetContinuedExecutionRunId() string {
	if m != nil {
		return m.ContinuedExecutionRunId
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetInitiator() v12.ContinueAsNewInitiator {
	if m != nil {
		return m.Initiator
	}
	return v12.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED
}

func (m *WorkflowExecutionStartedEventAttributes) GetContinuedFailure() *v13.Failure {
	if m != nil {
		return m.ContinuedFailure
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetLastCompletionResult() *v1.Payloads {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetOriginalExecutionRunId() string {
	if m != nil {
		return m.OriginalExecutionRunId
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetFirstExecutionRunId() string {
	if m != nil {
		return m.FirstExecutionRunId
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetRetryPolicy() *v1.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *WorkflowExecutionStartedEventAttributes) GetWorkflowExecutionExpirationTime() *time.Time {
	if m != nil {
		return m.WorkflowExecutionExpirationTime
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetFirstWorkflowTaskBackoff() *time.Duration {
	if m != nil {
		return m.FirstWorkflowTaskBackoff
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetMemo() *v1.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetSearchAttributes() *v1.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetPrevAutoResetPoints() *v14.ResetPoints {
	if m != nil {
		return m.PrevAutoResetPoints
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type WorkflowExecutionCompletedEventAttributes struct {
	// Serialized result of workflow completion (ie: The return value of the workflow function)
	Result *v1.Payloads `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,2,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// If another run is started by cron, this contains the new run id.
	NewExecutionRunId string `protobuf:"bytes,3,opt,name=new_execution_run_id,json=newExecutionRunId,proto3" json:"new_execution_run_id,omitempty"`
}

func (m *WorkflowExecutionCompletedEventAttributes) Reset() {
	*m = WorkflowExecutionCompletedEventAttributes{}
}
func (*WorkflowExecutionCompletedEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{1}
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionCompletedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionCompletedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionCompletedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionCompletedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionCompletedEventAttributes) GetResult() *v1.Payloads {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *WorkflowExecutionCompletedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *WorkflowExecutionCompletedEventAttributes) GetNewExecutionRunId() string {
	if m != nil {
		return m.NewExecutionRunId
	}
	return ""
}

type WorkflowExecutionFailedEventAttributes struct {
	// Serialized result of workflow failure (ex: An exception thrown, or error returned)
	Failure    *v13.Failure   `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	RetryState v12.RetryState `protobuf:"varint,2,opt,name=retry_state,json=retryState,proto3,enum=temporal.api.enums.v1.RetryState" json:"retry_state,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,3,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// If another run is started by cron or retry, this contains the new run id.
	NewExecutionRunId string `protobuf:"bytes,4,opt,name=new_execution_run_id,json=newExecutionRunId,proto3" json:"new_execution_run_id,omitempty"`
}

func (m *WorkflowExecutionFailedEventAttributes) Reset() {
	*m = WorkflowExecutionFailedEventAttributes{}
}
func (*WorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{2}
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionFailedEventAttributes) GetFailure() *v13.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *WorkflowExecutionFailedEventAttributes) GetRetryState() v12.RetryState {
	if m != nil {
		return m.RetryState
	}
	return v12.RETRY_STATE_UNSPECIFIED
}

func (m *WorkflowExecutionFailedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *WorkflowExecutionFailedEventAttributes) GetNewExecutionRunId() string {
	if m != nil {
		return m.NewExecutionRunId
	}
	return ""
}

type WorkflowExecutionTimedOutEventAttributes struct {
	RetryState v12.RetryState `protobuf:"varint,1,opt,name=retry_state,json=retryState,proto3,enum=temporal.api.enums.v1.RetryState" json:"retry_state,omitempty"`
	// If another run is started by cron or retry, this contains the new run id.
	NewExecutionRunId string `protobuf:"bytes,2,opt,name=new_execution_run_id,json=newExecutionRunId,proto3" json:"new_execution_run_id,omitempty"`
}

func (m *WorkflowExecutionTimedOutEventAttributes) Reset() {
	*m = WorkflowExecutionTimedOutEventAttributes{}
}
func (*WorkflowExecutionTimedOutEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{3}
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionTimedOutEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionTimedOutEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionTimedOutEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionTimedOutEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionTimedOutEventAttributes) GetRetryState() v12.RetryState {
	if m != nil {
		return m.RetryState
	}
	return v12.RETRY_STATE_UNSPECIFIED
}

func (m *WorkflowExecutionTimedOutEventAttributes) GetNewExecutionRunId() string {
	if m != nil {
		return m.NewExecutionRunId
	}
	return ""
}

type WorkflowExecutionContinuedAsNewEventAttributes struct {
	// The run ID of the new workflow started by this continue-as-new
	NewExecutionRunId string           `protobuf:"bytes,1,opt,name=new_execution_run_id,json=newExecutionRunId,proto3" json:"new_execution_run_id,omitempty"`
	WorkflowType      *v1.WorkflowType `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue         *v11.TaskQueue   `protobuf:"bytes,3,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input             *v1.Payloads     `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *time.Duration `protobuf:"bytes,5,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3,stdduration" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeout *time.Duration `protobuf:"bytes,6,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3,stdduration" json:"workflow_task_timeout,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,7,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// TODO: How and is this used?
	BackoffStartInterval *time.Duration             `protobuf:"bytes,8,opt,name=backoff_start_interval,json=backoffStartInterval,proto3,stdduration" json:"backoff_start_interval,omitempty"`
	Initiator            v12.ContinueAsNewInitiator `protobuf:"varint,9,opt,name=initiator,proto3,enum=temporal.api.enums.v1.ContinueAsNewInitiator" json:"initiator,omitempty"`
	// TODO: David are these right?
	// Deprecated. If a workflow's retry policy would cause a new run to start when the current one
	// has failed, this field would be populated with that failure. Now (when supported by server
	// and sdk) the final event will be `WORKFLOW_EXECUTION_FAILED` with `new_execution_run_id` set.
	Failure *v13.Failure `protobuf:"bytes,10,opt,name=failure,proto3" json:"failure,omitempty"`
	// TODO: Is this the result of *this* workflow as it continued-as-new?
	LastCompletionResult *v1.Payloads         `protobuf:"bytes,11,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	Header               *v1.Header           `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	Memo                 *v1.Memo             `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes     *v1.SearchAttributes `protobuf:"bytes,14,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) Reset() {
	*m = WorkflowExecutionContinuedAsNewEventAttributes{}
}
func (*WorkflowExecutionContinuedAsNewEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionContinuedAsNewEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{4}
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionContinuedAsNewEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionContinuedAsNewEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionContinuedAsNewEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionContinuedAsNewEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetNewExecutionRunId() string {
	if m != nil {
		return m.NewExecutionRunId
	}
	return ""
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetTaskQueue() *v11.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetWorkflowRunTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowRunTimeout
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetWorkflowTaskTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowTaskTimeout
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetBackoffStartInterval() *time.Duration {
	if m != nil {
		return m.BackoffStartInterval
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetInitiator() v12.ContinueAsNewInitiator {
	if m != nil {
		return m.Initiator
	}
	return v12.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetFailure() *v13.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetLastCompletionResult() *v1.Payloads {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetMemo() *v1.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetSearchAttributes() *v1.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type WorkflowTaskScheduledEventAttributes struct {
	// The task queue this workflow task was enqueued in, which could be a normal or sticky queue
	TaskQueue *v11.TaskQueue `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// How long the worker has to process this task once receiving it before it times out
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToCloseTimeout *time.Duration `protobuf:"bytes,2,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3,stdduration" json:"start_to_close_timeout,omitempty"`
	// Starting at 1, how many attempts there have been to complete this task
	Attempt int32 `protobuf:"varint,3,opt,name=attempt,proto3" json:"attempt,omitempty"`
}

func (m *WorkflowTaskScheduledEventAttributes) Reset()      { *m = WorkflowTaskScheduledEventAttributes{} }
func (*WorkflowTaskScheduledEventAttributes) ProtoMessage() {}
func (*WorkflowTaskScheduledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{5}
}
func (m *WorkflowTaskScheduledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowTaskScheduledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowTaskScheduledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowTaskScheduledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowTaskScheduledEventAttributes.Merge(m, src)
}
func (m *WorkflowTaskScheduledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowTaskScheduledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowTaskScheduledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowTaskScheduledEventAttributes proto.InternalMessageInfo

func (m *WorkflowTaskScheduledEventAttributes) GetTaskQueue() *v11.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *WorkflowTaskScheduledEventAttributes) GetStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.StartToCloseTimeout
	}
	return nil
}

func (m *WorkflowTaskScheduledEventAttributes) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

type WorkflowTaskStartedEventAttributes struct {
	// The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
	ScheduledEventId int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// Identity of the worker who picked up this task
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// TODO: ? Appears unused?
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *WorkflowTaskStartedEventAttributes) Reset()      { *m = WorkflowTaskStartedEventAttributes{} }
func (*WorkflowTaskStartedEventAttributes) ProtoMessage() {}
func (*WorkflowTaskStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{6}
}
func (m *WorkflowTaskStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowTaskStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowTaskStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowTaskStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowTaskStartedEventAttributes.Merge(m, src)
}
func (m *WorkflowTaskStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowTaskStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowTaskStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowTaskStartedEventAttributes proto.InternalMessageInfo

func (m *WorkflowTaskStartedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *WorkflowTaskStartedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *WorkflowTaskStartedEventAttributes) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type WorkflowTaskCompletedEventAttributes struct {
	// The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
	ScheduledEventId int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
	StartedEventId int64 `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	// Identity of the worker who completed this task
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Binary ID of the worker who completed this task
	BinaryChecksum string `protobuf:"bytes,4,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
}

func (m *WorkflowTaskCompletedEventAttributes) Reset()      { *m = WorkflowTaskCompletedEventAttributes{} }
func (*WorkflowTaskCompletedEventAttributes) ProtoMessage() {}
func (*WorkflowTaskCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{7}
}
func (m *WorkflowTaskCompletedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowTaskCompletedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowTaskCompletedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowTaskCompletedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowTaskCompletedEventAttributes.Merge(m, src)
}
func (m *WorkflowTaskCompletedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowTaskCompletedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowTaskCompletedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowTaskCompletedEventAttributes proto.InternalMessageInfo

func (m *WorkflowTaskCompletedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *WorkflowTaskCompletedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *WorkflowTaskCompletedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *WorkflowTaskCompletedEventAttributes) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type WorkflowTaskTimedOutEventAttributes struct {
	// The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
	ScheduledEventId int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
	StartedEventId int64           `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	TimeoutType    v12.TimeoutType `protobuf:"varint,3,opt,name=timeout_type,json=timeoutType,proto3,enum=temporal.api.enums.v1.TimeoutType" json:"timeout_type,omitempty"`
}

func (m *WorkflowTaskTimedOutEventAttributes) Reset()      { *m = WorkflowTaskTimedOutEventAttributes{} }
func (*WorkflowTaskTimedOutEventAttributes) ProtoMessage() {}
func (*WorkflowTaskTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{8}
}
func (m *WorkflowTaskTimedOutEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowTaskTimedOutEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowTaskTimedOutEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowTaskTimedOutEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowTaskTimedOutEventAttributes.Merge(m, src)
}
func (m *WorkflowTaskTimedOutEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowTaskTimedOutEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowTaskTimedOutEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowTaskTimedOutEventAttributes proto.InternalMessageInfo

func (m *WorkflowTaskTimedOutEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *WorkflowTaskTimedOutEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *WorkflowTaskTimedOutEventAttributes) GetTimeoutType() v12.TimeoutType {
	if m != nil {
		return m.TimeoutType
	}
	return v12.TIMEOUT_TYPE_UNSPECIFIED
}

type WorkflowTaskFailedEventAttributes struct {
	// The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
	ScheduledEventId int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
	StartedEventId int64                       `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Cause          v12.WorkflowTaskFailedCause `protobuf:"varint,3,opt,name=cause,proto3,enum=temporal.api.enums.v1.WorkflowTaskFailedCause" json:"cause,omitempty"`
	// The failure details
	Failure *v13.Failure `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
	// If a worker explicitly failed this task, it's identity. TODO: What is this set to if server fails the task?
	Identity string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// The original run id of the workflow. For reset workflow.
	BaseRunId string `protobuf:"bytes,6,opt,name=base_run_id,json=baseRunId,proto3" json:"base_run_id,omitempty"`
	// If the workflow is being reset, the new run id.
	NewRunId string `protobuf:"bytes,7,opt,name=new_run_id,json=newRunId,proto3" json:"new_run_id,omitempty"`
	// TODO: ?
	ForkEventVersion int64 `protobuf:"varint,8,opt,name=fork_event_version,json=forkEventVersion,proto3" json:"fork_event_version,omitempty"`
	// If a worker explicitly failed this task, it's binary id
	BinaryChecksum string `protobuf:"bytes,9,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
}

func (m *WorkflowTaskFailedEventAttributes) Reset()      { *m = WorkflowTaskFailedEventAttributes{} }
func (*WorkflowTaskFailedEventAttributes) ProtoMessage() {}
func (*WorkflowTaskFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{9}
}
func (m *WorkflowTaskFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowTaskFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowTaskFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowTaskFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowTaskFailedEventAttributes.Merge(m, src)
}
func (m *WorkflowTaskFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowTaskFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowTaskFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowTaskFailedEventAttributes proto.InternalMessageInfo

func (m *WorkflowTaskFailedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *WorkflowTaskFailedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *WorkflowTaskFailedEventAttributes) GetCause() v12.WorkflowTaskFailedCause {
	if m != nil {
		return m.Cause
	}
	return v12.WORKFLOW_TASK_FAILED_CAUSE_UNSPECIFIED
}

func (m *WorkflowTaskFailedEventAttributes) GetFailure() *v13.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *WorkflowTaskFailedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *WorkflowTaskFailedEventAttributes) GetBaseRunId() string {
	if m != nil {
		return m.BaseRunId
	}
	return ""
}

func (m *WorkflowTaskFailedEventAttributes) GetNewRunId() string {
	if m != nil {
		return m.NewRunId
	}
	return ""
}

func (m *WorkflowTaskFailedEventAttributes) GetForkEventVersion() int64 {
	if m != nil {
		return m.ForkEventVersion
	}
	return 0
}

func (m *WorkflowTaskFailedEventAttributes) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type ActivityTaskScheduledEventAttributes struct {
	// The worker/user assigned identifier for the activity
	ActivityId   string           `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType *v1.ActivityType `protobuf:"bytes,2,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Namespace    string           `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TaskQueue    *v11.TaskQueue   `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Header       *v1.Header       `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	Input        *v1.Payloads     `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	// Indicates how long the caller is willing to wait for an activity completion. Limits how long
	// retries will be attempted. Either this or `start_to_close_timeout` must be specified.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToCloseTimeout *time.Duration `protobuf:"bytes,7,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3,stdduration" json:"schedule_to_close_timeout,omitempty"`
	// Limits time an activity task can stay in a task queue before a worker picks it up. This
	// timeout is always non retryable, as all a retry would achieve is to put it back into the same
	// queue. Defaults to `schedule_to_close_timeout` or workflow execution timeout if not
	// specified.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToStartTimeout *time.Duration `protobuf:"bytes,8,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3,stdduration" json:"schedule_to_start_timeout,omitempty"`
	// Maximum time an activity is allowed to execute after being picked up by a worker. This
	// timeout is always retryable. Either this or `schedule_to_close_timeout` must be
	// specified.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToCloseTimeout *time.Duration `protobuf:"bytes,9,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3,stdduration" json:"start_to_close_timeout,omitempty"`
	// Maximum permitted time between successful worker heartbeats.
	HeartbeatTimeout *time.Duration `protobuf:"bytes,10,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3,stdduration" json:"heartbeat_timeout,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,11,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// Activities are assigned a default retry policy controlled by the service's dynamic
	// configuration. Retries will happen up to `schedule_to_close_timeout`. To disable retries set
	// retry_policy.maximum_attempts to 1.
	RetryPolicy *v1.RetryPolicy `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
}

func (m *ActivityTaskScheduledEventAttributes) Reset()      { *m = ActivityTaskScheduledEventAttributes{} }
func (*ActivityTaskScheduledEventAttributes) ProtoMessage() {}
func (*ActivityTaskScheduledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{10}
}
func (m *ActivityTaskScheduledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskScheduledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskScheduledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskScheduledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskScheduledEventAttributes.Merge(m, src)
}
func (m *ActivityTaskScheduledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskScheduledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskScheduledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskScheduledEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskScheduledEventAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ActivityTaskScheduledEventAttributes) GetActivityType() *v1.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ActivityTaskScheduledEventAttributes) GetTaskQueue() *v11.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetScheduleToCloseTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToCloseTimeout
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetScheduleToStartTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToStartTimeout
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.StartToCloseTimeout
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetHeartbeatTimeout() *time.Duration {
	if m != nil {
		return m.HeartbeatTimeout
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *ActivityTaskScheduledEventAttributes) GetRetryPolicy() *v1.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

type ActivityTaskStartedEventAttributes struct {
	// The id of the `ACTIVITY_TASK_SCHEDULED` event this task corresponds to
	ScheduledEventId int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// id of the worker that picked up this task
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// TODO ??
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Starting at 1, the number of times this task has been attempted
	Attempt int32 `protobuf:"varint,4,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// Will be set to the most recent failure details, if this task has previously failed and then
	// been retried.
	LastFailure *v13.Failure `protobuf:"bytes,5,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
}

func (m *ActivityTaskStartedEventAttributes) Reset()      { *m = ActivityTaskStartedEventAttributes{} }
func (*ActivityTaskStartedEventAttributes) ProtoMessage() {}
func (*ActivityTaskStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{11}
}
func (m *ActivityTaskStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskStartedEventAttributes.Merge(m, src)
}
func (m *ActivityTaskStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskStartedEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskStartedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskStartedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ActivityTaskStartedEventAttributes) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ActivityTaskStartedEventAttributes) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *ActivityTaskStartedEventAttributes) GetLastFailure() *v13.Failure {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

type ActivityTaskCompletedEventAttributes struct {
	// Serialized results of the activity. IE: The return value of the activity function
	Result *v1.Payloads `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// The id of the `ACTIVITY_TASK_SCHEDULED` event this completion corresponds to
	ScheduledEventId int64 `protobuf:"varint,2,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// The id of the `ACTIVITY_TASK_STARTED` event this completion corresponds to
	StartedEventId int64 `protobuf:"varint,3,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	// id of the worker that completed this task
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *ActivityTaskCompletedEventAttributes) Reset()      { *m = ActivityTaskCompletedEventAttributes{} }
func (*ActivityTaskCompletedEventAttributes) ProtoMessage() {}
func (*ActivityTaskCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{12}
}
func (m *ActivityTaskCompletedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskCompletedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskCompletedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskCompletedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskCompletedEventAttributes.Merge(m, src)
}
func (m *ActivityTaskCompletedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskCompletedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskCompletedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskCompletedEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskCompletedEventAttributes) GetResult() *v1.Payloads {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ActivityTaskCompletedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskCompletedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskCompletedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type ActivityTaskFailedEventAttributes struct {
	// Failure details
	Failure *v13.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	// The id of the `ACTIVITY_TASK_SCHEDULED` event this failure corresponds to
	ScheduledEventId int64 `protobuf:"varint,2,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// The id of the `ACTIVITY_TASK_STARTED` event this failure corresponds to
	StartedEventId int64 `protobuf:"varint,3,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	// id of the worker that failed this task
	Identity   string         `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	RetryState v12.RetryState `protobuf:"varint,5,opt,name=retry_state,json=retryState,proto3,enum=temporal.api.enums.v1.RetryState" json:"retry_state,omitempty"`
}

func (m *ActivityTaskFailedEventAttributes) Reset()      { *m = ActivityTaskFailedEventAttributes{} }
func (*ActivityTaskFailedEventAttributes) ProtoMessage() {}
func (*ActivityTaskFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{13}
}
func (m *ActivityTaskFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskFailedEventAttributes.Merge(m, src)
}
func (m *ActivityTaskFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskFailedEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskFailedEventAttributes) GetFailure() *v13.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *ActivityTaskFailedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskFailedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskFailedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ActivityTaskFailedEventAttributes) GetRetryState() v12.RetryState {
	if m != nil {
		return m.RetryState
	}
	return v12.RETRY_STATE_UNSPECIFIED
}

type ActivityTaskTimedOutEventAttributes struct {
	// If this activity had failed, was retried, and then timed out, that failure is stored as the
	// `cause` in here.
	Failure *v13.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	// The id of the `ACTIVITY_TASK_SCHEDULED` event this timeout corresponds to
	ScheduledEventId int64 `protobuf:"varint,2,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// The id of the `ACTIVITY_TASK_STARTED` event this timeout corresponds to
	StartedEventId int64          `protobuf:"varint,3,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	RetryState     v12.RetryState `protobuf:"varint,4,opt,name=retry_state,json=retryState,proto3,enum=temporal.api.enums.v1.RetryState" json:"retry_state,omitempty"`
}

func (m *ActivityTaskTimedOutEventAttributes) Reset()      { *m = ActivityTaskTimedOutEventAttributes{} }
func (*ActivityTaskTimedOutEventAttributes) ProtoMessage() {}
func (*ActivityTaskTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{14}
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskTimedOutEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskTimedOutEventAttributes.Merge(m, src)
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskTimedOutEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskTimedOutEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskTimedOutEventAttributes) GetFailure() *v13.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *ActivityTaskTimedOutEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskTimedOutEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskTimedOutEventAttributes) GetRetryState() v12.RetryState {
	if m != nil {
		return m.RetryState
	}
	return v12.RETRY_STATE_UNSPECIFIED
}

type ActivityTaskCancelRequestedEventAttributes struct {
	// The id of the `ACTIVITY_TASK_SCHEDULED` event this cancel request corresponds to
	ScheduledEventId int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,2,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
}

func (m *ActivityTaskCancelRequestedEventAttributes) Reset() {
	*m = ActivityTaskCancelRequestedEventAttributes{}
}
func (*ActivityTaskCancelRequestedEventAttributes) ProtoMessage() {}
func (*ActivityTaskCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{15}
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskCancelRequestedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskCancelRequestedEventAttributes.Merge(m, src)
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskCancelRequestedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskCancelRequestedEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskCancelRequestedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskCancelRequestedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

type ActivityTaskCanceledEventAttributes struct {
	// Additional information that the activity reported upon confirming cancellation
	Details *v1.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// id of the most recent `ACTIVITY_TASK_CANCEL_REQUESTED` event which refers to the same
	// activity
	LatestCancelRequestedEventId int64 `protobuf:"varint,2,opt,name=latest_cancel_requested_event_id,json=latestCancelRequestedEventId,proto3" json:"latest_cancel_requested_event_id,omitempty"`
	// The id of the `ACTIVITY_TASK_SCHEDULED` event this cancel confirmation corresponds to
	ScheduledEventId int64 `protobuf:"varint,3,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// The id of the `ACTIVITY_TASK_STARTED` event this cancel confirmation corresponds to
	StartedEventId int64 `protobuf:"varint,4,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	// id of the worker who canceled this activity
	Identity string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *ActivityTaskCanceledEventAttributes) Reset()      { *m = ActivityTaskCanceledEventAttributes{} }
func (*ActivityTaskCanceledEventAttributes) ProtoMessage() {}
func (*ActivityTaskCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{16}
}
func (m *ActivityTaskCanceledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskCanceledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskCanceledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskCanceledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskCanceledEventAttributes.Merge(m, src)
}
func (m *ActivityTaskCanceledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskCanceledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskCanceledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskCanceledEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskCanceledEventAttributes) GetDetails() *v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ActivityTaskCanceledEventAttributes) GetLatestCancelRequestedEventId() int64 {
	if m != nil {
		return m.LatestCancelRequestedEventId
	}
	return 0
}

func (m *ActivityTaskCanceledEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskCanceledEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskCanceledEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type TimerStartedEventAttributes struct {
	// The worker/user assigned id for this timer
	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	// How long until this timer fires
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToFireTimeout *time.Duration `protobuf:"bytes,2,opt,name=start_to_fire_timeout,json=startToFireTimeout,proto3,stdduration" json:"start_to_fire_timeout,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,3,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
}

func (m *TimerStartedEventAttributes) Reset()      { *m = TimerStartedEventAttributes{} }
func (*TimerStartedEventAttributes) ProtoMessage() {}
func (*TimerStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{17}
}
func (m *TimerStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerStartedEventAttributes.Merge(m, src)
}
func (m *TimerStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *TimerStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TimerStartedEventAttributes proto.InternalMessageInfo

func (m *TimerStartedEventAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *TimerStartedEventAttributes) GetStartToFireTimeout() *time.Duration {
	if m != nil {
		return m.StartToFireTimeout
	}
	return nil
}

func (m *TimerStartedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

type TimerFiredEventAttributes struct {
	// Will match the `timer_id` from `TIMER_STARTED` event for this timer
	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	// The id of the `TIMER_STARTED` event itself
	StartedEventId int64 `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
}

func (m *TimerFiredEventAttributes) Reset()      { *m = TimerFiredEventAttributes{} }
func (*TimerFiredEventAttributes) ProtoMessage() {}
func (*TimerFiredEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{18}
}
func (m *TimerFiredEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerFiredEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerFiredEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerFiredEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerFiredEventAttributes.Merge(m, src)
}
func (m *TimerFiredEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *TimerFiredEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerFiredEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TimerFiredEventAttributes proto.InternalMessageInfo

func (m *TimerFiredEventAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *TimerFiredEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type TimerCanceledEventAttributes struct {
	// Will match the `timer_id` from `TIMER_STARTED` event for this timer
	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	// The id of the `TIMER_STARTED` event itself
	StartedEventId int64 `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,3,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// The id of the worker who requested this cancel
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *TimerCanceledEventAttributes) Reset()      { *m = TimerCanceledEventAttributes{} }
func (*TimerCanceledEventAttributes) ProtoMessage() {}
func (*TimerCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{19}
}
func (m *TimerCanceledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerCanceledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerCanceledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerCanceledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerCanceledEventAttributes.Merge(m, src)
}
func (m *TimerCanceledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *TimerCanceledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerCanceledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TimerCanceledEventAttributes proto.InternalMessageInfo

func (m *TimerCanceledEventAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *TimerCanceledEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *TimerCanceledEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *TimerCanceledEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type WorkflowExecutionCancelRequestedEventAttributes struct {
	// User provided reason for requesting cancellation
	Cause string `protobuf:"bytes,1,opt,name=cause,proto3" json:"cause,omitempty"`
	// TODO: Is this the ID of the event in the workflow which initiated this cancel, if there was one?
	ExternalInitiatedEventId  int64                 `protobuf:"varint,2,opt,name=external_initiated_event_id,json=externalInitiatedEventId,proto3" json:"external_initiated_event_id,omitempty"`
	ExternalWorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=external_workflow_execution,json=externalWorkflowExecution,proto3" json:"external_workflow_execution,omitempty"`
	// id of the worker or client who requested this cancel
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) Reset() {
	*m = WorkflowExecutionCancelRequestedEventAttributes{}
}
func (*WorkflowExecutionCancelRequestedEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{20}
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionCancelRequestedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionCancelRequestedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionCancelRequestedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionCancelRequestedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionCancelRequestedEventAttributes) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) GetExternalInitiatedEventId() int64 {
	if m != nil {
		return m.ExternalInitiatedEventId
	}
	return 0
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) GetExternalWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.ExternalWorkflowExecution
	}
	return nil
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type WorkflowExecutionCanceledEventAttributes struct {
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64        `protobuf:"varint,1,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	Details                      *v1.Payloads `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *WorkflowExecutionCanceledEventAttributes) Reset() {
	*m = WorkflowExecutionCanceledEventAttributes{}
}
func (*WorkflowExecutionCanceledEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{21}
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionCanceledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionCanceledEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionCanceledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionCanceledEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionCanceledEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *WorkflowExecutionCanceledEventAttributes) GetDetails() *v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

type MarkerRecordedEventAttributes struct {
	// Workers use this to identify the "types" of various markers. Ex: Local activity, side effect.
	MarkerName string `protobuf:"bytes,1,opt,name=marker_name,json=markerName,proto3" json:"marker_name,omitempty"`
	// Serialized information recorded in the marker
	Details map[string]*v1.Payloads `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64      `protobuf:"varint,3,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	Header                       *v1.Header `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	// Some uses of markers, like a local activity, could "fail". If they did that is recorded here.
	Failure *v13.Failure `protobuf:"bytes,5,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *MarkerRecordedEventAttributes) Reset()      { *m = MarkerRecordedEventAttributes{} }
func (*MarkerRecordedEventAttributes) ProtoMessage() {}
func (*MarkerRecordedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{22}
}
func (m *MarkerRecordedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkerRecordedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkerRecordedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkerRecordedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkerRecordedEventAttributes.Merge(m, src)
}
func (m *MarkerRecordedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *MarkerRecordedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkerRecordedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MarkerRecordedEventAttributes proto.InternalMessageInfo

func (m *MarkerRecordedEventAttributes) GetMarkerName() string {
	if m != nil {
		return m.MarkerName
	}
	return ""
}

func (m *MarkerRecordedEventAttributes) GetDetails() map[string]*v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *MarkerRecordedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *MarkerRecordedEventAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MarkerRecordedEventAttributes) GetFailure() *v13.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type WorkflowExecutionSignaledEventAttributes struct {
	// The name/type of the signal to fire
	SignalName string `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	// Will be deserialized and provided as argument(s) to the signal handler
	Input *v1.Payloads `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// id of the worker/client who sent this signal
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Headers that were passed by the sender of the signal and copied by temporal
	// server into the workflow task.
	Header *v1.Header `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *WorkflowExecutionSignaledEventAttributes) Reset() {
	*m = WorkflowExecutionSignaledEventAttributes{}
}
func (*WorkflowExecutionSignaledEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionSignaledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{23}
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionSignaledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionSignaledEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionSignaledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionSignaledEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionSignaledEventAttributes) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *WorkflowExecutionSignaledEventAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WorkflowExecutionSignaledEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *WorkflowExecutionSignaledEventAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type WorkflowExecutionTerminatedEventAttributes struct {
	// User/client provided reason for termination
	Reason  string       `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Details *v1.Payloads `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// id of the client who requested termination
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *WorkflowExecutionTerminatedEventAttributes) Reset() {
	*m = WorkflowExecutionTerminatedEventAttributes{}
}
func (*WorkflowExecutionTerminatedEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionTerminatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{24}
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionTerminatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionTerminatedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionTerminatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionTerminatedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionTerminatedEventAttributes) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *WorkflowExecutionTerminatedEventAttributes) GetDetails() *v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *WorkflowExecutionTerminatedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RequestCancelExternalWorkflowExecutionInitiatedEventAttributes struct {
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,1,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// The namespace the workflow to be cancelled lives in
	Namespace         string                `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
	// Workers are expected to set this to true if the workflow they are requesting to cancel is
	// a child of the workflow which issued the request
	ChildWorkflowOnly bool `protobuf:"varint,5,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Reset() {
	*m = RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{}
}
func (*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}
func (*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{25}
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Merge(m, src)
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes proto.InternalMessageInfo

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type RequestCancelExternalWorkflowExecutionFailedEventAttributes struct {
	Cause v12.CancelExternalWorkflowExecutionFailedCause `protobuf:"varint,1,opt,name=cause,proto3,enum=temporal.api.enums.v1.CancelExternalWorkflowExecutionFailedCause" json:"cause,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,2,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// namespace of the workflow which failed to cancel
	Namespace         string                `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,4,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	// id of the `REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this failure
	// corresponds to
	InitiatedEventId int64 `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Reset() {
	*m = RequestCancelExternalWorkflowExecutionFailedEventAttributes{}
}
func (*RequestCancelExternalWorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*RequestCancelExternalWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{26}
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelExternalWorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelExternalWorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetCause() v12.CancelExternalWorkflowExecutionFailedCause {
	if m != nil {
		return m.Cause
	}
	return v12.CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

type ExternalWorkflowExecutionCancelRequestedEventAttributes struct {
	// id of the `REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this event corresponds
	// to
	InitiatedEventId int64 `protobuf:"varint,1,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// namespace of the to-be-cancelled workflow
	Namespace         string                `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Reset() {
	*m = ExternalWorkflowExecutionCancelRequestedEventAttributes{}
}
func (*ExternalWorkflowExecutionCancelRequestedEventAttributes) ProtoMessage() {}
func (*ExternalWorkflowExecutionCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{27}
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalWorkflowExecutionCancelRequestedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalWorkflowExecutionCancelRequestedEventAttributes.Merge(m, src)
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalWorkflowExecutionCancelRequestedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalWorkflowExecutionCancelRequestedEventAttributes proto.InternalMessageInfo

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

type SignalExternalWorkflowExecutionInitiatedEventAttributes struct {
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,1,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// namespace of the to-be-signalled workflow
	Namespace         string                `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	// name/type of the signal to fire in the external workflow
	SignalName string `protobuf:"bytes,4,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	// Serialized arguments to provide to the signal handler
	Input *v1.Payloads `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
	// Workers are expected to set this to true if the workflow they are requesting to cancel is
	// a child of the workflow which issued the request
	ChildWorkflowOnly bool       `protobuf:"varint,7,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
	Header            *v1.Header `protobuf:"bytes,8,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Reset() {
	*m = SignalExternalWorkflowExecutionInitiatedEventAttributes{}
}
func (*SignalExternalWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}
func (*SignalExternalWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{28}
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalExternalWorkflowExecutionInitiatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalExternalWorkflowExecutionInitiatedEventAttributes.Merge(m, src)
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalExternalWorkflowExecutionInitiatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SignalExternalWorkflowExecutionInitiatedEventAttributes proto.InternalMessageInfo

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type SignalExternalWorkflowExecutionFailedEventAttributes struct {
	Cause v12.SignalExternalWorkflowExecutionFailedCause `protobuf:"varint,1,opt,name=cause,proto3,enum=temporal.api.enums.v1.SignalExternalWorkflowExecutionFailedCause" json:"cause,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64                 `protobuf:"varint,2,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	Namespace                    string                `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution            *v1.WorkflowExecution `protobuf:"bytes,4,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	InitiatedEventId             int64                 `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Reset() {
	*m = SignalExternalWorkflowExecutionFailedEventAttributes{}
}
func (*SignalExternalWorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*SignalExternalWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{29}
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalExternalWorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalExternalWorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalExternalWorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SignalExternalWorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetCause() v12.SignalExternalWorkflowExecutionFailedCause {
	if m != nil {
		return m.Cause
	}
	return v12.SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

type ExternalWorkflowExecutionSignaledEventAttributes struct {
	// id of the `SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this event corresponds to
	InitiatedEventId int64 `protobuf:"varint,1,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// namespace of the workflow which was signaled
	Namespace         string                `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) Reset() {
	*m = ExternalWorkflowExecutionSignaledEventAttributes{}
}
func (*ExternalWorkflowExecutionSignaledEventAttributes) ProtoMessage() {}
func (*ExternalWorkflowExecutionSignaledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{30}
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalWorkflowExecutionSignaledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalWorkflowExecutionSignaledEventAttributes.Merge(m, src)
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalWorkflowExecutionSignaledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalWorkflowExecutionSignaledEventAttributes proto.InternalMessageInfo

func (m *ExternalWorkflowExecutionSignaledEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

type UpsertWorkflowSearchAttributesEventAttributes struct {
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64                `protobuf:"varint,1,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	SearchAttributes             *v1.SearchAttributes `protobuf:"bytes,2,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) Reset() {
	*m = UpsertWorkflowSearchAttributesEventAttributes{}
}
func (*UpsertWorkflowSearchAttributesEventAttributes) ProtoMessage() {}
func (*UpsertWorkflowSearchAttributesEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{31}
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertWorkflowSearchAttributesEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertWorkflowSearchAttributesEventAttributes.Merge(m, src)
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertWorkflowSearchAttributesEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertWorkflowSearchAttributesEventAttributes proto.InternalMessageInfo

func (m *UpsertWorkflowSearchAttributesEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) GetSearchAttributes() *v1.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionInitiatedEventAttributes struct {
	// Namespace of the child workflow
	Namespace    string           `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string           `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType *v1.WorkflowType `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    *v11.TaskQueue   `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        *v1.Payloads     `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *time.Duration `protobuf:"bytes,6,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3,stdduration" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *time.Duration `protobuf:"bytes,7,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3,stdduration" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeout *time.Duration `protobuf:"bytes,8,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3,stdduration" json:"workflow_task_timeout,omitempty"`
	// Default: PARENT_CLOSE_POLICY_TERMINATE.
	ParentClosePolicy v12.ParentClosePolicy `protobuf:"varint,9,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.api.enums.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,10,opt,name=control,proto3" json:"control,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,11,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
	// Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	WorkflowIdReusePolicy v12.WorkflowIdReusePolicy `protobuf:"varint,12,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy           *v1.RetryPolicy           `protobuf:"bytes,13,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// If this child runs on a cron schedule, it will appear here
	CronSchedule     string               `protobuf:"bytes,14,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header           *v1.Header           `protobuf:"bytes,15,opt,name=header,proto3" json:"header,omitempty"`
	Memo             *v1.Memo             `protobuf:"bytes,16,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *v1.SearchAttributes `protobuf:"bytes,17,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Reset() {
	*m = StartChildWorkflowExecutionInitiatedEventAttributes{}
}
func (*StartChildWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}
func (*StartChildWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{32}
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartChildWorkflowExecutionInitiatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartChildWorkflowExecutionInitiatedEventAttributes.Merge(m, src)
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartChildWorkflowExecutionInitiatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartChildWorkflowExecutionInitiatedEventAttributes proto.InternalMessageInfo

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetTaskQueue() *v11.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowExecutionTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowExecutionTimeout
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowRunTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowRunTimeout
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowTaskTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowTaskTimeout
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetParentClosePolicy() v12.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return v12.PARENT_CLOSE_POLICY_UNSPECIFIED
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowIdReusePolicy() v12.WorkflowIdReusePolicy {
	if m != nil {
		return m.WorkflowIdReusePolicy
	}
	return v12.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetRetryPolicy() *v1.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetMemo() *v1.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetSearchAttributes() *v1.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionFailedEventAttributes struct {
	// Namespace of the child workflow
	Namespace    string                                     `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string                                     `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType *v1.WorkflowType                           `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	Cause        v12.StartChildWorkflowExecutionFailedCause `protobuf:"varint,4,opt,name=cause,proto3,enum=temporal.api.enums.v1.StartChildWorkflowExecutionFailedCause" json:"cause,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,5,opt,name=control,proto3" json:"control,omitempty"`
	// Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
	InitiatedEventId int64 `protobuf:"varint,6,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
	WorkflowTaskCompletedEventId int64 `protobuf:"varint,7,opt,name=workflow_task_completed_event_id,json=workflowTaskCompletedEventId,proto3" json:"workflow_task_completed_event_id,omitempty"`
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) Reset() {
	*m = StartChildWorkflowExecutionFailedEventAttributes{}
}
func (*StartChildWorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*StartChildWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{33}
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartChildWorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartChildWorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartChildWorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartChildWorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetCause() v12.StartChildWorkflowExecutionFailedCause {
	if m != nil {
		return m.Cause
	}
	return v12.START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetWorkflowTaskCompletedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskCompletedEventId
	}
	return 0
}

type ChildWorkflowExecutionStartedEventAttributes struct {
	// Namespace of the child workflow
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
	InitiatedEventId  int64                 `protobuf:"varint,2,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *v1.WorkflowType      `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	Header            *v1.Header            `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *ChildWorkflowExecutionStartedEventAttributes) Reset() {
	*m = ChildWorkflowExecutionStartedEventAttributes{}
}
func (*ChildWorkflowExecutionStartedEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{34}
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionStartedEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionStartedEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionStartedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionStartedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionStartedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionStartedEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionStartedEventAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ChildWorkflowExecutionCompletedEventAttributes struct {
	Result *v1.Payloads `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// Namespace of the child workflow
	Namespace         string                `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *v1.WorkflowType      `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
	InitiatedEventId int64 `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
	StartedEventId int64 `protobuf:"varint,6,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) Reset() {
	*m = ChildWorkflowExecutionCompletedEventAttributes{}
}
func (*ChildWorkflowExecutionCompletedEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{35}
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionCompletedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionCompletedEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionCompletedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionCompletedEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetResult() *v1.Payloads {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type ChildWorkflowExecutionFailedEventAttributes struct {
	Failure *v13.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	// Namespace of the child workflow
	Namespace         string                `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *v1.WorkflowType      `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
	InitiatedEventId int64 `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
	StartedEventId int64          `protobuf:"varint,6,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	RetryState     v12.RetryState `protobuf:"varint,7,opt,name=retry_state,json=retryState,proto3,enum=temporal.api.enums.v1.RetryState" json:"retry_state,omitempty"`
}

func (m *ChildWorkflowExecutionFailedEventAttributes) Reset() {
	*m = ChildWorkflowExecutionFailedEventAttributes{}
}
func (*ChildWorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{36}
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionFailedEventAttributes) GetFailure() *v13.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetRetryState() v12.RetryState {
	if m != nil {
		return m.RetryState
	}
	return v12.RETRY_STATE_UNSPECIFIED
}

type ChildWorkflowExecutionCanceledEventAttributes struct {
	Details *v1.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// Namespace of the child workflow
	Namespace         string                `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *v1.WorkflowType      `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
	InitiatedEventId int64 `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
	StartedEventId int64 `protobuf:"varint,6,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) Reset() {
	*m = ChildWorkflowExecutionCanceledEventAttributes{}
}
func (*ChildWorkflowExecutionCanceledEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{37}
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionCanceledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionCanceledEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionCanceledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionCanceledEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetDetails() *v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type ChildWorkflowExecutionTimedOutEventAttributes struct {
	// Namespace of the child workflow
	Namespace         string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *v1.WorkflowType      `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
	InitiatedEventId int64 `protobuf:"varint,4,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
	StartedEventId int64          `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	RetryState     v12.RetryState `protobuf:"varint,6,opt,name=retry_state,json=retryState,proto3,enum=temporal.api.enums.v1.RetryState" json:"retry_state,omitempty"`
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) Reset() {
	*m = ChildWorkflowExecutionTimedOutEventAttributes{}
}
func (*ChildWorkflowExecutionTimedOutEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{38}
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionTimedOutEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionTimedOutEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionTimedOutEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionTimedOutEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetRetryState() v12.RetryState {
	if m != nil {
		return m.RetryState
	}
	return v12.RETRY_STATE_UNSPECIFIED
}

type ChildWorkflowExecutionTerminatedEventAttributes struct {
	// Namespace of the child workflow
	Namespace         string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *v1.WorkflowType      `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
	InitiatedEventId int64 `protobuf:"varint,4,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	// Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
	StartedEventId int64 `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) Reset() {
	*m = ChildWorkflowExecutionTerminatedEventAttributes{}
}
func (*ChildWorkflowExecutionTerminatedEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionTerminatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{39}
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionTerminatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionTerminatedEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionTerminatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionTerminatedEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

// History events are the method by which Temporal SDKs advance (or recreate) workflow state.
// See the `EventType` enum for more info about what each event is for.
type HistoryEvent struct {
	// Monotonically increasing event number, starts at 1.
	EventId   int64         `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTime *time.Time    `protobuf:"bytes,2,opt,name=event_time,json=eventTime,proto3,stdtime" json:"event_time,omitempty"`
	EventType v12.EventType `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3,enum=temporal.api.enums.v1.EventType" json:"event_type,omitempty"`
	// TODO: What is this? Appears unused by SDKs
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// TODO: What is this? Appears unused by SDKs
	TaskId int64 `protobuf:"varint,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The event details. The type must match that in `event_type`.
	//
	// Types that are valid to be assigned to Attributes:
	//	*HistoryEvent_WorkflowExecutionStartedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCompletedEventAttributes
	//	*HistoryEvent_WorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_WorkflowExecutionTimedOutEventAttributes
	//	*HistoryEvent_WorkflowTaskScheduledEventAttributes
	//	*HistoryEvent_WorkflowTaskStartedEventAttributes
	//	*HistoryEvent_WorkflowTaskCompletedEventAttributes
	//	*HistoryEvent_WorkflowTaskTimedOutEventAttributes
	//	*HistoryEvent_WorkflowTaskFailedEventAttributes
	//	*HistoryEvent_ActivityTaskScheduledEventAttributes
	//	*HistoryEvent_ActivityTaskStartedEventAttributes
	//	*HistoryEvent_ActivityTaskCompletedEventAttributes
	//	*HistoryEvent_ActivityTaskFailedEventAttributes
	//	*HistoryEvent_ActivityTaskTimedOutEventAttributes
	//	*HistoryEvent_TimerStartedEventAttributes
	//	*HistoryEvent_TimerFiredEventAttributes
	//	*HistoryEvent_ActivityTaskCancelRequestedEventAttributes
	//	*HistoryEvent_ActivityTaskCanceledEventAttributes
	//	*HistoryEvent_TimerCanceledEventAttributes
	//	*HistoryEvent_MarkerRecordedEventAttributes
	//	*HistoryEvent_WorkflowExecutionSignaledEventAttributes
	//	*HistoryEvent_WorkflowExecutionTerminatedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCanceledEventAttributes
	//	*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes
	//	*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes
	//	*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes
	//	*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes
	//	*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes
	Attributes isHistoryEvent_Attributes `protobuf_oneof:"attributes"`
}

func (m *HistoryEvent) Reset()      { *m = HistoryEvent{} }
func (*HistoryEvent) ProtoMessage() {}
func (*HistoryEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{40}
}
func (m *HistoryEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryEvent.Merge(m, src)
}
func (m *HistoryEvent) XXX_Size() int {
	return m.Size()
}
func (m *HistoryEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryEvent.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryEvent proto.InternalMessageInfo

type isHistoryEvent_Attributes interface {
	isHistoryEvent_Attributes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HistoryEvent_WorkflowExecutionStartedEventAttributes struct {
	WorkflowExecutionStartedEventAttributes *WorkflowExecutionStartedEventAttributes `protobuf:"bytes,6,opt,name=workflow_execution_started_event_attributes,json=workflowExecutionStartedEventAttributes,proto3,oneof" json:"workflow_execution_started_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionCompletedEventAttributes struct {
	WorkflowExecutionCompletedEventAttributes *WorkflowExecutionCompletedEventAttributes `protobuf:"bytes,7,opt,name=workflow_execution_completed_event_attributes,json=workflowExecutionCompletedEventAttributes,proto3,oneof" json:"workflow_execution_completed_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionFailedEventAttributes struct {
	WorkflowExecutionFailedEventAttributes *WorkflowExecutionFailedEventAttributes `protobuf:"bytes,8,opt,name=workflow_execution_failed_event_attributes,json=workflowExecutionFailedEventAttributes,proto3,oneof" json:"workflow_execution_failed_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionTimedOutEventAttributes struct {
	WorkflowExecutionTimedOutEventAttributes *WorkflowExecutionTimedOutEventAttributes `protobuf:"bytes,9,opt,name=workflow_execution_timed_out_event_attributes,json=workflowExecutionTimedOutEventAttributes,proto3,oneof" json:"workflow_execution_timed_out_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowTaskScheduledEventAttributes struct {
	WorkflowTaskScheduledEventAttributes *WorkflowTaskScheduledEventAttributes `protobuf:"bytes,10,opt,name=workflow_task_scheduled_event_attributes,json=workflowTaskScheduledEventAttributes,proto3,oneof" json:"workflow_task_scheduled_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowTaskStartedEventAttributes struct {
	WorkflowTaskStartedEventAttributes *WorkflowTaskStartedEventAttributes `protobuf:"bytes,11,opt,name=workflow_task_started_event_attributes,json=workflowTaskStartedEventAttributes,proto3,oneof" json:"workflow_task_started_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowTaskCompletedEventAttributes struct {
	WorkflowTaskCompletedEventAttributes *WorkflowTaskCompletedEventAttributes `protobuf:"bytes,12,opt,name=workflow_task_completed_event_attributes,json=workflowTaskCompletedEventAttributes,proto3,oneof" json:"workflow_task_completed_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowTaskTimedOutEventAttributes struct {
	WorkflowTaskTimedOutEventAttributes *WorkflowTaskTimedOutEventAttributes `protobuf:"bytes,13,opt,name=workflow_task_timed_out_event_attributes,json=workflowTaskTimedOutEventAttributes,proto3,oneof" json:"workflow_task_timed_out_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowTaskFailedEventAttributes struct {
	WorkflowTaskFailedEventAttributes *WorkflowTaskFailedEventAttributes `protobuf:"bytes,14,opt,name=workflow_task_failed_event_attributes,json=workflowTaskFailedEventAttributes,proto3,oneof" json:"workflow_task_failed_event_attributes,omitempty"`
}
type HistoryEvent_ActivityTaskScheduledEventAttributes struct {
	ActivityTaskScheduledEventAttributes *ActivityTaskScheduledEventAttributes `protobuf:"bytes,15,opt,name=activity_task_scheduled_event_attributes,json=activityTaskScheduledEventAttributes,proto3,oneof" json:"activity_task_scheduled_event_attributes,omitempty"`
}
type HistoryEvent_ActivityTaskStartedEventAttributes struct {
	ActivityTaskStartedEventAttributes *ActivityTaskStartedEventAttributes `protobuf:"bytes,16,opt,name=activity_task_started_event_attributes,json=activityTaskStartedEventAttributes,proto3,oneof" json:"activity_task_started_event_attributes,omitempty"`
}
type HistoryEvent_ActivityTaskCompletedEventAttributes struct {
	ActivityTaskCompletedEventAttributes *ActivityTaskCompletedEventAttributes `protobuf:"bytes,17,opt,name=activity_task_completed_event_attributes,json=activityTaskCompletedEventAttributes,proto3,oneof" json:"activity_task_completed_event_attributes,omitempty"`
}
type HistoryEvent_ActivityTaskFailedEventAttributes struct {
	ActivityTaskFailedEventAttributes *ActivityTaskFailedEventAttributes `protobuf:"bytes,18,opt,name=activity_task_failed_event_attributes,json=activityTaskFailedEventAttributes,proto3,oneof" json:"activity_task_failed_event_attributes,omitempty"`
}
type HistoryEvent_ActivityTaskTimedOutEventAttributes struct {
	ActivityTaskTimedOutEventAttributes *ActivityTaskTimedOutEventAttributes `protobuf:"bytes,19,opt,name=activity_task_timed_out_event_attributes,json=activityTaskTimedOutEventAttributes,proto3,oneof" json:"activity_task_timed_out_event_attributes,omitempty"`
}
type HistoryEvent_TimerStartedEventAttributes struct {
	TimerStartedEventAttributes *TimerStartedEventAttributes `protobuf:"bytes,20,opt,name=timer_started_event_attributes,json=timerStartedEventAttributes,proto3,oneof" json:"timer_started_event_attributes,omitempty"`
}
type HistoryEvent_TimerFiredEventAttributes struct {
	TimerFiredEventAttributes *TimerFiredEventAttributes `protobuf:"bytes,21,opt,name=timer_fired_event_attributes,json=timerFiredEventAttributes,proto3,oneof" json:"timer_fired_event_attributes,omitempty"`
}
type HistoryEvent_ActivityTaskCancelRequestedEventAttributes struct {
	ActivityTaskCancelRequestedEventAttributes *ActivityTaskCancelRequestedEventAttributes `protobuf:"bytes,22,opt,name=activity_task_cancel_requested_event_attributes,json=activityTaskCancelRequestedEventAttributes,proto3,oneof" json:"activity_task_cancel_requested_event_attributes,omitempty"`
}
type HistoryEvent_ActivityTaskCanceledEventAttributes struct {
	ActivityTaskCanceledEventAttributes *ActivityTaskCanceledEventAttributes `protobuf:"bytes,23,opt,name=activity_task_canceled_event_attributes,json=activityTaskCanceledEventAttributes,proto3,oneof" json:"activity_task_canceled_event_attributes,omitempty"`
}
type HistoryEvent_TimerCanceledEventAttributes struct {
	TimerCanceledEventAttributes *TimerCanceledEventAttributes `protobuf:"bytes,24,opt,name=timer_canceled_event_attributes,json=timerCanceledEventAttributes,proto3,oneof" json:"timer_canceled_event_attributes,omitempty"`
}
type HistoryEvent_MarkerRecordedEventAttributes struct {
	MarkerRecordedEventAttributes *MarkerRecordedEventAttributes `protobuf:"bytes,25,opt,name=marker_recorded_event_attributes,json=markerRecordedEventAttributes,proto3,oneof" json:"marker_recorded_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionSignaledEventAttributes struct {
	WorkflowExecutionSignaledEventAttributes *WorkflowExecutionSignaledEventAttributes `protobuf:"bytes,26,opt,name=workflow_execution_signaled_event_attributes,json=workflowExecutionSignaledEventAttributes,proto3,oneof" json:"workflow_execution_signaled_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionTerminatedEventAttributes struct {
	WorkflowExecutionTerminatedEventAttributes *WorkflowExecutionTerminatedEventAttributes `protobuf:"bytes,27,opt,name=workflow_execution_terminated_event_attributes,json=workflowExecutionTerminatedEventAttributes,proto3,oneof" json:"workflow_execution_terminated_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes struct {
	WorkflowExecutionCancelRequestedEventAttributes *WorkflowExecutionCancelRequestedEventAttributes `protobuf:"bytes,28,opt,name=workflow_execution_cancel_requested_event_attributes,json=workflowExecutionCancelRequestedEventAttributes,proto3,oneof" json:"workflow_execution_cancel_requested_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionCanceledEventAttributes struct {
	WorkflowExecutionCanceledEventAttributes *WorkflowExecutionCanceledEventAttributes `protobuf:"bytes,29,opt,name=workflow_execution_canceled_event_attributes,json=workflowExecutionCanceledEventAttributes,proto3,oneof" json:"workflow_execution_canceled_event_attributes,omitempty"`
}
type HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes struct {
	RequestCancelExternalWorkflowExecutionInitiatedEventAttributes *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,30,opt,name=request_cancel_external_workflow_execution_initiated_event_attributes,json=requestCancelExternalWorkflowExecutionInitiatedEventAttributes,proto3,oneof" json:"request_cancel_external_workflow_execution_initiated_event_attributes,omitempty"`
}
type HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes struct {
	RequestCancelExternalWorkflowExecutionFailedEventAttributes *RequestCancelExternalWorkflowExecutionFailedEventAttributes `protobuf:"bytes,31,opt,name=request_cancel_external_workflow_execution_failed_event_attributes,json=requestCancelExternalWorkflowExecutionFailedEventAttributes,proto3,oneof" json:"request_cancel_external_workflow_execution_failed_event_attributes,omitempty"`
}
type HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes struct {
	ExternalWorkflowExecutionCancelRequestedEventAttributes *ExternalWorkflowExecutionCancelRequestedEventAttributes `protobuf:"bytes,32,opt,name=external_workflow_execution_cancel_requested_event_attributes,json=externalWorkflowExecutionCancelRequestedEventAttributes,proto3,oneof" json:"external_workflow_execution_cancel_requested_event_attributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes struct {
	WorkflowExecutionContinuedAsNewEventAttributes *WorkflowExecutionContinuedAsNewEventAttributes `protobuf:"bytes,33,opt,name=workflow_execution_continued_as_new_event_attributes,json=workflowExecutionContinuedAsNewEventAttributes,proto3,oneof" json:"workflow_execution_continued_as_new_event_attributes,omitempty"`
}
type HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes struct {
	StartChildWorkflowExecutionInitiatedEventAttributes *StartChildWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,34,opt,name=start_child_workflow_execution_initiated_event_attributes,json=startChildWorkflowExecutionInitiatedEventAttributes,proto3,oneof" json:"start_child_workflow_execution_initiated_event_attributes,omitempty"`
}
type HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes struct {
	StartChildWorkflowExecutionFailedEventAttributes *StartChildWorkflowExecutionFailedEventAttributes `protobuf:"bytes,35,opt,name=start_child_workflow_execution_failed_event_attributes,json=startChildWorkflowExecutionFailedEventAttributes,proto3,oneof" json:"start_child_workflow_execution_failed_event_attributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionStartedEventAttributes struct {
	ChildWorkflowExecutionStartedEventAttributes *ChildWorkflowExecutionStartedEventAttributes `protobuf:"bytes,36,opt,name=child_workflow_execution_started_event_attributes,json=childWorkflowExecutionStartedEventAttributes,proto3,oneof" json:"child_workflow_execution_started_event_attributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes struct {
	ChildWorkflowExecutionCompletedEventAttributes *ChildWorkflowExecutionCompletedEventAttributes `protobuf:"bytes,37,opt,name=child_workflow_execution_completed_event_attributes,json=childWorkflowExecutionCompletedEventAttributes,proto3,oneof" json:"child_workflow_execution_completed_event_attributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionFailedEventAttributes struct {
	ChildWorkflowExecutionFailedEventAttributes *ChildWorkflowExecutionFailedEventAttributes `protobuf:"bytes,38,opt,name=child_workflow_execution_failed_event_attributes,json=childWorkflowExecutionFailedEventAttributes,proto3,oneof" json:"child_workflow_execution_failed_event_attributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes struct {
	ChildWorkflowExecutionCanceledEventAttributes *ChildWorkflowExecutionCanceledEventAttributes `protobuf:"bytes,39,opt,name=child_workflow_execution_canceled_event_attributes,json=childWorkflowExecutionCanceledEventAttributes,proto3,oneof" json:"child_workflow_execution_canceled_event_attributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes struct {
	ChildWorkflowExecutionTimedOutEventAttributes *ChildWorkflowExecutionTimedOutEventAttributes `protobuf:"bytes,40,opt,name=child_workflow_execution_timed_out_event_attributes,json=childWorkflowExecutionTimedOutEventAttributes,proto3,oneof" json:"child_workflow_execution_timed_out_event_attributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes struct {
	ChildWorkflowExecutionTerminatedEventAttributes *ChildWorkflowExecutionTerminatedEventAttributes `protobuf:"bytes,41,opt,name=child_workflow_execution_terminated_event_attributes,json=childWorkflowExecutionTerminatedEventAttributes,proto3,oneof" json:"child_workflow_execution_terminated_event_attributes,omitempty"`
}
type HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes struct {
	SignalExternalWorkflowExecutionInitiatedEventAttributes *SignalExternalWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,42,opt,name=signal_external_workflow_execution_initiated_event_attributes,json=signalExternalWorkflowExecutionInitiatedEventAttributes,proto3,oneof" json:"signal_external_workflow_execution_initiated_event_attributes,omitempty"`
}
type HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes struct {
	SignalExternalWorkflowExecutionFailedEventAttributes *SignalExternalWorkflowExecutionFailedEventAttributes `protobuf:"bytes,43,opt,name=signal_external_workflow_execution_failed_event_attributes,json=signalExternalWorkflowExecutionFailedEventAttributes,proto3,oneof" json:"signal_external_workflow_execution_failed_event_attributes,omitempty"`
}
type HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes struct {
	ExternalWorkflowExecutionSignaledEventAttributes *ExternalWorkflowExecutionSignaledEventAttributes `protobuf:"bytes,44,opt,name=external_workflow_execution_signaled_event_attributes,json=externalWorkflowExecutionSignaledEventAttributes,proto3,oneof" json:"external_workflow_execution_signaled_event_attributes,omitempty"`
}
type HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes struct {
	UpsertWorkflowSearchAttributesEventAttributes *UpsertWorkflowSearchAttributesEventAttributes `protobuf:"bytes,45,opt,name=upsert_workflow_search_attributes_event_attributes,json=upsertWorkflowSearchAttributesEventAttributes,proto3,oneof" json:"upsert_workflow_search_attributes_event_attributes,omitempty"`
}

func (*HistoryEvent_WorkflowExecutionStartedEventAttributes) isHistoryEvent_Attributes()         {}
func (*HistoryEvent_WorkflowExecutionCompletedEventAttributes) isHistoryEvent_Attributes()       {}
func (*HistoryEvent_WorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes()          {}
func (*HistoryEvent_WorkflowExecutionTimedOutEventAttributes) isHistoryEvent_Attributes()        {}
func (*HistoryEvent_WorkflowTaskScheduledEventAttributes) isHistoryEvent_Attributes()            {}
func (*HistoryEvent_WorkflowTaskStartedEventAttributes) isHistoryEvent_Attributes()              {}
func (*HistoryEvent_WorkflowTaskCompletedEventAttributes) isHistoryEvent_Attributes()            {}
func (*HistoryEvent_WorkflowTaskTimedOutEventAttributes) isHistoryEvent_Attributes()             {}
func (*HistoryEvent_WorkflowTaskFailedEventAttributes) isHistoryEvent_Attributes()               {}
func (*HistoryEvent_ActivityTaskScheduledEventAttributes) isHistoryEvent_Attributes()            {}
func (*HistoryEvent_ActivityTaskStartedEventAttributes) isHistoryEvent_Attributes()              {}
func (*HistoryEvent_ActivityTaskCompletedEventAttributes) isHistoryEvent_Attributes()            {}
func (*HistoryEvent_ActivityTaskFailedEventAttributes) isHistoryEvent_Attributes()               {}
func (*HistoryEvent_ActivityTaskTimedOutEventAttributes) isHistoryEvent_Attributes()             {}
func (*HistoryEvent_TimerStartedEventAttributes) isHistoryEvent_Attributes()                     {}
func (*HistoryEvent_TimerFiredEventAttributes) isHistoryEvent_Attributes()                       {}
func (*HistoryEvent_ActivityTaskCancelRequestedEventAttributes) isHistoryEvent_Attributes()      {}
func (*HistoryEvent_ActivityTaskCanceledEventAttributes) isHistoryEvent_Attributes()             {}
func (*HistoryEvent_TimerCanceledEventAttributes) isHistoryEvent_Attributes()                    {}
func (*HistoryEvent_MarkerRecordedEventAttributes) isHistoryEvent_Attributes()                   {}
func (*HistoryEvent_WorkflowExecutionSignaledEventAttributes) isHistoryEvent_Attributes()        {}
func (*HistoryEvent_WorkflowExecutionTerminatedEventAttributes) isHistoryEvent_Attributes()      {}
func (*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) isHistoryEvent_Attributes() {}
func (*HistoryEvent_WorkflowExecutionCanceledEventAttributes) isHistoryEvent_Attributes()        {}
func (*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) isHistoryEvent_Attributes() {}
func (*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {}
func (*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) isHistoryEvent_Attributes()     {}
func (*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) isHistoryEvent_Attributes()   {}
func (*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes()      {}
func (*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) isHistoryEvent_Attributes()    {}
func (*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) isHistoryEvent_Attributes()    {}
func (*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) isHistoryEvent_Attributes()  {}
func (*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) isHistoryEvent_Attributes() {}
func (*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) isHistoryEvent_Attributes()    {}

func (m *HistoryEvent) GetAttributes() isHistoryEvent_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *HistoryEvent) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *HistoryEvent) GetEventTime() *time.Time {
	if m != nil {
		return m.EventTime
	}
	return nil
}

func (m *HistoryEvent) GetEventType() v12.EventType {
	if m != nil {
		return m.EventType
	}
	return v12.EVENT_TYPE_UNSPECIFIED
}

func (m *HistoryEvent) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HistoryEvent) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *HistoryEvent) GetWorkflowExecutionStartedEventAttributes() *WorkflowExecutionStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionStartedEventAttributes); ok {
		return x.WorkflowExecutionStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionCompletedEventAttributes() *WorkflowExecutionCompletedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionCompletedEventAttributes); ok {
		return x.WorkflowExecutionCompletedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionFailedEventAttributes() *WorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionFailedEventAttributes); ok {
		return x.WorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionTimedOutEventAttributes() *WorkflowExecutionTimedOutEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionTimedOutEventAttributes); ok {
		return x.WorkflowExecutionTimedOutEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowTaskScheduledEventAttributes() *WorkflowTaskScheduledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowTaskScheduledEventAttributes); ok {
		return x.WorkflowTaskScheduledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowTaskStartedEventAttributes() *WorkflowTaskStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowTaskStartedEventAttributes); ok {
		return x.WorkflowTaskStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowTaskCompletedEventAttributes() *WorkflowTaskCompletedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowTaskCompletedEventAttributes); ok {
		return x.WorkflowTaskCompletedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowTaskTimedOutEventAttributes() *WorkflowTaskTimedOutEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowTaskTimedOutEventAttributes); ok {
		return x.WorkflowTaskTimedOutEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowTaskFailedEventAttributes() *WorkflowTaskFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowTaskFailedEventAttributes); ok {
		return x.WorkflowTaskFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskScheduledEventAttributes() *ActivityTaskScheduledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskScheduledEventAttributes); ok {
		return x.ActivityTaskScheduledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskStartedEventAttributes() *ActivityTaskStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskStartedEventAttributes); ok {
		return x.ActivityTaskStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskCompletedEventAttributes() *ActivityTaskCompletedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskCompletedEventAttributes); ok {
		return x.ActivityTaskCompletedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskFailedEventAttributes() *ActivityTaskFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskFailedEventAttributes); ok {
		return x.ActivityTaskFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskTimedOutEventAttributes() *ActivityTaskTimedOutEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskTimedOutEventAttributes); ok {
		return x.ActivityTaskTimedOutEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetTimerStartedEventAttributes() *TimerStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_TimerStartedEventAttributes); ok {
		return x.TimerStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetTimerFiredEventAttributes() *TimerFiredEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_TimerFiredEventAttributes); ok {
		return x.TimerFiredEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskCancelRequestedEventAttributes() *ActivityTaskCancelRequestedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskCancelRequestedEventAttributes); ok {
		return x.ActivityTaskCancelRequestedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskCanceledEventAttributes() *ActivityTaskCanceledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskCanceledEventAttributes); ok {
		return x.ActivityTaskCanceledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetTimerCanceledEventAttributes() *TimerCanceledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_TimerCanceledEventAttributes); ok {
		return x.TimerCanceledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetMarkerRecordedEventAttributes() *MarkerRecordedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_MarkerRecordedEventAttributes); ok {
		return x.MarkerRecordedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionSignaledEventAttributes() *WorkflowExecutionSignaledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionSignaledEventAttributes); ok {
		return x.WorkflowExecutionSignaledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionTerminatedEventAttributes() *WorkflowExecutionTerminatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionTerminatedEventAttributes); ok {
		return x.WorkflowExecutionTerminatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionCancelRequestedEventAttributes() *WorkflowExecutionCancelRequestedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes); ok {
		return x.WorkflowExecutionCancelRequestedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionCanceledEventAttributes() *WorkflowExecutionCanceledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionCanceledEventAttributes); ok {
		return x.WorkflowExecutionCanceledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetRequestCancelExternalWorkflowExecutionInitiatedEventAttributes() *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetRequestCancelExternalWorkflowExecutionFailedEventAttributes() *RequestCancelExternalWorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetExternalWorkflowExecutionCancelRequestedEventAttributes() *ExternalWorkflowExecutionCancelRequestedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes); ok {
		return x.ExternalWorkflowExecutionCancelRequestedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionContinuedAsNewEventAttributes() *WorkflowExecutionContinuedAsNewEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes); ok {
		return x.WorkflowExecutionContinuedAsNewEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetStartChildWorkflowExecutionInitiatedEventAttributes() *StartChildWorkflowExecutionInitiatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes); ok {
		return x.StartChildWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetStartChildWorkflowExecutionFailedEventAttributes() *StartChildWorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes); ok {
		return x.StartChildWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionStartedEventAttributes() *ChildWorkflowExecutionStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes); ok {
		return x.ChildWorkflowExecutionStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionCompletedEventAttributes() *ChildWorkflowExecutionCompletedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes); ok {
		return x.ChildWorkflowExecutionCompletedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionFailedEventAttributes() *ChildWorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes); ok {
		return x.ChildWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionCanceledEventAttributes() *ChildWorkflowExecutionCanceledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes); ok {
		return x.ChildWorkflowExecutionCanceledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionTimedOutEventAttributes() *ChildWorkflowExecutionTimedOutEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes); ok {
		return x.ChildWorkflowExecutionTimedOutEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionTerminatedEventAttributes() *ChildWorkflowExecutionTerminatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes); ok {
		return x.ChildWorkflowExecutionTerminatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetSignalExternalWorkflowExecutionInitiatedEventAttributes() *SignalExternalWorkflowExecutionInitiatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes); ok {
		return x.SignalExternalWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetSignalExternalWorkflowExecutionFailedEventAttributes() *SignalExternalWorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes); ok {
		return x.SignalExternalWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetExternalWorkflowExecutionSignaledEventAttributes() *ExternalWorkflowExecutionSignaledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes); ok {
		return x.ExternalWorkflowExecutionSignaledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetUpsertWorkflowSearchAttributesEventAttributes() *UpsertWorkflowSearchAttributesEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes); ok {
		return x.UpsertWorkflowSearchAttributesEventAttributes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HistoryEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HistoryEvent_WorkflowExecutionStartedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCompletedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionTimedOutEventAttributes)(nil),
		(*HistoryEvent_WorkflowTaskScheduledEventAttributes)(nil),
		(*HistoryEvent_WorkflowTaskStartedEventAttributes)(nil),
		(*HistoryEvent_WorkflowTaskCompletedEventAttributes)(nil),
		(*HistoryEvent_WorkflowTaskTimedOutEventAttributes)(nil),
		(*HistoryEvent_WorkflowTaskFailedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskScheduledEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskStartedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCompletedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskFailedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskTimedOutEventAttributes)(nil),
		(*HistoryEvent_TimerStartedEventAttributes)(nil),
		(*HistoryEvent_TimerFiredEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCanceledEventAttributes)(nil),
		(*HistoryEvent_TimerCanceledEventAttributes)(nil),
		(*HistoryEvent_MarkerRecordedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionSignaledEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionTerminatedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCanceledEventAttributes)(nil),
		(*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes)(nil),
		(*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes)(nil),
		(*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes)(nil),
		(*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes)(nil),
	}
}

type History struct {
	Events []*HistoryEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *History) Reset()      { *m = History{} }
func (*History) ProtoMessage() {}
func (*History) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c66159704ad8ab0, []int{41}
}
func (m *History) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *History) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_History.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *History) XXX_Merge(src proto.Message) {
	xxx_messageInfo_History.Merge(m, src)
}
func (m *History) XXX_Size() int {
	return m.Size()
}
func (m *History) XXX_DiscardUnknown() {
	xxx_messageInfo_History.DiscardUnknown(m)
}

var xxx_messageInfo_History proto.InternalMessageInfo

func (m *History) GetEvents() []*HistoryEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkflowExecutionStartedEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionStartedEventAttributes")
	proto.RegisterType((*WorkflowExecutionCompletedEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionCompletedEventAttributes")
	proto.RegisterType((*WorkflowExecutionFailedEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*WorkflowExecutionTimedOutEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionTimedOutEventAttributes")
	proto.RegisterType((*WorkflowExecutionContinuedAsNewEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionContinuedAsNewEventAttributes")
	proto.RegisterType((*WorkflowTaskScheduledEventAttributes)(nil), "temporal.api.history.v1.WorkflowTaskScheduledEventAttributes")
	proto.RegisterType((*WorkflowTaskStartedEventAttributes)(nil), "temporal.api.history.v1.WorkflowTaskStartedEventAttributes")
	proto.RegisterType((*WorkflowTaskCompletedEventAttributes)(nil), "temporal.api.history.v1.WorkflowTaskCompletedEventAttributes")
	proto.RegisterType((*WorkflowTaskTimedOutEventAttributes)(nil), "temporal.api.history.v1.WorkflowTaskTimedOutEventAttributes")
	proto.RegisterType((*WorkflowTaskFailedEventAttributes)(nil), "temporal.api.history.v1.WorkflowTaskFailedEventAttributes")
	proto.RegisterType((*ActivityTaskScheduledEventAttributes)(nil), "temporal.api.history.v1.ActivityTaskScheduledEventAttributes")
	proto.RegisterType((*ActivityTaskStartedEventAttributes)(nil), "temporal.api.history.v1.ActivityTaskStartedEventAttributes")
	proto.RegisterType((*ActivityTaskCompletedEventAttributes)(nil), "temporal.api.history.v1.ActivityTaskCompletedEventAttributes")
	proto.RegisterType((*ActivityTaskFailedEventAttributes)(nil), "temporal.api.history.v1.ActivityTaskFailedEventAttributes")
	proto.RegisterType((*ActivityTaskTimedOutEventAttributes)(nil), "temporal.api.history.v1.ActivityTaskTimedOutEventAttributes")
	proto.RegisterType((*ActivityTaskCancelRequestedEventAttributes)(nil), "temporal.api.history.v1.ActivityTaskCancelRequestedEventAttributes")
	proto.RegisterType((*ActivityTaskCanceledEventAttributes)(nil), "temporal.api.history.v1.ActivityTaskCanceledEventAttributes")
	proto.RegisterType((*TimerStartedEventAttributes)(nil), "temporal.api.history.v1.TimerStartedEventAttributes")
	proto.RegisterType((*TimerFiredEventAttributes)(nil), "temporal.api.history.v1.TimerFiredEventAttributes")
	proto.RegisterType((*TimerCanceledEventAttributes)(nil), "temporal.api.history.v1.TimerCanceledEventAttributes")
	proto.RegisterType((*WorkflowExecutionCancelRequestedEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionCancelRequestedEventAttributes")
	proto.RegisterType((*WorkflowExecutionCanceledEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionCanceledEventAttributes")
	proto.RegisterType((*MarkerRecordedEventAttributes)(nil), "temporal.api.history.v1.MarkerRecordedEventAttributes")
	proto.RegisterMapType((map[string]*v1.Payloads)(nil), "temporal.api.history.v1.MarkerRecordedEventAttributes.DetailsEntry")
	proto.RegisterType((*WorkflowExecutionSignaledEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionSignaledEventAttributes")
	proto.RegisterType((*WorkflowExecutionTerminatedEventAttributes)(nil), "temporal.api.history.v1.WorkflowExecutionTerminatedEventAttributes")
	proto.RegisterType((*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)(nil), "temporal.api.history.v1.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes")
	proto.RegisterType((*RequestCancelExternalWorkflowExecutionFailedEventAttributes)(nil), "temporal.api.history.v1.RequestCancelExternalWorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*ExternalWorkflowExecutionCancelRequestedEventAttributes)(nil), "temporal.api.history.v1.ExternalWorkflowExecutionCancelRequestedEventAttributes")
	proto.RegisterType((*SignalExternalWorkflowExecutionInitiatedEventAttributes)(nil), "temporal.api.history.v1.SignalExternalWorkflowExecutionInitiatedEventAttributes")
	proto.RegisterType((*SignalExternalWorkflowExecutionFailedEventAttributes)(nil), "temporal.api.history.v1.SignalExternalWorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*ExternalWorkflowExecutionSignaledEventAttributes)(nil), "temporal.api.history.v1.ExternalWorkflowExecutionSignaledEventAttributes")
	proto.RegisterType((*UpsertWorkflowSearchAttributesEventAttributes)(nil), "temporal.api.history.v1.UpsertWorkflowSearchAttributesEventAttributes")
	proto.RegisterType((*StartChildWorkflowExecutionInitiatedEventAttributes)(nil), "temporal.api.history.v1.StartChildWorkflowExecutionInitiatedEventAttributes")
	proto.RegisterType((*StartChildWorkflowExecutionFailedEventAttributes)(nil), "temporal.api.history.v1.StartChildWorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionStartedEventAttributes)(nil), "temporal.api.history.v1.ChildWorkflowExecutionStartedEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionCompletedEventAttributes)(nil), "temporal.api.history.v1.ChildWorkflowExecutionCompletedEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionFailedEventAttributes)(nil), "temporal.api.history.v1.ChildWorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionCanceledEventAttributes)(nil), "temporal.api.history.v1.ChildWorkflowExecutionCanceledEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionTimedOutEventAttributes)(nil), "temporal.api.history.v1.ChildWorkflowExecutionTimedOutEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionTerminatedEventAttributes)(nil), "temporal.api.history.v1.ChildWorkflowExecutionTerminatedEventAttributes")
	proto.RegisterType((*HistoryEvent)(nil), "temporal.api.history.v1.HistoryEvent")
	proto.RegisterType((*History)(nil), "temporal.api.history.v1.History")
}

func init() {
	proto.RegisterFile("temporal/api/history/v1/message.proto", fileDescriptor_1c66159704ad8ab0)
}

var fileDescriptor_1c66159704ad8ab0 = []byte{
	// 3860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x5b, 0x6c, 0x1b, 0xd7,
	0x99, 0xe6, 0x21, 0xa9, 0xdb, 0x2f, 0x59, 0x96, 0xc6, 0xb6, 0x4c, 0xc9, 0x36, 0x2d, 0x8f, 0x6f,
	0xb2, 0x2d, 0x53, 0xbe, 0xc5, 0x4e, 0xe4, 0x75, 0xb2, 0x92, 0x2c, 0x2f, 0x85, 0x8d, 0x13, 0x67,
	0xac, 0xd8, 0x41, 0xb0, 0x59, 0xee, 0x88, 0x3c, 0x92, 0x06, 0x22, 0x39, 0xcc, 0xcc, 0x50, 0x8c,
	0xb0, 0xc0, 0x62, 0xf7, 0x61, 0xf3, 0x96, 0x20, 0x59, 0x24, 0xc8, 0x3e, 0x34, 0x6d, 0xd3, 0x16,
	0x45, 0x1b, 0xa0, 0x41, 0x81, 0x16, 0x2d, 0x02, 0xb4, 0x7d, 0x69, 0xd1, 0xa6, 0x45, 0x51, 0xa4,
	0x45, 0x80, 0x04, 0x28, 0xd0, 0x34, 0xce, 0x4b, 0x50, 0xf4, 0x21, 0xe8, 0x7b, 0x81, 0xe2, 0x9c,
	0x33, 0x33, 0x9c, 0xdb, 0x99, 0x0b, 0x29, 0xc1, 0x29, 0xea, 0x37, 0xce, 0xcc, 0x39, 0x67, 0xbe,
	0xff, 0x3f, 0xff, 0xf5, 0xfc, 0xff, 0x10, 0x8e, 0x1b, 0xb8, 0xd6, 0x50, 0x35, 0xb9, 0x3a, 0x23,
	0x37, 0x94, 0x99, 0x75, 0x45, 0x37, 0x54, 0x6d, 0x6b, 0x66, 0xf3, 0xfc, 0x4c, 0x0d, 0xeb, 0xba,
	0xbc, 0x86, 0x0b, 0x0d, 0x4d, 0x35, 0x54, 0x61, 0xbf, 0x35, 0xac, 0x20, 0x37, 0x94, 0x82, 0x39,
	0xac, 0xb0, 0x79, 0x7e, 0x22, 0xbf, 0xa6, 0xaa, 0x6b, 0x55, 0x3c, 0x43, 0x87, 0xad, 0x34, 0x57,
	0x67, 0x2a, 0x4d, 0x4d, 0x36, 0x14, 0xb5, 0xce, 0x26, 0x4e, 0x1c, 0xf6, 0x3e, 0x37, 0x94, 0x1a,
	0xd6, 0x0d, 0xb9, 0xd6, 0x30, 0x07, 0x9c, 0x5d, 0x53, 0x8c, 0xf5, 0xe6, 0x4a, 0xa1, 0xac, 0xd6,
	0x66, 0xd6, 0xd4, 0x35, 0xb5, 0x3d, 0x92, 0x5c, 0xd1, 0x0b, 0xfa, 0xcb, 0x1c, 0x7e, 0xc2, 0x85,
	0x17, 0xd7, 0x9b, 0x35, 0x9d, 0xa0, 0xc5, 0x9b, 0xb8, 0x6e, 0x94, 0x8c, 0xad, 0x86, 0x09, 0x78,
	0x62, 0x2a, 0x78, 0xdc, 0xaa, 0xac, 0x54, 0x71, 0xa5, 0x54, 0x96, 0x9b, 0xba, 0x35, 0xf2, 0x58,
	0xf0, 0xc8, 0x96, 0xaa, 0x6d, 0xac, 0x56, 0xd5, 0x56, 0xe0, 0xa8, 0xb2, 0x5a, 0xab, 0xa9, 0x75,
	0x1f, 0x9b, 0x26, 0xdc, 0xdc, 0x24, 0x2f, 0x6b, 0x6a, 0xd8, 0x3f, 0xcc, 0x4d, 0x84, 0xf5, 0x26,
	0xff, 0xb8, 0x93, 0xae, 0x71, 0x86, 0xac, 0x6f, 0x3c, 0xdf, 0xc4, 0x4d, 0xff, 0x82, 0xe2, 0x8b,
	0xc3, 0x70, 0xf2, 0xae, 0xb9, 0xcc, 0xe2, 0x0b, 0xb8, 0xdc, 0x24, 0x3b, 0x70, 0xdb, 0x90, 0x35,
	0x03, 0x57, 0x16, 0x09, 0x6b, 0xe6, 0x0c, 0x43, 0x53, 0x56, 0x9a, 0x06, 0xd6, 0x85, 0x25, 0xd8,
	0x65, 0xbd, 0x91, 0x32, 0x2c, 0x87, 0x26, 0xd1, 0xd4, 0xe0, 0x85, 0x63, 0x05, 0xd7, 0x16, 0x33,
	0x0a, 0x0b, 0x9b, 0xe7, 0x0b, 0xd6, 0xba, 0xcb, 0x5b, 0x0d, 0x2c, 0x0d, 0xb5, 0x1c, 0x57, 0xc2,
	0x2c, 0x8c, 0x37, 0x64, 0x8d, 0x70, 0xde, 0x5e, 0xb1, 0x2e, 0xd7, 0xb0, 0xde, 0x90, 0xcb, 0x38,
	0x97, 0x9e, 0x44, 0x53, 0x03, 0xd2, 0x7e, 0x36, 0xc0, 0x5a, 0xe4, 0x09, 0xeb, 0xb1, 0x80, 0xfd,
	0x73, 0xb1, 0x85, 0x3c, 0x97, 0xa1, 0x90, 0x4e, 0x45, 0x41, 0xb2, 0x49, 0xf5, 0xbe, 0xc6, 0x7e,
	0x20, 0x3c, 0x62, 0xbf, 0x46, 0xa9, 0x2b, 0x86, 0x22, 0x1b, 0xb8, 0x52, 0x62, 0xc2, 0xa2, 0x54,
	0x72, 0xd9, 0x49, 0x34, 0x95, 0x91, 0xc6, 0xd8, 0x80, 0x25, 0xeb, 0x39, 0x65, 0xd8, 0x52, 0x45,
	0x58, 0x00, 0x20, 0x2c, 0x2f, 0x51, 0x9e, 0xe7, 0x7a, 0x82, 0xb8, 0x64, 0x6f, 0x09, 0x41, 0xb5,
	0x2c, 0xeb, 0x1b, 0x4f, 0x91, 0x0b, 0x69, 0xc0, 0xb0, 0x7e, 0x0a, 0x97, 0xa1, 0x47, 0xa9, 0x37,
	0x9a, 0x46, 0xae, 0x97, 0xce, 0x9f, 0xe4, 0x91, 0x74, 0x4b, 0xde, 0xaa, 0xaa, 0x72, 0x45, 0x97,
	0xd8, 0x70, 0xe1, 0x39, 0x98, 0xf0, 0xf3, 0xa5, 0x44, 0x94, 0x47, 0x6d, 0x1a, 0xb9, 0x3e, 0xba,
	0xd8, 0x78, 0x81, 0x29, 0x57, 0xc1, 0x52, 0x99, 0xc2, 0x75, 0x53, 0xf9, 0xe6, 0xb3, 0xff, 0xff,
	0xf1, 0x61, 0x24, 0xe5, 0x5a, 0x5e, 0x7e, 0x2c, 0xb3, 0x05, 0x84, 0xa7, 0x60, 0xaf, 0xbd, 0xbc,
	0xd6, 0x6c, 0x2f, 0xdc, 0x1f, 0x6f, 0x61, 0xc1, 0x9a, 0x2c, 0x35, 0xed, 0x25, 0x6f, 0xc3, 0xbe,
	0xb6, 0x5c, 0x11, 0xbe, 0x59, 0x6b, 0x0e, 0xc4, 0x5b, 0x73, 0x8f, 0x2d, 0x5a, 0xb2, 0xbe, 0x61,
	0x2d, 0x7a, 0x15, 0x26, 0xca, 0x6a, 0xdd, 0x50, 0xea, 0x4d, 0xb2, 0x6f, 0x36, 0x1f, 0x08, 0x64,
	0xa5, 0x92, 0x03, 0x26, 0x62, 0xf6, 0x88, 0xb6, 0x3c, 0x34, 0xeb, 0x4b, 0x15, 0xe1, 0x5f, 0x61,
	0xc0, 0xdc, 0x74, 0x55, 0xcb, 0x0d, 0x4e, 0xa2, 0xa9, 0xe1, 0x0b, 0x67, 0xdd, 0xfc, 0xa7, 0xda,
	0x4e, 0xd8, 0xbf, 0x60, 0x2e, 0x31, 0xa7, 0x3f, 0x81, 0x5b, 0x4b, 0xd6, 0x24, 0xa9, 0x3d, 0x5f,
	0xb8, 0x09, 0xa3, 0x6d, 0x24, 0xa6, 0x66, 0xe7, 0x86, 0x82, 0x36, 0xd5, 0x7c, 0x48, 0x96, 0xbd,
	0xc1, 0x7e, 0x4a, 0x23, 0xf6, 0x54, 0xf3, 0x8e, 0x70, 0x07, 0xc6, 0xaa, 0xb2, 0x6e, 0x94, 0xca,
	0x6a, 0xad, 0x51, 0xc5, 0x8c, 0x28, 0xac, 0x37, 0xab, 0x46, 0x6e, 0x57, 0x4c, 0x41, 0xd9, 0x4b,
	0xe6, 0x2f, 0xd8, 0xd3, 0x25, 0x3a, 0x9b, 0xc8, 0xbb, 0xaa, 0x29, 0x6b, 0x4a, 0x5d, 0xae, 0xfa,
	0xf9, 0x35, 0x4c, 0xf9, 0x35, 0x66, 0x0d, 0xf0, 0xb0, 0x6b, 0x02, 0xfa, 0x95, 0x0a, 0xae, 0x1b,
	0x8a, 0xb1, 0x95, 0xdb, 0x4d, 0x47, 0xda, 0xd7, 0xc2, 0x45, 0x18, 0x5b, 0x55, 0x34, 0xdd, 0xf0,
	0xaf, 0x39, 0x42, 0x47, 0xee, 0xa1, 0x4f, 0x3d, 0x0b, 0xde, 0x80, 0x21, 0x0d, 0x1b, 0xda, 0x56,
	0xa9, 0xa1, 0x56, 0x95, 0xf2, 0x56, 0x6e, 0x94, 0x52, 0x76, 0x94, 0x47, 0x99, 0x44, 0xc6, 0xde,
	0xa2, 0x43, 0xa5, 0x41, 0xad, 0x7d, 0x21, 0xe4, 0xa0, 0x4f, 0x36, 0xc8, 0x24, 0x23, 0x27, 0x4c,
	0xa2, 0xa9, 0x1e, 0xc9, 0xba, 0x14, 0x6a, 0x20, 0x06, 0x68, 0x09, 0x7e, 0xa1, 0xa1, 0x30, 0xd1,
	0xa2, 0x32, 0x98, 0xdb, 0x43, 0xdf, 0x3b, 0xe1, 0x13, 0xc0, 0x65, 0xcb, 0x15, 0xcd, 0x67, 0x5f,
	0x21, 0x12, 0x78, 0xd8, 0xa7, 0x2e, 0x8b, 0xf6, 0x4a, 0x64, 0xac, 0x70, 0x14, 0x76, 0x95, 0x35,
	0xb5, 0x5e, 0xd2, 0xcb, 0xeb, 0xb8, 0xd2, 0xac, 0xe2, 0xdc, 0x5e, 0x4a, 0xfc, 0x10, 0xb9, 0x79,
	0xdb, 0xbc, 0x27, 0xfc, 0x3b, 0x1c, 0x60, 0xac, 0x72, 0x6b, 0xc3, 0x8a, 0x5c, 0xde, 0x50, 0x57,
	0x57, 0x73, 0xfb, 0x62, 0xaa, 0x2e, 0x5d, 0xe3, 0xae, 0x43, 0x25, 0xe6, 0xd9, 0x02, 0xc2, 0x39,
	0xc8, 0xd6, 0x70, 0x4d, 0xcd, 0x8d, 0xd1, 0x85, 0x0e, 0xf2, 0xb8, 0x79, 0x13, 0xd7, 0x54, 0x89,
	0x8e, 0x14, 0x9e, 0x86, 0x51, 0x1d, 0xcb, 0x5a, 0x79, 0xbd, 0x24, 0xdb, 0x6e, 0x20, 0xb7, 0x9f,
	0x4e, 0x9f, 0xe2, 0x4d, 0xbf, 0x4d, 0x27, 0xb4, 0xdd, 0x86, 0x34, 0xa2, 0x7b, 0xee, 0x08, 0xcf,
	0xc2, 0x58, 0x43, 0xc3, 0x9b, 0x25, 0xb9, 0x69, 0xa8, 0x44, 0x78, 0xb1, 0x51, 0x6a, 0xa8, 0x4a,
	0xdd, 0xd0, 0x73, 0x39, 0xba, 0xf6, 0x71, 0xf7, 0xda, 0xb6, 0x43, 0xa5, 0x5b, 0xad, 0x63, 0xe3,
	0x16, 0x1d, 0x2c, 0xed, 0x21, 0x8b, 0xcc, 0x35, 0x0d, 0xd5, 0x71, 0x53, 0xb8, 0x0c, 0xbd, 0xeb,
	0x58, 0xae, 0x60, 0x2d, 0x37, 0x4e, 0xd7, 0xca, 0xf3, 0x70, 0x16, 0xe9, 0x28, 0xc9, 0x1c, 0x2d,
	0xfe, 0x01, 0xc1, 0x29, 0x9f, 0x13, 0x30, 0x95, 0xc4, 0xef, 0x0a, 0x1f, 0x86, 0x5e, 0x53, 0xe9,
	0x50, 0x4c, 0xa5, 0x33, 0xc7, 0x0b, 0x37, 0x60, 0xd2, 0xbd, 0xbd, 0x65, 0xeb, 0x1d, 0x6d, 0xef,
	0x92, 0xa6, 0xde, 0xe5, 0xa0, 0xd3, 0xac, 0xb9, 0x91, 0x2c, 0x55, 0x84, 0x19, 0xd8, 0x5b, 0xc7,
	0x2d, 0xbf, 0x56, 0x65, 0xa8, 0x60, 0x8d, 0xd6, 0x71, 0xcb, 0xad, 0x53, 0xe2, 0x5b, 0x69, 0x38,
	0xe1, 0x23, 0xf0, 0x06, 0x8d, 0x6a, 0xbc, 0xd4, 0xcd, 0x42, 0x9f, 0x65, 0xa7, 0x50, 0x4c, 0x3b,
	0x65, 0x4d, 0x10, 0xe6, 0x81, 0x69, 0x60, 0x49, 0x37, 0x64, 0x83, 0xf9, 0xf2, 0xe1, 0x0b, 0x47,
	0x38, 0xc6, 0x93, 0x2a, 0xee, 0x6d, 0x32, 0x50, 0x02, 0xcd, 0xfe, 0x1d, 0x8b, 0x47, 0x99, 0x2e,
	0x78, 0x94, 0xe5, 0xf1, 0xe8, 0x2b, 0x08, 0xa6, 0xee, 0x06, 0x79, 0xbe, 0xca, 0x93, 0x4d, 0xc3,
	0xcb, 0x25, 0x0f, 0xa5, 0xa8, 0x13, 0x4a, 0x79, 0x08, 0xd3, 0x3c, 0x84, 0xff, 0xd7, 0x0f, 0x85,
	0x00, 0x31, 0x35, 0x7d, 0x04, 0x75, 0x42, 0x5e, 0x9c, 0xbc, 0x77, 0x20, 0xce, 0x3b, 0xfc, 0x71,
	0x5e, 0xba, 0xe3, 0x38, 0xcf, 0x1d, 0x09, 0x65, 0xba, 0x8c, 0x84, 0xb2, 0xc9, 0x22, 0x21, 0x5e,
	0xa8, 0xd2, 0xb3, 0x03, 0xa1, 0x4a, 0x6f, 0x17, 0xa1, 0x4a, 0x1c, 0x71, 0xef, 0x8b, 0x21, 0xee,
	0x4f, 0xc3, 0x98, 0xe9, 0x2b, 0x88, 0x48, 0x6a, 0x24, 0x70, 0x35, 0xb0, 0xb6, 0x29, 0x57, 0xe3,
	0x06, 0x67, 0x7b, 0xcd, 0xe9, 0x34, 0xfe, 0x5f, 0x32, 0x27, 0xbb, 0x83, 0xa1, 0x81, 0x2e, 0x83,
	0x21, 0x87, 0x69, 0x81, 0xa4, 0xa6, 0x85, 0x1f, 0xf9, 0x0c, 0x76, 0x15, 0xf9, 0xb4, 0x5d, 0xc6,
	0x50, 0x12, 0x97, 0x61, 0xfb, 0xd3, 0x5d, 0xdd, 0xf9, 0xd3, 0xe1, 0x6e, 0xfd, 0xa9, 0xf8, 0x7b,
	0x04, 0xc7, 0x9c, 0x0e, 0xdf, 0x8a, 0x28, 0x7c, 0x86, 0xdd, 0xad, 0x8e, 0xa8, 0x33, 0x75, 0x5c,
	0x86, 0x31, 0x26, 0x5e, 0x86, 0x5a, 0x2a, 0x57, 0x55, 0x1d, 0xdb, 0x4a, 0x90, 0x8e, 0xa9, 0x04,
	0x74, 0xfa, 0xb2, 0xba, 0x40, 0x26, 0x5b, 0x4a, 0xe0, 0x08, 0xd5, 0x32, 0xae, 0x50, 0x4d, 0x7c,
	0x09, 0x81, 0xe8, 0xa2, 0x2e, 0x38, 0x3b, 0x9d, 0x06, 0xc1, 0x8a, 0xae, 0x1c, 0x7a, 0x83, 0xa8,
	0xde, 0x8c, 0xe8, 0x2e, 0x8e, 0x78, 0x42, 0xd6, 0xb4, 0x27, 0x64, 0x3d, 0x04, 0xa0, 0xe1, 0xe7,
	0x9b, 0x58, 0x37, 0xda, 0x0e, 0x75, 0xc0, 0xbc, 0xb3, 0x54, 0x11, 0x7f, 0xea, 0xe1, 0x36, 0x37,
	0x48, 0x48, 0x86, 0x68, 0x0a, 0x46, 0x74, 0x46, 0x99, 0x37, 0x10, 0x18, 0xd6, 0x1d, 0x14, 0x7b,
	0xb0, 0x67, 0x3c, 0xd8, 0x4f, 0xc2, 0xee, 0x15, 0xa5, 0x2e, 0x6b, 0x5b, 0xa5, 0xf2, 0x3a, 0x2e,
	0x6f, 0xe8, 0xcd, 0x9a, 0xe9, 0xed, 0x86, 0xd9, 0xed, 0x05, 0xf3, 0xae, 0xf8, 0x33, 0x04, 0x47,
	0xef, 0x7a, 0x8c, 0x51, 0x90, 0x97, 0xdb, 0x29, 0x22, 0x16, 0x61, 0xc8, 0x14, 0x1b, 0xe6, 0x63,
	0x32, 0xd4, 0xb0, 0x88, 0x1c, 0xc3, 0x62, 0x4a, 0x09, 0xf5, 0x30, 0x83, 0x46, 0xfb, 0x42, 0x7c,
	0x27, 0x03, 0x47, 0x9c, 0x64, 0x04, 0x07, 0x34, 0x3b, 0x45, 0xc4, 0x75, 0xe8, 0xa1, 0x07, 0x42,
	0x26, 0xfa, 0x02, 0x07, 0xbd, 0x1f, 0xe0, 0x02, 0x99, 0x25, 0xb1, 0xc9, 0x4e, 0x9b, 0x98, 0x4d,
	0x6a, 0x13, 0x9d, 0xb2, 0xd0, 0xe3, 0x91, 0x85, 0x3c, 0x0c, 0xae, 0xc8, 0x3a, 0xb6, 0xfc, 0x7d,
	0x2f, 0x13, 0x64, 0x72, 0x8b, 0xf9, 0xf9, 0x83, 0x00, 0x24, 0x30, 0x30, 0x1f, 0xf7, 0xb1, 0xd9,
	0x75, 0xdc, 0x62, 0x4f, 0xa7, 0x41, 0x58, 0x55, 0xb5, 0x0d, 0x93, 0x05, 0x9b, 0x58, 0xd3, 0x15,
	0xb5, 0x4e, 0x3d, 0x49, 0x46, 0x1a, 0x21, 0x4f, 0x28, 0x13, 0xee, 0xb0, 0xfb, 0x41, 0x72, 0x37,
	0x10, 0x28, 0x77, 0xbf, 0xed, 0x85, 0x63, 0x73, 0x65, 0x43, 0xd9, 0x54, 0x8c, 0xad, 0x50, 0x5b,
	0x75, 0x18, 0x06, 0x65, 0x73, 0x5c, 0x3b, 0x5a, 0x01, 0xeb, 0x16, 0x0b, 0x53, 0xec, 0x01, 0x71,
	0xc2, 0x14, 0xfb, 0xad, 0x34, 0x4c, 0x91, 0x1d, 0x57, 0xc2, 0x41, 0x18, 0x68, 0x1f, 0x3f, 0x99,
	0x0a, 0x6f, 0xdf, 0xf0, 0x58, 0xcd, 0x6c, 0xa7, 0x41, 0x8c, 0xe5, 0x64, 0x7a, 0x12, 0x39, 0x99,
	0x4e, 0x8f, 0x81, 0x9e, 0x85, 0x71, 0x4b, 0xb0, 0xfd, 0x86, 0x3a, 0xe6, 0x29, 0xd0, 0x98, 0xb5,
	0x82, 0xc7, 0x56, 0x7b, 0xd6, 0x36, 0xbd, 0x41, 0xb2, 0x83, 0x20, 0xc7, 0xda, 0xd4, 0xa0, 0x5b,
	0x6b, 0xf3, 0xbd, 0xcb, 0x40, 0x17, 0xde, 0xe5, 0x71, 0x18, 0x5d, 0xc7, 0xb2, 0x66, 0xac, 0x60,
	0xb9, 0x8d, 0x14, 0xe2, 0x2d, 0x38, 0x62, 0xcf, 0x4c, 0x12, 0xb0, 0x0d, 0xc6, 0x08, 0xd8, 0xbc,
	0xc7, 0x1c, 0x43, 0x9d, 0x1d, 0x73, 0x88, 0x7f, 0x46, 0x20, 0xba, 0x74, 0xea, 0xfe, 0x7a, 0x48,
	0xa7, 0x2f, 0xcf, 0xba, 0x8f, 0x5d, 0x16, 0x60, 0x88, 0x86, 0x70, 0x96, 0xbd, 0xeb, 0x89, 0x69,
	0xef, 0x06, 0xc9, 0x2c, 0xf3, 0x42, 0xfc, 0x00, 0xb9, 0x4d, 0xc8, 0x0e, 0x64, 0xe9, 0xc1, 0xac,
	0x4a, 0x27, 0x70, 0x18, 0x99, 0x48, 0xd7, 0x9d, 0x75, 0x33, 0x55, 0x7c, 0x23, 0x0d, 0x47, 0x9c,
	0x64, 0x6d, 0x7f, 0x6e, 0x7e, 0x1f, 0xa8, 0xf2, 0x66, 0xc9, 0x3d, 0x1d, 0x64, 0xc9, 0xe2, 0x5f,
	0x11, 0x1c, 0x75, 0x72, 0x86, 0x17, 0xab, 0x7c, 0x11, 0x79, 0xe3, 0xa1, 0x3f, 0xdb, 0x09, 0xfd,
	0x5f, 0x43, 0x70, 0xda, 0x25, 0xf0, 0x72, 0xbd, 0x8c, 0xab, 0x12, 0xd3, 0xb7, 0x6e, 0xf5, 0x7c,
	0x9b, 0x0e, 0xa4, 0xc4, 0x37, 0xd3, 0xee, 0x4d, 0x62, 0x20, 0x03, 0x05, 0xb8, 0x82, 0x0d, 0x59,
	0xa9, 0xea, 0xb1, 0xb5, 0xd2, 0x9a, 0x40, 0xb0, 0x56, 0x65, 0x83, 0x98, 0x9d, 0x32, 0x5d, 0xbd,
	0xa4, 0x59, 0x3c, 0xf0, 0x61, 0x65, 0xe3, 0x82, 0x38, 0xc5, 0x62, 0x9b, 0x00, 0x0e, 0x65, 0x12,
	0x6c, 0x76, 0x36, 0x52, 0x11, 0x3c, 0xd1, 0x18, 0xb1, 0x5a, 0x07, 0x88, 0xe0, 0x6a, 0x1c, 0xeb,
	0x3c, 0x0e, 0xfd, 0xc4, 0x31, 0x69, 0xed, 0x60, 0xa7, 0x8f, 0x5e, 0x2f, 0x55, 0x04, 0x09, 0xf6,
	0xd9, 0x3e, 0x71, 0x55, 0xd1, 0x12, 0x27, 0x5c, 0x82, 0xe9, 0x12, 0x6f, 0x28, 0x1a, 0x4e, 0xe2,
	0xc3, 0x62, 0x9c, 0xb1, 0x89, 0xff, 0x01, 0xe3, 0x94, 0x2a, 0xb2, 0x76, 0x12, 0x9a, 0x62, 0x07,
	0xd9, 0xe2, 0x2f, 0x10, 0x1c, 0xa4, 0xaf, 0xe0, 0x49, 0xd4, 0x76, 0xbc, 0x65, 0xdb, 0xce, 0x1c,
	0xc3, 0x2c, 0xfc, 0x4b, 0x69, 0x98, 0xf1, 0x1f, 0xde, 0x85, 0x2b, 0xf3, 0x5e, 0x2b, 0xc5, 0x60,
	0x94, 0x99, 0x29, 0xc3, 0x35, 0x38, 0x80, 0x5f, 0x30, 0xb0, 0x56, 0x97, 0xab, 0x41, 0xe5, 0x49,
	0x46, 0x62, 0xce, 0x1a, 0xe2, 0x2b, 0x50, 0x2a, 0x8e, 0xe9, 0xdb, 0x51, 0x44, 0x1d, 0xb7, 0x56,
	0xf3, 0x97, 0x51, 0xc3, 0xf8, 0xf1, 0x4e, 0xd0, 0x71, 0x2b, 0x6f, 0x97, 0xe3, 0x6c, 0x10, 0x8a,
	0xb1, 0x41, 0x0e, 0xfb, 0x93, 0x4e, 0x68, 0x7f, 0xc4, 0x77, 0x33, 0x70, 0xe8, 0xa6, 0xac, 0x6d,
	0x60, 0x4d, 0xc2, 0x65, 0x55, 0xab, 0x04, 0x66, 0x2d, 0x35, 0x3a, 0x80, 0xd6, 0xb3, 0xad, 0xac,
	0x85, 0xdd, 0x7a, 0x42, 0xae, 0x61, 0xe1, 0x39, 0xe7, 0xeb, 0x33, 0x53, 0x83, 0x17, 0x16, 0x0a,
	0x9c, 0x0e, 0x89, 0x42, 0xe8, 0x9b, 0x0a, 0xd7, 0xd9, 0x2a, 0x8b, 0x75, 0x43, 0xdb, 0x72, 0x59,
	0xc8, 0x6d, 0x11, 0xe3, 0x76, 0xba, 0x92, 0x4d, 0x94, 0xae, 0x38, 0x5c, 0x70, 0x4f, 0x42, 0x17,
	0x3c, 0xf1, 0x6f, 0x30, 0xe4, 0x24, 0x4a, 0x18, 0x81, 0xcc, 0x06, 0xde, 0x32, 0x79, 0x48, 0x7e,
	0x92, 0x64, 0x68, 0x53, 0xae, 0x36, 0x71, 0xec, 0x9d, 0x63, 0xc3, 0x67, 0xd3, 0x0f, 0x23, 0xf1,
	0xc3, 0x20, 0x61, 0xbb, 0xad, 0xac, 0xd5, 0xe5, 0xe0, 0xe4, 0x53, 0xa7, 0x8f, 0x5c, 0xdb, 0xc8,
	0x6e, 0xd1, 0x6d, 0xb4, 0xd3, 0xb2, 0x74, 0xb2, 0xb4, 0x2c, 0xec, 0xec, 0xa6, 0x43, 0x9e, 0x8b,
	0x5f, 0x42, 0x70, 0xda, 0x5f, 0xb5, 0xc0, 0x5a, 0x4d, 0xa9, 0xcb, 0x01, 0x16, 0x65, 0x8c, 0x44,
	0xc5, 0xb2, 0xae, 0xd6, 0x4d, 0xb2, 0xcc, 0xab, 0x6e, 0x14, 0x23, 0x8c, 0x2c, 0xf1, 0x57, 0x69,
	0x78, 0xd4, 0x34, 0x6f, 0x4c, 0xb7, 0x17, 0x79, 0xc6, 0xc2, 0x6d, 0xa7, 0x76, 0x40, 0xf7, 0x5d,
	0x79, 0x7e, 0xda, 0x9b, 0xe7, 0x3f, 0x03, 0xc2, 0x76, 0x18, 0xc3, 0x51, 0x5f, 0x31, 0x98, 0x24,
	0x44, 0x65, 0xb5, 0x6e, 0x68, 0x6a, 0xd5, 0xb4, 0x81, 0xd6, 0xa5, 0x50, 0x80, 0x3d, 0xe5, 0x75,
	0xa5, 0x5a, 0x69, 0x9b, 0x61, 0xb5, 0x5e, 0x65, 0xc1, 0x43, 0xbf, 0x34, 0x4a, 0x1f, 0x59, 0x6f,
	0x78, 0xb2, 0x5e, 0xdd, 0x12, 0xbf, 0x9c, 0x81, 0xab, 0xf1, 0x98, 0x19, 0x9c, 0x3e, 0xdc, 0x75,
	0xba, 0x93, 0xe1, 0x0b, 0x73, 0xbc, 0x83, 0xfc, 0x38, 0x6b, 0xbb, 0x0e, 0xb1, 0xb6, 0xab, 0xae,
	0x19, 0x7e, 0x14, 0x13, 0xbc, 0x45, 0xd9, 0x6d, 0xd8, 0xa2, 0x69, 0x10, 0x02, 0x1c, 0x69, 0x0f,
	0x0b, 0x09, 0x15, 0xaf, 0x03, 0x75, 0x6c, 0x68, 0xaf, 0x6b, 0x43, 0xc5, 0x8f, 0x11, 0x5c, 0xe1,
	0xf2, 0x2d, 0x3a, 0x70, 0x0f, 0xc0, 0x80, 0x38, 0x18, 0xee, 0x93, 0x30, 0x8b, 0x1f, 0x64, 0xe0,
	0x0a, 0xb3, 0x9b, 0xff, 0x78, 0x8a, 0xec, 0xf1, 0x0b, 0x59, 0xbe, 0x5f, 0xe8, 0x49, 0xe6, 0x17,
	0xb8, 0x02, 0xc5, 0xb3, 0x10, 0x7d, 0x1c, 0x0b, 0xe1, 0xf0, 0x22, 0xfd, 0x89, 0xbc, 0xc8, 0x1b,
	0x19, 0xb8, 0x14, 0xb1, 0xad, 0x5d, 0x99, 0x94, 0x58, 0x6b, 0x3f, 0x30, 0x29, 0x01, 0x26, 0xe5,
	0x2f, 0x08, 0xce, 0x71, 0xf9, 0xc6, 0x8b, 0x60, 0xfe, 0x2e, 0x6c, 0x09, 0xdf, 0x31, 0x8a, 0xbf,
	0x41, 0x70, 0xf6, 0xe9, 0x86, 0x8e, 0x35, 0xbb, 0x95, 0xc9, 0x5b, 0x08, 0xdd, 0x29, 0xdb, 0x12,
	0x58, 0xa4, 0x4d, 0x77, 0x5d, 0xa4, 0x7d, 0x6d, 0x00, 0x2e, 0xd2, 0xd4, 0x7f, 0xc1, 0xa9, 0xb2,
	0xd1, 0x26, 0xd3, 0xb5, 0x35, 0xc8, 0xbb, 0x35, 0x87, 0x61, 0xd0, 0x26, 0xda, 0xee, 0x1b, 0x01,
	0xeb, 0x56, 0x50, 0x33, 0x47, 0x66, 0x9b, 0x9a, 0x39, 0xb2, 0x5d, 0x36, 0x73, 0xf4, 0x6c, 0x67,
	0x5b, 0x6b, 0xef, 0x4e, 0xb5, 0xb5, 0xf6, 0xed, 0x40, 0xaf, 0x48, 0x7f, 0x17, 0xbd, 0x22, 0xcf,
	0xc0, 0x1e, 0xb3, 0x2b, 0x99, 0x15, 0x47, 0xcc, 0xca, 0x01, 0x6b, 0xcb, 0x98, 0xe2, 0x98, 0xde,
	0x5b, 0x74, 0x06, 0x2d, 0x88, 0x98, 0xe5, 0x83, 0xd1, 0x86, 0xf7, 0x96, 0x53, 0x15, 0xc1, 0xed,
	0x81, 0xb6, 0xab, 0xdc, 0x81, 0x21, 0xe7, 0x90, 0xd5, 0x92, 0x86, 0x9b, 0x6d, 0x02, 0x86, 0x28,
	0x01, 0xd3, 0x11, 0x05, 0xd4, 0xa5, 0x8a, 0x44, 0x26, 0x99, 0x44, 0xec, 0x6b, 0x05, 0xdd, 0xf6,
	0x55, 0x55, 0x76, 0x75, 0xd8, 0x3c, 0xea, 0xeb, 0xd9, 0x1c, 0x0e, 0xe8, 0xd9, 0x6c, 0x7b, 0xdb,
	0xdd, 0x1d, 0xf5, 0x8e, 0x8c, 0x74, 0xd7, 0x3b, 0x32, 0xda, 0xb5, 0x59, 0x7a, 0x2b, 0x03, 0xe7,
	0x42, 0xcc, 0x52, 0xb0, 0xcb, 0xff, 0xe2, 0xd8, 0xa4, 0xdb, 0x56, 0xf0, 0xc1, 0x0e, 0xd6, 0xaf,
	0xf1, 0x82, 0x8f, 0x28, 0x0a, 0x5d, 0x81, 0x87, 0x43, 0x15, 0x7a, 0xdc, 0xaa, 0x10, 0xec, 0x55,
	0x7b, 0x39, 0x5e, 0x75, 0x9b, 0x1a, 0xbb, 0xc4, 0x0f, 0xd3, 0x30, 0x1d, 0x0c, 0x9e, 0x73, 0x96,
	0x1c, 0xbe, 0x3f, 0xc1, 0x44, 0xa4, 0x39, 0x44, 0xec, 0x9c, 0xf3, 0xf7, 0x89, 0x41, 0xb6, 0x63,
	0x31, 0xe8, 0xb0, 0xba, 0x2e, 0xfe, 0x6f, 0x06, 0x0a, 0xc1, 0x9c, 0xdd, 0x81, 0xa2, 0xe2, 0xfd,
	0x0a, 0xb2, 0xb6, 0x91, 0xcf, 0xc9, 0x42, 0xda, 0xa0, 0xd3, 0xf7, 0xde, 0xc0, 0x33, 0xfe, 0xf7,
	0x32, 0x70, 0x26, 0x89, 0x01, 0xea, 0xa6, 0xd2, 0xf7, 0x60, 0x1b, 0x78, 0xdb, 0xe0, 0x2d, 0x56,
	0xf6, 0x75, 0x52, 0xac, 0x7c, 0x31, 0x03, 0x67, 0x39, 0x2a, 0xb5, 0x03, 0x15, 0xc1, 0x07, 0x9b,
	0xc9, 0xd5, 0xa9, 0x97, 0xb9, 0x1b, 0xc1, 0xab, 0x9f, 0x87, 0xbb, 0x8d, 0x60, 0x66, 0xa6, 0x77,
	0x82, 0x99, 0x99, 0x6d, 0x66, 0x66, 0x36, 0x01, 0x33, 0x7b, 0xe2, 0x68, 0x46, 0x6f, 0x27, 0x9a,
	0xf1, 0xeb, 0x34, 0xcc, 0x70, 0x36, 0x84, 0x7b, 0x58, 0xff, 0x60, 0x4b, 0x78, 0x5b, 0x22, 0xbe,
	0x7a, 0x05, 0x86, 0x8a, 0xac, 0x5a, 0x46, 0x6f, 0x09, 0xe3, 0xd0, 0xef, 0x49, 0xf4, 0xfb, 0xb0,
	0xb9, 0xea, 0x63, 0x00, 0xe6, 0x87, 0xbe, 0x4a, 0xcd, 0xaa, 0x1e, 0x45, 0x7f, 0xd6, 0x35, 0x40,
	0xe7, 0xd0, 0x0f, 0xb8, 0xda, 0x0b, 0xb4, 0x9b, 0x55, 0x27, 0x39, 0xdb, 0x4f, 0xd1, 0x50, 0x46,
	0x98, 0x0b, 0x10, 0x2e, 0xe4, 0xa0, 0xcf, 0xea, 0xa1, 0x64, 0xa4, 0x5b, 0x97, 0xc2, 0x7e, 0xe8,
	0xa3, 0xc1, 0xa1, 0x4d, 0x68, 0x2f, 0xb9, 0x5c, 0xaa, 0x08, 0x5f, 0x45, 0x70, 0x26, 0x20, 0xe7,
	0x75, 0xb3, 0xc7, 0x91, 0x0c, 0xb0, 0x24, 0xf8, 0x9f, 0xb9, 0xf5, 0xc4, 0x98, 0xd1, 0x63, 0x31,
	0x25, 0x9d, 0x6c, 0xc5, 0x0c, 0x34, 0xbf, 0x89, 0xe0, 0x6c, 0x00, 0x44, 0x6f, 0x9c, 0xeb, 0x00,
	0xc9, 0x12, 0xea, 0xf9, 0xf8, 0x20, 0x79, 0x81, 0x58, 0x31, 0x25, 0x9d, 0x6a, 0xc5, 0x8e, 0xda,
	0xde, 0x44, 0x70, 0x3a, 0x00, 0xa8, 0xf9, 0x55, 0xb7, 0x0f, 0x25, 0x4b, 0xd1, 0x1f, 0x8b, 0x8f,
	0x32, 0x30, 0x4c, 0x29, 0xa6, 0xa4, 0x13, 0xad, 0x78, 0x01, 0xcd, 0x37, 0x82, 0x19, 0x49, 0xc4,
	0xb5, 0x52, 0x52, 0x9b, 0x86, 0x1f, 0x22, 0x6b, 0x87, 0x9c, 0x8b, 0x0f, 0x91, 0x63, 0xf5, 0x8b,
	0x29, 0x69, 0xaa, 0x15, 0xd7, 0x43, 0xbc, 0x81, 0x60, 0xca, 0x9d, 0xd2, 0x78, 0xfb, 0x68, 0x1c,
	0x08, 0x59, 0x7f, 0xe5, 0xb5, 0x48, 0x84, 0x61, 0x6d, 0xc0, 0xc5, 0x94, 0x74, 0xac, 0x15, 0xe7,
	0xd3, 0x86, 0x57, 0x11, 0x9c, 0xf0, 0x20, 0xe3, 0xe9, 0x09, 0xfb, 0x5a, 0xe4, 0x6a, 0x3c, 0x5c,
	0x3c, 0x15, 0x11, 0x5b, 0xd1, 0x9f, 0x24, 0xf8, 0xb9, 0x15, 0xa2, 0x18, 0x43, 0x09, 0xb8, 0x15,
	0xa2, 0x13, 0xc7, 0x5a, 0x71, 0x3e, 0x4d, 0x78, 0xdd, 0x87, 0x2c, 0x44, 0xd2, 0xd8, 0x01, 0xca,
	0x3f, 0xc5, 0x42, 0xc6, 0x17, 0xb2, 0xa3, 0xad, 0x18, 0x5f, 0x1b, 0xbc, 0x8c, 0xe0, 0xb8, 0x1b,
	0x17, 0x4f, 0x43, 0xd9, 0x57, 0x33, 0xb3, 0xb1, 0x40, 0xf1, 0x94, 0xf3, 0x48, 0x2b, 0xf2, 0xcb,
	0x01, 0xb2, 0x85, 0xed, 0x2e, 0xf3, 0x08, 0x81, 0xdf, 0x1d, 0xb1, 0x85, 0x71, 0xfa, 0xde, 0xc9,
	0x16, 0xca, 0x71, 0xfa, 0xe3, 0x89, 0xc0, 0x7b, 0x90, 0xf1, 0x04, 0x7e, 0x24, 0x42, 0xe0, 0xa3,
	0x7b, 0x87, 0x89, 0xc0, 0xcb, 0xd1, 0x1d, 0xc6, 0x7e, 0x6e, 0x85, 0x08, 0xfc, 0x68, 0x02, 0x6e,
	0x85, 0x09, 0xbc, 0x1c, 0xa7, 0x15, 0x98, 0x08, 0x96, 0x1b, 0x19, 0x4f, 0xb0, 0x84, 0x08, 0xc1,
	0x8a, 0x6c, 0xd1, 0x25, 0x82, 0x25, 0x47, 0xf6, 0xf1, 0xbe, 0xee, 0x63, 0x55, 0x88, 0x06, 0xee,
	0x89, 0xd0, 0xc0, 0x18, 0xcd, 0xb1, 0x44, 0x03, 0xe5, 0x18, 0x3d, 0xb4, 0xff, 0x09, 0x79, 0xd6,
	0x4c, 0xc7, 0x95, 0xa6, 0xbd, 0x14, 0xcc, 0x25, 0x2e, 0x98, 0x90, 0x26, 0xc7, 0x62, 0x4a, 0x3a,
	0x60, 0x84, 0xf4, 0x40, 0x36, 0xe1, 0x20, 0x7b, 0xf9, 0xaa, 0xa2, 0x05, 0xbd, 0x9a, 0x7d, 0x02,
	0x7f, 0x21, 0xfc, 0xd5, 0x41, 0x9d, 0x88, 0xc5, 0x94, 0x34, 0x6e, 0x70, 0xdb, 0x14, 0xdf, 0x46,
	0x30, 0xe3, 0x11, 0xdb, 0xe0, 0xf6, 0x52, 0x07, 0x14, 0xf6, 0x11, 0xfd, 0x42, 0x3c, 0xe9, 0x0d,
	0x2d, 0xfb, 0x17, 0x53, 0xd2, 0x69, 0x39, 0x7e, 0x77, 0xef, 0x6b, 0x08, 0x4e, 0x06, 0x81, 0x0d,
	0x02, 0xb9, 0x3f, 0x81, 0xdc, 0x70, 0xb2, 0x73, 0xaf, 0xdc, 0xf0, 0x92, 0xf8, 0xff, 0x82, 0xc3,
	0x6c, 0xeb, 0xf8, 0x68, 0xd8, 0xc7, 0xfd, 0x0f, 0x85, 0xef, 0x1e, 0x1f, 0x06, 0x13, 0x0d, 0xde,
	0xfb, 0xff, 0x07, 0xc1, 0xa4, 0xd9, 0x79, 0xa7, 0x99, 0x1d, 0x73, 0x7e, 0x04, 0xec, 0x2f, 0x01,
	0x2e, 0x77, 0xd6, 0x71, 0x57, 0x4c, 0x49, 0x87, 0x6a, 0xa1, 0xcd, 0x7f, 0x5f, 0x47, 0x30, 0x1d,
	0x14, 0xb0, 0x9b, 0x25, 0x5a, 0x3f, 0x9e, 0x89, 0xa4, 0x31, 0x1c, 0xa7, 0xda, 0x1b, 0x18, 0xc3,
	0xf1, 0x2a, 0xc3, 0xdf, 0x46, 0x50, 0x08, 0x0a, 0x35, 0xed, 0x1c, 0xd4, 0x8f, 0xf3, 0x40, 0x84,
	0xb0, 0xc7, 0x4f, 0x68, 0x89, 0xb0, 0xb7, 0xe2, 0xa7, 0xbf, 0xef, 0x22, 0xb8, 0x14, 0x94, 0x5f,
	0x44, 0xaa, 0xe7, 0x41, 0x8a, 0xb8, 0x98, 0x20, 0xcd, 0x88, 0xd2, 0xd1, 0x99, 0x56, 0xc2, 0x6e,
	0x1e, 0x8e, 0x34, 0xf0, 0xf5, 0xe3, 0x50, 0x52, 0x69, 0xe0, 0xeb, 0xca, 0x54, 0x2b, 0xee, 0xe1,
	0xdb, 0x67, 0x08, 0x16, 0xad, 0x6f, 0x79, 0x4c, 0xb6, 0x86, 0xb4, 0x06, 0xfb, 0x9a, 0x8d, 0x1d,
	0xf0, 0xf3, 0x14, 0xfe, 0x5d, 0x2e, 0xfc, 0xee, 0x7a, 0x00, 0x8b, 0x29, 0xe9, 0x51, 0xad, 0xbb,
	0x2e, 0xc2, 0x8f, 0x11, 0xcc, 0x27, 0x20, 0x95, 0x17, 0x20, 0x1c, 0xa6, 0x74, 0x2e, 0x77, 0x49,
	0x27, 0x2f, 0x74, 0xb8, 0xaa, 0x75, 0xd1, 0xdd, 0xf7, 0x3b, 0x04, 0xd7, 0xc2, 0x48, 0x8a, 0xd6,
	0x9b, 0x49, 0x4a, 0xdc, 0x2d, 0x2e, 0x71, 0x1d, 0xb6, 0xb6, 0x15, 0x53, 0xd2, 0x15, 0xdc, 0x61,
	0x57, 0xdc, 0x0f, 0x39, 0x36, 0xc0, 0xfe, 0x4f, 0x25, 0x59, 0x2f, 0xd1, 0x3f, 0xb8, 0xf0, 0xd2,
	0x72, 0x84, 0xd2, 0xf2, 0x2f, 0x49, 0x8e, 0x1a, 0x42, 0xfe, 0x47, 0xa3, 0x98, 0x92, 0x0a, 0xad,
	0x64, 0xff, 0xbc, 0xf1, 0x73, 0x04, 0x8f, 0xb0, 0x0f, 0x37, 0x3c, 0x1d, 0x5c, 0xb1, 0xf4, 0x49,
	0xa4, 0xf0, 0x1f, 0xe7, 0xc2, 0xef, 0xa0, 0x99, 0xa4, 0x98, 0x92, 0x2e, 0xea, 0x1d, 0xf4, 0xa0,
	0xfc, 0x18, 0xc1, 0xe5, 0x08, 0x42, 0x78, 0xda, 0x72, 0x94, 0x52, 0xb1, 0xd4, 0x09, 0x15, 0x3c,
	0x15, 0x39, 0xa7, 0x27, 0xad, 0x57, 0x7f, 0x17, 0xc1, 0x79, 0x2e, 0x72, 0x6e, 0xa0, 0x7b, 0x8c,
	0x42, 0x5f, 0xe4, 0x42, 0x4f, 0x52, 0x92, 0x2d, 0xa6, 0xa4, 0xe9, 0x72, 0x92, 0x12, 0xee, 0x0f,
	0x10, 0x5c, 0xe4, 0x42, 0x0e, 0xc9, 0xaa, 0x8e, 0x47, 0x08, 0x7d, 0xb2, 0x6a, 0x27, 0x11, 0xfa,
	0x72, 0xb2, 0xfa, 0xe8, 0x77, 0x10, 0x9c, 0x4b, 0x2c, 0x25, 0x27, 0x28, 0xea, 0xeb, 0x09, 0x51,
	0xf3, 0x04, 0xe4, 0x4c, 0x39, 0x81, 0x6c, 0x7c, 0x0f, 0xc1, 0x05, 0x3e, 0xa3, 0xb9, 0xce, 0xfa,
	0x24, 0x45, 0x7c, 0x23, 0x29, 0x9f, 0xb9, 0x1e, 0xfb, 0x6c, 0x39, 0x51, 0xcd, 0xec, 0xfb, 0x61,
	0xe2, 0x11, 0x92, 0x49, 0x4e, 0x75, 0x04, 0x9b, 0x9f, 0x53, 0x72, 0x60, 0xf3, 0xb2, 0x4b, 0x12,
	0xcf, 0xf1, 0x61, 0x87, 0x44, 0xa0, 0xa7, 0x22, 0xe2, 0xb9, 0x84, 0x75, 0x15, 0x12, 0xcf, 0x95,
	0x13, 0x96, 0x62, 0x88, 0x73, 0x35, 0x9b, 0x7f, 0x3b, 0x8c, 0x90, 0x4e, 0x47, 0x38, 0xd7, 0x0e,
	0xbb, 0xaa, 0x89, 0x73, 0xd5, 0x3b, 0x6c, 0xc8, 0xfe, 0x25, 0x82, 0xd9, 0x18, 0x44, 0xf1, 0xf4,
	0xf6, 0x0c, 0xa5, 0xe8, 0x66, 0xa7, 0x14, 0xf1, 0x14, 0xf8, 0x92, 0xde, 0x49, 0x23, 0xf2, 0x8f,
	0x10, 0x3c, 0x14, 0x46, 0x04, 0x3f, 0x0f, 0x9b, 0x8e, 0x70, 0x52, 0x49, 0xbb, 0x6f, 0x89, 0x93,
	0xc2, 0x49, 0x3b, 0x76, 0x89, 0x21, 0x6a, 0xd2, 0x8e, 0xd7, 0x36, 0x78, 0x5f, 0xc7, 0x97, 0x1f,
	0xfb, 0xd9, 0x08, 0x8d, 0x4e, 0xd4, 0x44, 0x4b, 0x34, 0xba, 0x99, 0x64, 0xc2, 0xfc, 0x10, 0x40,
	0x1b, 0x8c, 0x58, 0x84, 0x3e, 0xb3, 0x24, 0x27, 0x5c, 0x83, 0x5e, 0x8a, 0x55, 0xcf, 0x21, 0xfa,
	0x9d, 0xdb, 0x71, 0x2e, 0x42, 0x67, 0x11, 0x4f, 0x32, 0x27, 0xcd, 0xff, 0x04, 0xbd, 0xff, 0x49,
	0x3e, 0xf5, 0xd1, 0x27, 0xf9, 0xd4, 0xe7, 0x9f, 0xe4, 0xd1, 0x7f, 0xdf, 0xcb, 0xa3, 0x6f, 0xdd,
	0xcb, 0xa3, 0xf7, 0xee, 0xe5, 0xd1, 0xfb, 0xf7, 0xf2, 0xe8, 0x8f, 0xf7, 0xf2, 0xe8, 0xb3, 0x7b,
	0xf9, 0xd4, 0xe7, 0xf7, 0xf2, 0xe8, 0x95, 0x4f, 0xf3, 0xa9, 0xf7, 0x3f, 0xcd, 0xa7, 0x3e, 0xfa,
	0x34, 0x9f, 0x82, 0x09, 0x45, 0xe5, 0xbd, 0x67, 0x7e, 0xe8, 0x26, 0xfb, 0xeb, 0xdb, 0x5b, 0x9a,
	0x6a, 0xa8, 0xb7, 0xd0, 0xb3, 0xc7, 0xd7, 0x1c, 0x63, 0x15, 0xd5, 0xf3, 0x3f, 0xc6, 0x57, 0xcd,
	0x9f, 0x6f, 0xa7, 0xf7, 0x2f, 0x5b, 0x83, 0xe6, 0x1a, 0x8a, 0x85, 0xb6, 0x70, 0xe7, 0xfc, 0x9f,
	0xd2, 0x13, 0xd6, 0x93, 0xd9, 0xd9, 0xb9, 0x86, 0x32, 0x3b, 0x6b, 0x3e, 0x9b, 0x9d, 0xbd, 0x73,
	0x7e, 0xa5, 0x97, 0x96, 0x15, 0x2f, 0xfe, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x38, 0x8e, 0x8f, 0x3b,
	0x28, 0x59, 0x00, 0x00,
}

func (this *WorkflowExecutionStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionStartedEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.ParentWorkflowNamespace != that1.ParentWorkflowNamespace {
		return false
	}
	if !this.ParentWorkflowExecution.Equal(that1.ParentWorkflowExecution) {
		return false
	}
	if this.ParentInitiatedEventId != that1.ParentInitiatedEventId {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.WorkflowExecutionTimeout != nil && that1.WorkflowExecutionTimeout != nil {
		if *this.WorkflowExecutionTimeout != *that1.WorkflowExecutionTimeout {
			return false
		}
	} else if this.WorkflowExecutionTimeout != nil {
		return false
	} else if that1.WorkflowExecutionTimeout != nil {
		return false
	}
	if this.WorkflowRunTimeout != nil && that1.WorkflowRunTimeout != nil {
		if *this.WorkflowRunTimeout != *that1.WorkflowRunTimeout {
			return false
		}
	} else if this.WorkflowRunTimeout != nil {
		return false
	} else if that1.WorkflowRunTimeout != nil {
		return false
	}
	if this.WorkflowTaskTimeout != nil && that1.WorkflowTaskTimeout != nil {
		if *this.WorkflowTaskTimeout != *that1.WorkflowTaskTimeout {
			return false
		}
	} else if this.WorkflowTaskTimeout != nil {
		return false
	} else if that1.WorkflowTaskTimeout != nil {
		return false
	}
	if this.ContinuedExecutionRunId != that1.ContinuedExecutionRunId {
		return false
	}
	if this.Initiator != that1.Initiator {
		return false
	}
	if !this.ContinuedFailure.Equal(that1.ContinuedFailure) {
		return false
	}
	if !this.LastCompletionResult.Equal(that1.LastCompletionResult) {
		return false
	}
	if this.OriginalExecutionRunId != that1.OriginalExecutionRunId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.FirstExecutionRunId != that1.FirstExecutionRunId {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if that1.WorkflowExecutionExpirationTime == nil {
		if this.WorkflowExecutionExpirationTime != nil {
			return false
		}
	} else if !this.WorkflowExecutionExpirationTime.Equal(*that1.WorkflowExecutionExpirationTime) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if this.FirstWorkflowTaskBackoff != nil && that1.FirstWorkflowTaskBackoff != nil {
		if *this.FirstWorkflowTaskBackoff != *that1.FirstWorkflowTaskBackoff {
			return false
		}
	} else if this.FirstWorkflowTaskBackoff != nil {
		return false
	} else if that1.FirstWorkflowTaskBackoff != nil {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	if !this.PrevAutoResetPoints.Equal(that1.PrevAutoResetPoints) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *WorkflowExecutionCompletedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionCompletedEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionCompletedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.NewExecutionRunId != that1.NewExecutionRunId {
		return false
	}
	return true
}
func (this *WorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if this.RetryState != that1.RetryState {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.NewExecutionRunId != that1.NewExecutionRunId {
		return false
	}
	return true
}
func (this *WorkflowExecutionTimedOutEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionTimedOutEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionTimedOutEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RetryState != that1.RetryState {
		return false
	}
	if this.NewExecutionRunId != that1.NewExecutionRunId {
		return false
	}
	return true
}
func (this *WorkflowExecutionContinuedAsNewEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionContinuedAsNewEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionContinuedAsNewEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewExecutionRunId != that1.NewExecutionRunId {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.WorkflowRunTimeout != nil && that1.WorkflowRunTimeout != nil {
		if *this.WorkflowRunTimeout != *that1.WorkflowRunTimeout {
			return false
		}
	} else if this.WorkflowRunTimeout != nil {
		return false
	} else if that1.WorkflowRunTimeout != nil {
		return false
	}
	if this.WorkflowTaskTimeout != nil && that1.WorkflowTaskTimeout != nil {
		if *this.WorkflowTaskTimeout != *that1.WorkflowTaskTimeout {
			return false
		}
	} else if this.WorkflowTaskTimeout != nil {
		return false
	} else if that1.WorkflowTaskTimeout != nil {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.BackoffStartInterval != nil && that1.BackoffStartInterval != nil {
		if *this.BackoffStartInterval != *that1.BackoffStartInterval {
			return false
		}
	} else if this.BackoffStartInterval != nil {
		return false
	} else if that1.BackoffStartInterval != nil {
		return false
	}
	if this.Initiator != that1.Initiator {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if !this.LastCompletionResult.Equal(that1.LastCompletionResult) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *WorkflowTaskScheduledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowTaskScheduledEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowTaskScheduledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if this.StartToCloseTimeout != nil && that1.StartToCloseTimeout != nil {
		if *this.StartToCloseTimeout != *that1.StartToCloseTimeout {
			return false
		}
	} else if this.StartToCloseTimeout != nil {
		return false
	} else if that1.StartToCloseTimeout != nil {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	return true
}
func (this *WorkflowTaskStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowTaskStartedEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowTaskStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *WorkflowTaskCompletedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowTaskCompletedEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowTaskCompletedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	return true
}
func (this *WorkflowTaskTimedOutEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowTaskTimedOutEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowTaskTimedOutEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.TimeoutType != that1.TimeoutType {
		return false
	}
	return true
}
func (this *WorkflowTaskFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowTaskFailedEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowTaskFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.BaseRunId != that1.BaseRunId {
		return false
	}
	if this.NewRunId != that1.NewRunId {
		return false
	}
	if this.ForkEventVersion != that1.ForkEventVersion {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	return true
}
func (this *ActivityTaskScheduledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTaskScheduledEventAttributes)
	if !ok {
		that2, ok := that.(ActivityTaskScheduledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.ScheduleToCloseTimeout != nil && that1.ScheduleToCloseTimeout != nil {
		if *this.ScheduleToCloseTimeout != *that1.ScheduleToCloseTimeout {
			return false
		}
	} else if this.ScheduleToCloseTimeout != nil {
		return false
	} else if that1.ScheduleToCloseTimeout != nil {
		return false
	}
	if this.ScheduleToStartTimeout != nil && that1.ScheduleToStartTimeout != nil {
		if *this.ScheduleToStartTimeout != *that1.ScheduleToStartTimeout {
			return false
		}
	} else if this.ScheduleToStartTimeout != nil {
		return false
	} else if that1.ScheduleToStartTimeout != nil {
		return false
	}
	if this.StartToCloseTimeout != nil && that1.StartToCloseTimeout != nil {
		if *this.StartToCloseTimeout != *that1.StartToCloseTimeout {
			return false
		}
	} else if this.StartToCloseTimeout != nil {
		return false
	} else if that1.StartToCloseTimeout != nil {
		return false
	}
	if this.HeartbeatTimeout != nil && that1.HeartbeatTimeout != nil {
		if *this.HeartbeatTimeout != *that1.HeartbeatTimeout {
			return false
		}
	} else if this.HeartbeatTimeout != nil {
		return false
	} else if that1.HeartbeatTimeout != nil {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	return true
}
func (this *ActivityTaskStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTaskStartedEventAttributes)
	if !ok {
		that2, ok := that.(ActivityTaskStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if !this.LastFailure.Equal(that1.LastFailure) {
		return false
	}
	return true
}
func (this *ActivityTaskCompletedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTaskCompletedEventAttributes)
	if !ok {
		that2, ok := that.(ActivityTaskCompletedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *ActivityTaskFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTaskFailedEventAttributes)
	if !ok {
		that2, ok := that.(ActivityTaskFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RetryState != that1.RetryState {
		return false
	}
	return true
}
func (this *ActivityTaskTimedOutEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTaskTimedOutEventAttributes)
	if !ok {
		that2, ok := that.(ActivityTaskTimedOutEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.RetryState != that1.RetryState {
		return false
	}
	return true
}
func (this *ActivityTaskCancelRequestedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTaskCancelRequestedEventAttributes)
	if !ok {
		that2, ok := that.(ActivityTaskCancelRequestedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	return true
}
func (this *ActivityTaskCanceledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTaskCanceledEventAttributes)
	if !ok {
		that2, ok := that.(ActivityTaskCanceledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.LatestCancelRequestedEventId != that1.LatestCancelRequestedEventId {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *TimerStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimerStartedEventAttributes)
	if !ok {
		that2, ok := that.(TimerStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimerId != that1.TimerId {
		return false
	}
	if this.StartToFireTimeout != nil && that1.StartToFireTimeout != nil {
		if *this.StartToFireTimeout != *that1.StartToFireTimeout {
			return false
		}
	} else if this.StartToFireTimeout != nil {
		return false
	} else if that1.StartToFireTimeout != nil {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	return true
}
func (this *TimerFiredEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimerFiredEventAttributes)
	if !ok {
		that2, ok := that.(TimerFiredEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimerId != that1.TimerId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	return true
}
func (this *TimerCanceledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimerCanceledEventAttributes)
	if !ok {
		that2, ok := that.(TimerCanceledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimerId != that1.TimerId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *WorkflowExecutionCancelRequestedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionCancelRequestedEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionCancelRequestedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.ExternalInitiatedEventId != that1.ExternalInitiatedEventId {
		return false
	}
	if !this.ExternalWorkflowExecution.Equal(that1.ExternalWorkflowExecution) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *WorkflowExecutionCanceledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionCanceledEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionCanceledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *MarkerRecordedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarkerRecordedEventAttributes)
	if !ok {
		that2, ok := that.(MarkerRecordedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MarkerName != that1.MarkerName {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if !this.Details[i].Equal(that1.Details[i]) {
			return false
		}
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *WorkflowExecutionSignaledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionSignaledEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionSignaledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalName != that1.SignalName {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *WorkflowExecutionTerminatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionTerminatedEventAttributes)
	if !ok {
		that2, ok := that.(WorkflowExecutionTerminatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)
	if !ok {
		that2, ok := that.(RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	if this.ChildWorkflowOnly != that1.ChildWorkflowOnly {
		return false
	}
	return true
}
func (this *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelExternalWorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(RequestCancelExternalWorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	return true
}
func (this *ExternalWorkflowExecutionCancelRequestedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExternalWorkflowExecutionCancelRequestedEventAttributes)
	if !ok {
		that2, ok := that.(ExternalWorkflowExecutionCancelRequestedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	return true
}
func (this *SignalExternalWorkflowExecutionInitiatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalExternalWorkflowExecutionInitiatedEventAttributes)
	if !ok {
		that2, ok := that.(SignalExternalWorkflowExecutionInitiatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.SignalName != that1.SignalName {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	if this.ChildWorkflowOnly != that1.ChildWorkflowOnly {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *SignalExternalWorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalExternalWorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(SignalExternalWorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	return true
}
func (this *ExternalWorkflowExecutionSignaledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExternalWorkflowExecutionSignaledEventAttributes)
	if !ok {
		that2, ok := that.(ExternalWorkflowExecutionSignaledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	return true
}
func (this *UpsertWorkflowSearchAttributesEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertWorkflowSearchAttributesEventAttributes)
	if !ok {
		that2, ok := that.(UpsertWorkflowSearchAttributesEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *StartChildWorkflowExecutionInitiatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartChildWorkflowExecutionInitiatedEventAttributes)
	if !ok {
		that2, ok := that.(StartChildWorkflowExecutionInitiatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.WorkflowExecutionTimeout != nil && that1.WorkflowExecutionTimeout != nil {
		if *this.WorkflowExecutionTimeout != *that1.WorkflowExecutionTimeout {
			return false
		}
	} else if this.WorkflowExecutionTimeout != nil {
		return false
	} else if that1.WorkflowExecutionTimeout != nil {
		return false
	}
	if this.WorkflowRunTimeout != nil && that1.WorkflowRunTimeout != nil {
		if *this.WorkflowRunTimeout != *that1.WorkflowRunTimeout {
			return false
		}
	} else if this.WorkflowRunTimeout != nil {
		return false
	} else if that1.WorkflowRunTimeout != nil {
		return false
	}
	if this.WorkflowTaskTimeout != nil && that1.WorkflowTaskTimeout != nil {
		if *this.WorkflowTaskTimeout != *that1.WorkflowTaskTimeout {
			return false
		}
	} else if this.WorkflowTaskTimeout != nil {
		return false
	} else if that1.WorkflowTaskTimeout != nil {
		return false
	}
	if this.ParentClosePolicy != that1.ParentClosePolicy {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	if this.WorkflowIdReusePolicy != that1.WorkflowIdReusePolicy {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *StartChildWorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartChildWorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(StartChildWorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.WorkflowTaskCompletedEventId != that1.WorkflowTaskCompletedEventId {
		return false
	}
	return true
}
func (this *ChildWorkflowExecutionStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowExecutionStartedEventAttributes)
	if !ok {
		that2, ok := that.(ChildWorkflowExecutionStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *ChildWorkflowExecutionCompletedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowExecutionCompletedEventAttributes)
	if !ok {
		that2, ok := that.(ChildWorkflowExecutionCompletedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	return true
}
func (this *ChildWorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(ChildWorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.RetryState != that1.RetryState {
		return false
	}
	return true
}
func (this *ChildWorkflowExecutionCanceledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowExecutionCanceledEventAttributes)
	if !ok {
		that2, ok := that.(ChildWorkflowExecutionCanceledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	return true
}
func (this *ChildWorkflowExecutionTimedOutEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowExecutionTimedOutEventAttributes)
	if !ok {
		that2, ok := that.(ChildWorkflowExecutionTimedOutEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.RetryState != that1.RetryState {
		return false
	}
	return true
}
func (this *ChildWorkflowExecutionTerminatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowExecutionTerminatedEventAttributes)
	if !ok {
		that2, ok := that.(ChildWorkflowExecutionTerminatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.InitiatedEventId != that1.InitiatedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	return true
}
func (this *HistoryEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent)
	if !ok {
		that2, ok := that.(HistoryEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if that1.EventTime == nil {
		if this.EventTime != nil {
			return false
		}
	} else if !this.EventTime.Equal(*that1.EventTime) {
		return false
	}
	if this.EventType != that1.EventType {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if that1.Attributes == nil {
		if this.Attributes != nil {
			return false
		}
	} else if this.Attributes == nil {
		return false
	} else if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionStartedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionStartedEventAttributes.Equal(that1.WorkflowExecutionStartedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionCompletedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionCompletedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionCompletedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionCompletedEventAttributes.Equal(that1.WorkflowExecutionCompletedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionFailedEventAttributes.Equal(that1.WorkflowExecutionFailedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionTimedOutEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionTimedOutEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionTimedOutEventAttributes.Equal(that1.WorkflowExecutionTimedOutEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowTaskScheduledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowTaskScheduledEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowTaskScheduledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowTaskScheduledEventAttributes.Equal(that1.WorkflowTaskScheduledEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowTaskStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowTaskStartedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowTaskStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowTaskStartedEventAttributes.Equal(that1.WorkflowTaskStartedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowTaskCompletedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowTaskCompletedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowTaskCompletedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowTaskCompletedEventAttributes.Equal(that1.WorkflowTaskCompletedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowTaskTimedOutEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowTaskTimedOutEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowTaskTimedOutEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowTaskTimedOutEventAttributes.Equal(that1.WorkflowTaskTimedOutEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowTaskFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowTaskFailedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowTaskFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowTaskFailedEventAttributes.Equal(that1.WorkflowTaskFailedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ActivityTaskScheduledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ActivityTaskScheduledEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ActivityTaskScheduledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActivityTaskScheduledEventAttributes.Equal(that1.ActivityTaskScheduledEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ActivityTaskStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ActivityTaskStartedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ActivityTaskStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActivityTaskStartedEventAttributes.Equal(that1.ActivityTaskStartedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ActivityTaskCompletedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ActivityTaskCompletedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ActivityTaskCompletedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActivityTaskCompletedEventAttributes.Equal(that1.ActivityTaskCompletedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ActivityTaskFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ActivityTaskFailedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ActivityTaskFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActivityTaskFailedEventAttributes.Equal(that1.ActivityTaskFailedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ActivityTaskTimedOutEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ActivityTaskTimedOutEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ActivityTaskTimedOutEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActivityTaskTimedOutEventAttributes.Equal(that1.ActivityTaskTimedOutEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_TimerStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_TimerStartedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_TimerStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TimerStartedEventAttributes.Equal(that1.TimerStartedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_TimerFiredEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_TimerFiredEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_TimerFiredEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TimerFiredEventAttributes.Equal(that1.TimerFiredEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ActivityTaskCancelRequestedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ActivityTaskCancelRequestedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActivityTaskCancelRequestedEventAttributes.Equal(that1.ActivityTaskCancelRequestedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ActivityTaskCanceledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ActivityTaskCanceledEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ActivityTaskCanceledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActivityTaskCanceledEventAttributes.Equal(that1.ActivityTaskCanceledEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_TimerCanceledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_TimerCanceledEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_TimerCanceledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TimerCanceledEventAttributes.Equal(that1.TimerCanceledEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_MarkerRecordedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_MarkerRecordedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_MarkerRecordedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MarkerRecordedEventAttributes.Equal(that1.MarkerRecordedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionSignaledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionSignaledEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionSignaledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionSignaledEventAttributes.Equal(that1.WorkflowExecutionSignaledEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionTerminatedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionTerminatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionTerminatedEventAttributes.Equal(that1.WorkflowExecutionTerminatedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionCancelRequestedEventAttributes.Equal(that1.WorkflowExecutionCancelRequestedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionCanceledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionCanceledEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionCanceledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionCanceledEventAttributes.Equal(that1.WorkflowExecutionCanceledEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Equal(that1.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestCancelExternalWorkflowExecutionFailedEventAttributes.Equal(that1.RequestCancelExternalWorkflowExecutionFailedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExternalWorkflowExecutionCancelRequestedEventAttributes.Equal(that1.ExternalWorkflowExecutionCancelRequestedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecutionContinuedAsNewEventAttributes.Equal(that1.WorkflowExecutionContinuedAsNewEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartChildWorkflowExecutionInitiatedEventAttributes.Equal(that1.StartChildWorkflowExecutionInitiatedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartChildWorkflowExecutionFailedEventAttributes.Equal(that1.StartChildWorkflowExecutionFailedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ChildWorkflowExecutionStartedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChildWorkflowExecutionStartedEventAttributes.Equal(that1.ChildWorkflowExecutionStartedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChildWorkflowExecutionCompletedEventAttributes.Equal(that1.ChildWorkflowExecutionCompletedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ChildWorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChildWorkflowExecutionFailedEventAttributes.Equal(that1.ChildWorkflowExecutionFailedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChildWorkflowExecutionCanceledEventAttributes.Equal(that1.ChildWorkflowExecutionCanceledEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChildWorkflowExecutionTimedOutEventAttributes.Equal(that1.ChildWorkflowExecutionTimedOutEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChildWorkflowExecutionTerminatedEventAttributes.Equal(that1.ChildWorkflowExecutionTerminatedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignalExternalWorkflowExecutionInitiatedEventAttributes.Equal(that1.SignalExternalWorkflowExecutionInitiatedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignalExternalWorkflowExecutionFailedEventAttributes.Equal(that1.SignalExternalWorkflowExecutionFailedEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExternalWorkflowExecutionSignaledEventAttributes.Equal(that1.ExternalWorkflowExecutionSignaledEventAttributes) {
		return false
	}
	return true
}
func (this *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes)
	if !ok {
		that2, ok := that.(HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpsertWorkflowSearchAttributesEventAttributes.Equal(that1.UpsertWorkflowSearchAttributesEventAttributes) {
		return false
	}
	return true
}
func (this *History) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*History)
	if !ok {
		that2, ok := that.(History)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	return true
}
func (this *WorkflowExecutionStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 29)
	s = append(s, "&history.WorkflowExecutionStartedEventAttributes{")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "ParentWorkflowNamespace: "+fmt.Sprintf("%#v", this.ParentWorkflowNamespace)+",\n")
	if this.ParentWorkflowExecution != nil {
		s = append(s, "ParentWorkflowExecution: "+fmt.Sprintf("%#v", this.ParentWorkflowExecution)+",\n")
	}
	s = append(s, "ParentInitiatedEventId: "+fmt.Sprintf("%#v", this.ParentInitiatedEventId)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "WorkflowExecutionTimeout: "+fmt.Sprintf("%#v", this.WorkflowExecutionTimeout)+",\n")
	s = append(s, "WorkflowRunTimeout: "+fmt.Sprintf("%#v", this.WorkflowRunTimeout)+",\n")
	s = append(s, "WorkflowTaskTimeout: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeout)+",\n")
	s = append(s, "ContinuedExecutionRunId: "+fmt.Sprintf("%#v", this.ContinuedExecutionRunId)+",\n")
	s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	if this.ContinuedFailure != nil {
		s = append(s, "ContinuedFailure: "+fmt.Sprintf("%#v", this.ContinuedFailure)+",\n")
	}
	if this.LastCompletionResult != nil {
		s = append(s, "LastCompletionResult: "+fmt.Sprintf("%#v", this.LastCompletionResult)+",\n")
	}
	s = append(s, "OriginalExecutionRunId: "+fmt.Sprintf("%#v", this.OriginalExecutionRunId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "FirstExecutionRunId: "+fmt.Sprintf("%#v", this.FirstExecutionRunId)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "WorkflowExecutionExpirationTime: "+fmt.Sprintf("%#v", this.WorkflowExecutionExpirationTime)+",\n")
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	s = append(s, "FirstWorkflowTaskBackoff: "+fmt.Sprintf("%#v", this.FirstWorkflowTaskBackoff)+",\n")
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	if this.PrevAutoResetPoints != nil {
		s = append(s, "PrevAutoResetPoints: "+fmt.Sprintf("%#v", this.PrevAutoResetPoints)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionCompletedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&history.WorkflowExecutionCompletedEventAttributes{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "NewExecutionRunId: "+fmt.Sprintf("%#v", this.NewExecutionRunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&history.WorkflowExecutionFailedEventAttributes{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "RetryState: "+fmt.Sprintf("%#v", this.RetryState)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "NewExecutionRunId: "+fmt.Sprintf("%#v", this.NewExecutionRunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionTimedOutEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.WorkflowExecutionTimedOutEventAttributes{")
	s = append(s, "RetryState: "+fmt.Sprintf("%#v", this.RetryState)+",\n")
	s = append(s, "NewExecutionRunId: "+fmt.Sprintf("%#v", this.NewExecutionRunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionContinuedAsNewEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&history.WorkflowExecutionContinuedAsNewEventAttributes{")
	s = append(s, "NewExecutionRunId: "+fmt.Sprintf("%#v", this.NewExecutionRunId)+",\n")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "WorkflowRunTimeout: "+fmt.Sprintf("%#v", this.WorkflowRunTimeout)+",\n")
	s = append(s, "WorkflowTaskTimeout: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeout)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "BackoffStartInterval: "+fmt.Sprintf("%#v", this.BackoffStartInterval)+",\n")
	s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	if this.LastCompletionResult != nil {
		s = append(s, "LastCompletionResult: "+fmt.Sprintf("%#v", this.LastCompletionResult)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowTaskScheduledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&history.WorkflowTaskScheduledEventAttributes{")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "StartToCloseTimeout: "+fmt.Sprintf("%#v", this.StartToCloseTimeout)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowTaskStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&history.WorkflowTaskStartedEventAttributes{")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowTaskCompletedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&history.WorkflowTaskCompletedEventAttributes{")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowTaskTimedOutEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&history.WorkflowTaskTimedOutEventAttributes{")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "TimeoutType: "+fmt.Sprintf("%#v", this.TimeoutType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowTaskFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&history.WorkflowTaskFailedEventAttributes{")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "BaseRunId: "+fmt.Sprintf("%#v", this.BaseRunId)+",\n")
	s = append(s, "NewRunId: "+fmt.Sprintf("%#v", this.NewRunId)+",\n")
	s = append(s, "ForkEventVersion: "+fmt.Sprintf("%#v", this.ForkEventVersion)+",\n")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTaskScheduledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&history.ActivityTaskScheduledEventAttributes{")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "ScheduleToCloseTimeout: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeout)+",\n")
	s = append(s, "ScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeout)+",\n")
	s = append(s, "StartToCloseTimeout: "+fmt.Sprintf("%#v", this.StartToCloseTimeout)+",\n")
	s = append(s, "HeartbeatTimeout: "+fmt.Sprintf("%#v", this.HeartbeatTimeout)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTaskStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&history.ActivityTaskStartedEventAttributes{")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	if this.LastFailure != nil {
		s = append(s, "LastFailure: "+fmt.Sprintf("%#v", this.LastFailure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTaskCompletedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&history.ActivityTaskCompletedEventAttributes{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTaskFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&history.ActivityTaskFailedEventAttributes{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RetryState: "+fmt.Sprintf("%#v", this.RetryState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTaskTimedOutEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&history.ActivityTaskTimedOutEventAttributes{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "RetryState: "+fmt.Sprintf("%#v", this.RetryState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTaskCancelRequestedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.ActivityTaskCancelRequestedEventAttributes{")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTaskCanceledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&history.ActivityTaskCanceledEventAttributes{")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "LatestCancelRequestedEventId: "+fmt.Sprintf("%#v", this.LatestCancelRequestedEventId)+",\n")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimerStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&history.TimerStartedEventAttributes{")
	s = append(s, "TimerId: "+fmt.Sprintf("%#v", this.TimerId)+",\n")
	s = append(s, "StartToFireTimeout: "+fmt.Sprintf("%#v", this.StartToFireTimeout)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimerFiredEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.TimerFiredEventAttributes{")
	s = append(s, "TimerId: "+fmt.Sprintf("%#v", this.TimerId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimerCanceledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&history.TimerCanceledEventAttributes{")
	s = append(s, "TimerId: "+fmt.Sprintf("%#v", this.TimerId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionCancelRequestedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&history.WorkflowExecutionCancelRequestedEventAttributes{")
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "ExternalInitiatedEventId: "+fmt.Sprintf("%#v", this.ExternalInitiatedEventId)+",\n")
	if this.ExternalWorkflowExecution != nil {
		s = append(s, "ExternalWorkflowExecution: "+fmt.Sprintf("%#v", this.ExternalWorkflowExecution)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionCanceledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.WorkflowExecutionCanceledEventAttributes{")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkerRecordedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&history.MarkerRecordedEventAttributes{")
	s = append(s, "MarkerName: "+fmt.Sprintf("%#v", this.MarkerName)+",\n")
	keysForDetails := make([]string, 0, len(this.Details))
	for k, _ := range this.Details {
		keysForDetails = append(keysForDetails, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetails)
	mapStringForDetails := "map[string]*v1.Payloads{"
	for _, k := range keysForDetails {
		mapStringForDetails += fmt.Sprintf("%#v: %#v,", k, this.Details[k])
	}
	mapStringForDetails += "}"
	if this.Details != nil {
		s = append(s, "Details: "+mapStringForDetails+",\n")
	}
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionSignaledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&history.WorkflowExecutionSignaledEventAttributes{")
	s = append(s, "SignalName: "+fmt.Sprintf("%#v", this.SignalName)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionTerminatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&history.WorkflowExecutionTerminatedEventAttributes{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&history.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "ChildWorkflowOnly: "+fmt.Sprintf("%#v", this.ChildWorkflowOnly)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&history.RequestCancelExternalWorkflowExecutionFailedEventAttributes{")
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExternalWorkflowExecutionCancelRequestedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&history.ExternalWorkflowExecutionCancelRequestedEventAttributes{")
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalExternalWorkflowExecutionInitiatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&history.SignalExternalWorkflowExecutionInitiatedEventAttributes{")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "SignalName: "+fmt.Sprintf("%#v", this.SignalName)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "ChildWorkflowOnly: "+fmt.Sprintf("%#v", this.ChildWorkflowOnly)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalExternalWorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&history.SignalExternalWorkflowExecutionFailedEventAttributes{")
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExternalWorkflowExecutionSignaledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&history.ExternalWorkflowExecutionSignaledEventAttributes{")
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertWorkflowSearchAttributesEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.UpsertWorkflowSearchAttributesEventAttributes{")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartChildWorkflowExecutionInitiatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&history.StartChildWorkflowExecutionInitiatedEventAttributes{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "WorkflowExecutionTimeout: "+fmt.Sprintf("%#v", this.WorkflowExecutionTimeout)+",\n")
	s = append(s, "WorkflowRunTimeout: "+fmt.Sprintf("%#v", this.WorkflowRunTimeout)+",\n")
	s = append(s, "WorkflowTaskTimeout: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeout)+",\n")
	s = append(s, "ParentClosePolicy: "+fmt.Sprintf("%#v", this.ParentClosePolicy)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "WorkflowIdReusePolicy: "+fmt.Sprintf("%#v", this.WorkflowIdReusePolicy)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartChildWorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&history.StartChildWorkflowExecutionFailedEventAttributes{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "WorkflowTaskCompletedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildWorkflowExecutionStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&history.ChildWorkflowExecutionStartedEventAttributes{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildWorkflowExecutionCompletedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&history.ChildWorkflowExecutionCompletedEventAttributes{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildWorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&history.ChildWorkflowExecutionFailedEventAttributes{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "RetryState: "+fmt.Sprintf("%#v", this.RetryState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildWorkflowExecutionCanceledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&history.ChildWorkflowExecutionCanceledEventAttributes{")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildWorkflowExecutionTimedOutEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&history.ChildWorkflowExecutionTimedOutEventAttributes{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "RetryState: "+fmt.Sprintf("%#v", this.RetryState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildWorkflowExecutionTerminatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&history.ChildWorkflowExecutionTerminatedEventAttributes{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "InitiatedEventId: "+fmt.Sprintf("%#v", this.InitiatedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 49)
	s = append(s, "&history.HistoryEvent{")
	s = append(s, "EventId: "+fmt.Sprintf("%#v", this.EventId)+",\n")
	s = append(s, "EventTime: "+fmt.Sprintf("%#v", this.EventTime)+",\n")
	s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryEvent_WorkflowExecutionStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionStartedEventAttributes{` +
		`WorkflowExecutionStartedEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionStartedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowExecutionCompletedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionCompletedEventAttributes{` +
		`WorkflowExecutionCompletedEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionCompletedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionFailedEventAttributes{` +
		`WorkflowExecutionFailedEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionFailedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionTimedOutEventAttributes{` +
		`WorkflowExecutionTimedOutEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionTimedOutEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowTaskScheduledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowTaskScheduledEventAttributes{` +
		`WorkflowTaskScheduledEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowTaskScheduledEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowTaskStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowTaskStartedEventAttributes{` +
		`WorkflowTaskStartedEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowTaskStartedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowTaskCompletedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowTaskCompletedEventAttributes{` +
		`WorkflowTaskCompletedEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowTaskCompletedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowTaskTimedOutEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowTaskTimedOutEventAttributes{` +
		`WorkflowTaskTimedOutEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowTaskTimedOutEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowTaskFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowTaskFailedEventAttributes{` +
		`WorkflowTaskFailedEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowTaskFailedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ActivityTaskScheduledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ActivityTaskScheduledEventAttributes{` +
		`ActivityTaskScheduledEventAttributes:` + fmt.Sprintf("%#v", this.ActivityTaskScheduledEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ActivityTaskStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ActivityTaskStartedEventAttributes{` +
		`ActivityTaskStartedEventAttributes:` + fmt.Sprintf("%#v", this.ActivityTaskStartedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ActivityTaskCompletedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ActivityTaskCompletedEventAttributes{` +
		`ActivityTaskCompletedEventAttributes:` + fmt.Sprintf("%#v", this.ActivityTaskCompletedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ActivityTaskFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ActivityTaskFailedEventAttributes{` +
		`ActivityTaskFailedEventAttributes:` + fmt.Sprintf("%#v", this.ActivityTaskFailedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ActivityTaskTimedOutEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ActivityTaskTimedOutEventAttributes{` +
		`ActivityTaskTimedOutEventAttributes:` + fmt.Sprintf("%#v", this.ActivityTaskTimedOutEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_TimerStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_TimerStartedEventAttributes{` +
		`TimerStartedEventAttributes:` + fmt.Sprintf("%#v", this.TimerStartedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_TimerFiredEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_TimerFiredEventAttributes{` +
		`TimerFiredEventAttributes:` + fmt.Sprintf("%#v", this.TimerFiredEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ActivityTaskCancelRequestedEventAttributes{` +
		`ActivityTaskCancelRequestedEventAttributes:` + fmt.Sprintf("%#v", this.ActivityTaskCancelRequestedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ActivityTaskCanceledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ActivityTaskCanceledEventAttributes{` +
		`ActivityTaskCanceledEventAttributes:` + fmt.Sprintf("%#v", this.ActivityTaskCanceledEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_TimerCanceledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_TimerCanceledEventAttributes{` +
		`TimerCanceledEventAttributes:` + fmt.Sprintf("%#v", this.TimerCanceledEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_MarkerRecordedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_MarkerRecordedEventAttributes{` +
		`MarkerRecordedEventAttributes:` + fmt.Sprintf("%#v", this.MarkerRecordedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowExecutionSignaledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionSignaledEventAttributes{` +
		`WorkflowExecutionSignaledEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionSignaledEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionTerminatedEventAttributes{` +
		`WorkflowExecutionTerminatedEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionTerminatedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes{` +
		`WorkflowExecutionCancelRequestedEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionCancelRequestedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowExecutionCanceledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionCanceledEventAttributes{` +
		`WorkflowExecutionCanceledEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionCanceledEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{` +
		`RequestCancelExternalWorkflowExecutionInitiatedEventAttributes:` + fmt.Sprintf("%#v", this.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes{` +
		`RequestCancelExternalWorkflowExecutionFailedEventAttributes:` + fmt.Sprintf("%#v", this.RequestCancelExternalWorkflowExecutionFailedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes{` +
		`ExternalWorkflowExecutionCancelRequestedEventAttributes:` + fmt.Sprintf("%#v", this.ExternalWorkflowExecutionCancelRequestedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes{` +
		`WorkflowExecutionContinuedAsNewEventAttributes:` + fmt.Sprintf("%#v", this.WorkflowExecutionContinuedAsNewEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes{` +
		`StartChildWorkflowExecutionInitiatedEventAttributes:` + fmt.Sprintf("%#v", this.StartChildWorkflowExecutionInitiatedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes{` +
		`StartChildWorkflowExecutionFailedEventAttributes:` + fmt.Sprintf("%#v", this.StartChildWorkflowExecutionFailedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ChildWorkflowExecutionStartedEventAttributes{` +
		`ChildWorkflowExecutionStartedEventAttributes:` + fmt.Sprintf("%#v", this.ChildWorkflowExecutionStartedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes{` +
		`ChildWorkflowExecutionCompletedEventAttributes:` + fmt.Sprintf("%#v", this.ChildWorkflowExecutionCompletedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ChildWorkflowExecutionFailedEventAttributes{` +
		`ChildWorkflowExecutionFailedEventAttributes:` + fmt.Sprintf("%#v", this.ChildWorkflowExecutionFailedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes{` +
		`ChildWorkflowExecutionCanceledEventAttributes:` + fmt.Sprintf("%#v", this.ChildWorkflowExecutionCanceledEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes{` +
		`ChildWorkflowExecutionTimedOutEventAttributes:` + fmt.Sprintf("%#v", this.ChildWorkflowExecutionTimedOutEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes{` +
		`ChildWorkflowExecutionTerminatedEventAttributes:` + fmt.Sprintf("%#v", this.ChildWorkflowExecutionTerminatedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes{` +
		`SignalExternalWorkflowExecutionInitiatedEventAttributes:` + fmt.Sprintf("%#v", this.SignalExternalWorkflowExecutionInitiatedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes{` +
		`SignalExternalWorkflowExecutionFailedEventAttributes:` + fmt.Sprintf("%#v", this.SignalExternalWorkflowExecutionFailedEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes{` +
		`ExternalWorkflowExecutionSignaledEventAttributes:` + fmt.Sprintf("%#v", this.ExternalWorkflowExecutionSignaledEventAttributes) + `}`}, ", ")
	return s
}
func (this *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&history.HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes{` +
		`UpsertWorkflowSearchAttributesEventAttributes:` + fmt.Sprintf("%#v", this.UpsertWorkflowSearchAttributesEventAttributes) + `}`}, ", ")
	return s
}
func (this *History) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&history.History{")
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WorkflowExecutionStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.PrevAutoResetPoints != nil {
		{
			size, err := m.PrevAutoResetPoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.FirstWorkflowTaskBackoff != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.FirstWorkflowTaskBackoff, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.FirstWorkflowTaskBackoff):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintMessage(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.WorkflowExecutionExpirationTime != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.WorkflowExecutionExpirationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.WorkflowExecutionExpirationTime):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintMessage(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.FirstExecutionRunId) > 0 {
		i -= len(m.FirstExecutionRunId)
		copy(dAtA[i:], m.FirstExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FirstExecutionRunId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.OriginalExecutionRunId) > 0 {
		i -= len(m.OriginalExecutionRunId)
		copy(dAtA[i:], m.OriginalExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OriginalExecutionRunId)))
		i--
		dAtA[i] = 0x72
	}
	if m.LastCompletionResult != nil {
		{
			size, err := m.LastCompletionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ContinuedFailure != nil {
		{
			size, err := m.ContinuedFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Initiator != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Initiator))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ContinuedExecutionRunId) > 0 {
		i -= len(m.ContinuedExecutionRunId)
		copy(dAtA[i:], m.ContinuedExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ContinuedExecutionRunId)))
		i--
		dAtA[i] = 0x52
	}
	if m.WorkflowTaskTimeout != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowTaskTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowTaskTimeout):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintMessage(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x4a
	}
	if m.WorkflowRunTimeout != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowRunTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowRunTimeout):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintMessage(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x42
	}
	if m.WorkflowExecutionTimeout != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowExecutionTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionTimeout):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintMessage(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x3a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ParentInitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentInitiatedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.ParentWorkflowExecution != nil {
		{
			size, err := m.ParentWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentWorkflowNamespace) > 0 {
		i -= len(m.ParentWorkflowNamespace)
		copy(dAtA[i:], m.ParentWorkflowNamespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ParentWorkflowNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionCompletedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewExecutionRunId) > 0 {
		i -= len(m.NewExecutionRunId)
		copy(dAtA[i:], m.NewExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewExecutionRunId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewExecutionRunId) > 0 {
		i -= len(m.NewExecutionRunId)
		copy(dAtA[i:], m.NewExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewExecutionRunId)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.RetryState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryState))
		i--
		dAtA[i] = 0x10
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionTimedOutEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewExecutionRunId) > 0 {
		i -= len(m.NewExecutionRunId)
		copy(dAtA[i:], m.NewExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewExecutionRunId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetryState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.LastCompletionResult != nil {
		{
			size, err := m.LastCompletionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Initiator != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Initiator))
		i--
		dAtA[i] = 0x48
	}
	if m.BackoffStartInterval != nil {
		n24, err24 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.BackoffStartInterval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.BackoffStartInterval):])
		if err24 != nil {
			return 0, err24
		}
		i -= n24
		i = encodeVarintMessage(dAtA, i, uint64(n24))
		i--
		dAtA[i] = 0x42
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkflowTaskTimeout != nil {
		n25, err25 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowTaskTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowTaskTimeout):])
		if err25 != nil {
			return 0, err25
		}
		i -= n25
		i = encodeVarintMessage(dAtA, i, uint64(n25))
		i--
		dAtA[i] = 0x32
	}
	if m.WorkflowRunTimeout != nil {
		n26, err26 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowRunTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowRunTimeout):])
		if err26 != nil {
			return 0, err26
		}
		i -= n26
		i = encodeVarintMessage(dAtA, i, uint64(n26))
		i--
		dAtA[i] = 0x2a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewExecutionRunId) > 0 {
		i -= len(m.NewExecutionRunId)
		copy(dAtA[i:], m.NewExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewExecutionRunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowTaskScheduledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowTaskScheduledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowTaskScheduledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x18
	}
	if m.StartToCloseTimeout != nil {
		n30, err30 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.StartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout):])
		if err30 != nil {
			return 0, err30
		}
		i -= n30
		i = encodeVarintMessage(dAtA, i, uint64(n30))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowTaskStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowTaskStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowTaskStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowTaskCompletedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowTaskCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowTaskCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowTaskTimedOutEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowTaskTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowTaskTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimeoutType))
		i--
		dAtA[i] = 0x18
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowTaskFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ForkEventVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ForkEventVersion))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NewRunId) > 0 {
		i -= len(m.NewRunId)
		copy(dAtA[i:], m.NewRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewRunId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BaseRunId) > 0 {
		i -= len(m.BaseRunId)
		copy(dAtA[i:], m.BaseRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BaseRunId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Cause != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x18
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskScheduledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskScheduledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskScheduledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x58
	}
	if m.HeartbeatTimeout != nil {
		n34, err34 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.HeartbeatTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatTimeout):])
		if err34 != nil {
			return 0, err34
		}
		i -= n34
		i = encodeVarintMessage(dAtA, i, uint64(n34))
		i--
		dAtA[i] = 0x52
	}
	if m.StartToCloseTimeout != nil {
		n35, err35 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.StartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout):])
		if err35 != nil {
			return 0, err35
		}
		i -= n35
		i = encodeVarintMessage(dAtA, i, uint64(n35))
		i--
		dAtA[i] = 0x4a
	}
	if m.ScheduleToStartTimeout != nil {
		n36, err36 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToStartTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout):])
		if err36 != nil {
			return 0, err36
		}
		i -= n36
		i = encodeVarintMessage(dAtA, i, uint64(n36))
		i--
		dAtA[i] = 0x42
	}
	if m.ScheduleToCloseTimeout != nil {
		n37, err37 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToCloseTimeout):])
		if err37 != nil {
			return 0, err37
		}
		i -= n37
		i = encodeVarintMessage(dAtA, i, uint64(n37))
		i--
		dAtA[i] = 0x3a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastFailure != nil {
		{
			size, err := m.LastFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskCompletedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryState))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskTimedOutEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryState))
		i--
		dAtA[i] = 0x20
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskCancelRequestedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskCanceledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.LatestCancelRequestedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LatestCancelRequestedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.StartToFireTimeout != nil {
		n47, err47 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.StartToFireTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToFireTimeout):])
		if err47 != nil {
			return 0, err47
		}
		i -= n47
		i = encodeVarintMessage(dAtA, i, uint64(n47))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerFiredEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerFiredEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerFiredEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerCanceledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.ExternalWorkflowExecution != nil {
		{
			size, err := m.ExternalWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExternalInitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExternalInitiatedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cause) > 0 {
		i -= len(m.Cause)
		copy(dAtA[i:], m.Cause)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Cause)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionCanceledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarkerRecordedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkerRecordedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkerRecordedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Details) > 0 {
		for k := range m.Details {
			v := m.Details[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarkerName) > 0 {
		i -= len(m.MarkerName)
		copy(dAtA[i:], m.MarkerName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MarkerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionSignaledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionSignaledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionSignaledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionTerminatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionTerminatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionTerminatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Cause != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Cause != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x72
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.WorkflowIdReusePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowIdReusePolicy))
		i--
		dAtA[i] = 0x60
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x52
	}
	if m.ParentClosePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x48
	}
	if m.WorkflowTaskTimeout != nil {
		n69, err69 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowTaskTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowTaskTimeout):])
		if err69 != nil {
			return 0, err69
		}
		i -= n69
		i = encodeVarintMessage(dAtA, i, uint64(n69))
		i--
		dAtA[i] = 0x42
	}
	if m.WorkflowRunTimeout != nil {
		n70, err70 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowRunTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowRunTimeout):])
		if err70 != nil {
			return 0, err70
		}
		i -= n70
		i = encodeVarintMessage(dAtA, i, uint64(n70))
		i--
		dAtA[i] = 0x3a
	}
	if m.WorkflowExecutionTimeout != nil {
		n71, err71 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowExecutionTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionTimeout):])
		if err71 != nil {
			return 0, err71
		}
		i -= n71
		i = encodeVarintMessage(dAtA, i, uint64(n71))
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkflowTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskCompletedEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Cause != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryState))
		i--
		dAtA[i] = 0x38
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryState))
		i--
		dAtA[i] = 0x30
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x28
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.EventType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x18
	}
	if m.EventTime != nil {
		n92, err92 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EventTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EventTime):])
		if err92 != nil {
			return 0, err92
		}
		i -= n92
		i = encodeVarintMessage(dAtA, i, uint64(n92))
		i--
		dAtA[i] = 0x12
	}
	if m.EventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HistoryEvent_WorkflowExecutionStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionStartedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionCompletedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionCompletedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionTimedOutEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionTimedOutEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowTaskScheduledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowTaskScheduledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowTaskScheduledEventAttributes != nil {
		{
			size, err := m.WorkflowTaskScheduledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowTaskStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowTaskStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowTaskStartedEventAttributes != nil {
		{
			size, err := m.WorkflowTaskStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowTaskCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowTaskCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowTaskCompletedEventAttributes != nil {
		{
			size, err := m.WorkflowTaskCompletedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowTaskTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowTaskTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowTaskTimedOutEventAttributes != nil {
		{
			size, err := m.WorkflowTaskTimedOutEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowTaskFailedEventAttributes != nil {
		{
			size, err := m.WorkflowTaskFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskScheduledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskScheduledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskScheduledEventAttributes != nil {
		{
			size, err := m.ActivityTaskScheduledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskStartedEventAttributes != nil {
		{
			size, err := m.ActivityTaskStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskCompletedEventAttributes != nil {
		{
			size, err := m.ActivityTaskCompletedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskFailedEventAttributes != nil {
		{
			size, err := m.ActivityTaskFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskTimedOutEventAttributes != nil {
		{
			size, err := m.ActivityTaskTimedOutEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_TimerStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_TimerStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimerStartedEventAttributes != nil {
		{
			size, err := m.TimerStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_TimerFiredEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_TimerFiredEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimerFiredEventAttributes != nil {
		{
			size, err := m.TimerFiredEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskCancelRequestedEventAttributes != nil {
		{
			size, err := m.ActivityTaskCancelRequestedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskCanceledEventAttributes != nil {
		{
			size, err := m.ActivityTaskCanceledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_TimerCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_TimerCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimerCanceledEventAttributes != nil {
		{
			size, err := m.TimerCanceledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_MarkerRecordedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_MarkerRecordedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MarkerRecordedEventAttributes != nil {
		{
			size, err := m.MarkerRecordedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionSignaledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionSignaledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionSignaledEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionSignaledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionTerminatedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionTerminatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionCancelRequestedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionCancelRequestedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionCanceledEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionCanceledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes != nil {
		{
			size, err := m.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelExternalWorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.RequestCancelExternalWorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExternalWorkflowExecutionCancelRequestedEventAttributes != nil {
		{
			size, err := m.ExternalWorkflowExecutionCancelRequestedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionContinuedAsNewEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionContinuedAsNewEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartChildWorkflowExecutionInitiatedEventAttributes != nil {
		{
			size, err := m.StartChildWorkflowExecutionInitiatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartChildWorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.StartChildWorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionStartedEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionCompletedEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionCompletedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionCanceledEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionCanceledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionTimedOutEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionTimedOutEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionTerminatedEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionTerminatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalExternalWorkflowExecutionInitiatedEventAttributes != nil {
		{
			size, err := m.SignalExternalWorkflowExecutionInitiatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalExternalWorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.SignalExternalWorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExternalWorkflowExecutionSignaledEventAttributes != nil {
		{
			size, err := m.ExternalWorkflowExecutionSignaledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpsertWorkflowSearchAttributesEventAttributes != nil {
		{
			size, err := m.UpsertWorkflowSearchAttributesEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *History) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecutionStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ParentWorkflowNamespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ParentWorkflowExecution != nil {
		l = m.ParentWorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ParentInitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.ParentInitiatedEventId))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecutionTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowRunTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowRunTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowTaskTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowTaskTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ContinuedExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Initiator != 0 {
		n += 1 + sovMessage(uint64(m.Initiator))
	}
	if m.ContinuedFailure != nil {
		l = m.ContinuedFailure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastCompletionResult != nil {
		l = m.LastCompletionResult.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.OriginalExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.FirstExecutionRunId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Attempt != 0 {
		n += 2 + sovMessage(uint64(m.Attempt))
	}
	if m.WorkflowExecutionExpirationTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.WorkflowExecutionExpirationTime)
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.FirstWorkflowTaskBackoff != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.FirstWorkflowTaskBackoff)
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.PrevAutoResetPoints != nil {
		l = m.PrevAutoResetPoints.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	l = len(m.NewExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RetryState != 0 {
		n += 1 + sovMessage(uint64(m.RetryState))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	l = len(m.NewExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetryState != 0 {
		n += 1 + sovMessage(uint64(m.RetryState))
	}
	l = len(m.NewExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowRunTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowRunTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowTaskTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowTaskTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	if m.BackoffStartInterval != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.BackoffStartInterval)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Initiator != 0 {
		n += 1 + sovMessage(uint64(m.Initiator))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastCompletionResult != nil {
		l = m.LastCompletionResult.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowTaskScheduledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovMessage(uint64(m.Attempt))
	}
	return n
}

func (m *WorkflowTaskStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowTaskCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowTaskTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.TimeoutType != 0 {
		n += 1 + sovMessage(uint64(m.TimeoutType))
	}
	return n
}

func (m *WorkflowTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.Cause != 0 {
		n += 1 + sovMessage(uint64(m.Cause))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BaseRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NewRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ForkEventVersion != 0 {
		n += 1 + sovMessage(uint64(m.ForkEventVersion))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskScheduledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToCloseTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleToStartTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.HeartbeatTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovMessage(uint64(m.Attempt))
	}
	if m.LastFailure != nil {
		l = m.LastFailure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RetryState != 0 {
		n += 1 + sovMessage(uint64(m.RetryState))
	}
	return n
}

func (m *ActivityTaskTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.RetryState != 0 {
		n += 1 + sovMessage(uint64(m.RetryState))
	}
	return n
}

func (m *ActivityTaskCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	return n
}

func (m *ActivityTaskCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LatestCancelRequestedEventId != 0 {
		n += 1 + sovMessage(uint64(m.LatestCancelRequestedEventId))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TimerStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartToFireTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToFireTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	return n
}

func (m *TimerFiredEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *TimerCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cause)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExternalInitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.ExternalInitiatedEventId))
	}
	if m.ExternalWorkflowExecution != nil {
		l = m.ExternalWorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *MarkerRecordedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarkerName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Details) > 0 {
		for k, v := range m.Details {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionSignaledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionTerminatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cause != 0 {
		n += 1 + sovMessage(uint64(m.Cause))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cause != 0 {
		n += 1 + sovMessage(uint64(m.Cause))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecutionTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowRunTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowRunTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowTaskTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowTaskTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovMessage(uint64(m.ParentClosePolicy))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	if m.WorkflowIdReusePolicy != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowIdReusePolicy))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovMessage(uint64(m.Cause))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.WorkflowTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskCompletedEventId))
	}
	return n
}

func (m *ChildWorkflowExecutionStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *ChildWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.RetryState != 0 {
		n += 1 + sovMessage(uint64(m.RetryState))
	}
	return n
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.RetryState != 0 {
		n += 1 + sovMessage(uint64(m.RetryState))
	}
	return n
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *HistoryEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMessage(uint64(m.EventId))
	}
	if m.EventTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EventTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.EventType != 0 {
		n += 1 + sovMessage(uint64(m.EventType))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.TaskId != 0 {
		n += 1 + sovMessage(uint64(m.TaskId))
	}
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	return n
}

func (m *HistoryEvent_WorkflowExecutionStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionStartedEventAttributes != nil {
		l = m.WorkflowExecutionStartedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionCompletedEventAttributes != nil {
		l = m.WorkflowExecutionCompletedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionFailedEventAttributes != nil {
		l = m.WorkflowExecutionFailedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionTimedOutEventAttributes != nil {
		l = m.WorkflowExecutionTimedOutEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowTaskScheduledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskScheduledEventAttributes != nil {
		l = m.WorkflowTaskScheduledEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowTaskStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskStartedEventAttributes != nil {
		l = m.WorkflowTaskStartedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowTaskCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskCompletedEventAttributes != nil {
		l = m.WorkflowTaskCompletedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowTaskTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskTimedOutEventAttributes != nil {
		l = m.WorkflowTaskTimedOutEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowTaskFailedEventAttributes != nil {
		l = m.WorkflowTaskFailedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskScheduledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskScheduledEventAttributes != nil {
		l = m.ActivityTaskScheduledEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskStartedEventAttributes != nil {
		l = m.ActivityTaskStartedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskCompletedEventAttributes != nil {
		l = m.ActivityTaskCompletedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskFailedEventAttributes != nil {
		l = m.ActivityTaskFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskTimedOutEventAttributes != nil {
		l = m.ActivityTaskTimedOutEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_TimerStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimerStartedEventAttributes != nil {
		l = m.TimerStartedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_TimerFiredEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimerFiredEventAttributes != nil {
		l = m.TimerFiredEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskCancelRequestedEventAttributes != nil {
		l = m.ActivityTaskCancelRequestedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskCanceledEventAttributes != nil {
		l = m.ActivityTaskCanceledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_TimerCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimerCanceledEventAttributes != nil {
		l = m.TimerCanceledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_MarkerRecordedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarkerRecordedEventAttributes != nil {
		l = m.MarkerRecordedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionSignaledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionSignaledEventAttributes != nil {
		l = m.WorkflowExecutionSignaledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionTerminatedEventAttributes != nil {
		l = m.WorkflowExecutionTerminatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionCancelRequestedEventAttributes != nil {
		l = m.WorkflowExecutionCancelRequestedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionCanceledEventAttributes != nil {
		l = m.WorkflowExecutionCanceledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes != nil {
		l = m.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelExternalWorkflowExecutionFailedEventAttributes != nil {
		l = m.RequestCancelExternalWorkflowExecutionFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalWorkflowExecutionCancelRequestedEventAttributes != nil {
		l = m.ExternalWorkflowExecutionCancelRequestedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionContinuedAsNewEventAttributes != nil {
		l = m.WorkflowExecutionContinuedAsNewEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartChildWorkflowExecutionInitiatedEventAttributes != nil {
		l = m.StartChildWorkflowExecutionInitiatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartChildWorkflowExecutionFailedEventAttributes != nil {
		l = m.StartChildWorkflowExecutionFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionStartedEventAttributes != nil {
		l = m.ChildWorkflowExecutionStartedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionCompletedEventAttributes != nil {
		l = m.ChildWorkflowExecutionCompletedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionFailedEventAttributes != nil {
		l = m.ChildWorkflowExecutionFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionCanceledEventAttributes != nil {
		l = m.ChildWorkflowExecutionCanceledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionTimedOutEventAttributes != nil {
		l = m.ChildWorkflowExecutionTimedOutEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionTerminatedEventAttributes != nil {
		l = m.ChildWorkflowExecutionTerminatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalExternalWorkflowExecutionInitiatedEventAttributes != nil {
		l = m.SignalExternalWorkflowExecutionInitiatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalExternalWorkflowExecutionFailedEventAttributes != nil {
		l = m.SignalExternalWorkflowExecutionFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalWorkflowExecutionSignaledEventAttributes != nil {
		l = m.ExternalWorkflowExecutionSignaledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpsertWorkflowSearchAttributesEventAttributes != nil {
		l = m.UpsertWorkflowSearchAttributesEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *History) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WorkflowExecutionStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionStartedEventAttributes{`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`ParentWorkflowNamespace:` + fmt.Sprintf("%v", this.ParentWorkflowNamespace) + `,`,
		`ParentWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.ParentWorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`ParentInitiatedEventId:` + fmt.Sprintf("%v", this.ParentInitiatedEventId) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v11.TaskQueue", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`WorkflowExecutionTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowRunTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowRunTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowTaskTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskTimeout), "Duration", "types.Duration", 1) + `,`,
		`ContinuedExecutionRunId:` + fmt.Sprintf("%v", this.ContinuedExecutionRunId) + `,`,
		`Initiator:` + fmt.Sprintf("%v", this.Initiator) + `,`,
		`ContinuedFailure:` + strings.Replace(fmt.Sprintf("%v", this.ContinuedFailure), "Failure", "v13.Failure", 1) + `,`,
		`LastCompletionResult:` + strings.Replace(fmt.Sprintf("%v", this.LastCompletionResult), "Payloads", "v1.Payloads", 1) + `,`,
		`OriginalExecutionRunId:` + fmt.Sprintf("%v", this.OriginalExecutionRunId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`FirstExecutionRunId:` + fmt.Sprintf("%v", this.FirstExecutionRunId) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "v1.RetryPolicy", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`WorkflowExecutionExpirationTime:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionExpirationTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`FirstWorkflowTaskBackoff:` + strings.Replace(fmt.Sprintf("%v", this.FirstWorkflowTaskBackoff), "Duration", "types.Duration", 1) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "v1.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "v1.SearchAttributes", 1) + `,`,
		`PrevAutoResetPoints:` + strings.Replace(fmt.Sprintf("%v", this.PrevAutoResetPoints), "ResetPoints", "v14.ResetPoints", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionCompletedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionCompletedEventAttributes{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payloads", "v1.Payloads", 1) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`NewExecutionRunId:` + fmt.Sprintf("%v", this.NewExecutionRunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionFailedEventAttributes{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v13.Failure", 1) + `,`,
		`RetryState:` + fmt.Sprintf("%v", this.RetryState) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`NewExecutionRunId:` + fmt.Sprintf("%v", this.NewExecutionRunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionTimedOutEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionTimedOutEventAttributes{`,
		`RetryState:` + fmt.Sprintf("%v", this.RetryState) + `,`,
		`NewExecutionRunId:` + fmt.Sprintf("%v", this.NewExecutionRunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionContinuedAsNewEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionContinuedAsNewEventAttributes{`,
		`NewExecutionRunId:` + fmt.Sprintf("%v", this.NewExecutionRunId) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v11.TaskQueue", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`WorkflowRunTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowRunTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowTaskTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`BackoffStartInterval:` + strings.Replace(fmt.Sprintf("%v", this.BackoffStartInterval), "Duration", "types.Duration", 1) + `,`,
		`Initiator:` + fmt.Sprintf("%v", this.Initiator) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v13.Failure", 1) + `,`,
		`LastCompletionResult:` + strings.Replace(fmt.Sprintf("%v", this.LastCompletionResult), "Payloads", "v1.Payloads", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "v1.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "v1.SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowTaskScheduledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowTaskScheduledEventAttributes{`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v11.TaskQueue", 1) + `,`,
		`StartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowTaskStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowTaskStartedEventAttributes{`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowTaskCompletedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowTaskCompletedEventAttributes{`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowTaskTimedOutEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowTaskTimedOutEventAttributes{`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`TimeoutType:` + fmt.Sprintf("%v", this.TimeoutType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowTaskFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowTaskFailedEventAttributes{`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v13.Failure", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`BaseRunId:` + fmt.Sprintf("%v", this.BaseRunId) + `,`,
		`NewRunId:` + fmt.Sprintf("%v", this.NewRunId) + `,`,
		`ForkEventVersion:` + fmt.Sprintf("%v", this.ForkEventVersion) + `,`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTaskScheduledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTaskScheduledEventAttributes{`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "v1.ActivityType", 1) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v11.TaskQueue", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`ScheduleToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`ScheduleToStartTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToStartTimeout), "Duration", "types.Duration", 1) + `,`,
		`StartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`HeartbeatTimeout:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "v1.RetryPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTaskStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTaskStartedEventAttributes{`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`LastFailure:` + strings.Replace(fmt.Sprintf("%v", this.LastFailure), "Failure", "v13.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTaskCompletedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTaskCompletedEventAttributes{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payloads", "v1.Payloads", 1) + `,`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTaskFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTaskFailedEventAttributes{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v13.Failure", 1) + `,`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RetryState:` + fmt.Sprintf("%v", this.RetryState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTaskTimedOutEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTaskTimedOutEventAttributes{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v13.Failure", 1) + `,`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`RetryState:` + fmt.Sprintf("%v", this.RetryState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTaskCancelRequestedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTaskCancelRequestedEventAttributes{`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTaskCanceledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTaskCanceledEventAttributes{`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v1.Payloads", 1) + `,`,
		`LatestCancelRequestedEventId:` + fmt.Sprintf("%v", this.LatestCancelRequestedEventId) + `,`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimerStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimerStartedEventAttributes{`,
		`TimerId:` + fmt.Sprintf("%v", this.TimerId) + `,`,
		`StartToFireTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToFireTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimerFiredEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimerFiredEventAttributes{`,
		`TimerId:` + fmt.Sprintf("%v", this.TimerId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimerCanceledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimerCanceledEventAttributes{`,
		`TimerId:` + fmt.Sprintf("%v", this.TimerId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionCancelRequestedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionCancelRequestedEventAttributes{`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`ExternalInitiatedEventId:` + fmt.Sprintf("%v", this.ExternalInitiatedEventId) + `,`,
		`ExternalWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.ExternalWorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionCanceledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionCanceledEventAttributes{`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v1.Payloads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkerRecordedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	keysForDetails := make([]string, 0, len(this.Details))
	for k, _ := range this.Details {
		keysForDetails = append(keysForDetails, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetails)
	mapStringForDetails := "map[string]*v1.Payloads{"
	for _, k := range keysForDetails {
		mapStringForDetails += fmt.Sprintf("%v: %v,", k, this.Details[k])
	}
	mapStringForDetails += "}"
	s := strings.Join([]string{`&MarkerRecordedEventAttributes{`,
		`MarkerName:` + fmt.Sprintf("%v", this.MarkerName) + `,`,
		`Details:` + mapStringForDetails + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v13.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionSignaledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionSignaledEventAttributes{`,
		`SignalName:` + fmt.Sprintf("%v", this.SignalName) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionTerminatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionTerminatedEventAttributes{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v1.Payloads", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`ChildWorkflowOnly:` + fmt.Sprintf("%v", this.ChildWorkflowOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelExternalWorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelExternalWorkflowExecutionFailedEventAttributes{`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExternalWorkflowExecutionCancelRequestedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExternalWorkflowExecutionCancelRequestedEventAttributes{`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalExternalWorkflowExecutionInitiatedEventAttributes{`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`SignalName:` + fmt.Sprintf("%v", this.SignalName) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`ChildWorkflowOnly:` + fmt.Sprintf("%v", this.ChildWorkflowOnly) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalExternalWorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalExternalWorkflowExecutionFailedEventAttributes{`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExternalWorkflowExecutionSignaledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExternalWorkflowExecutionSignaledEventAttributes{`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertWorkflowSearchAttributesEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertWorkflowSearchAttributesEventAttributes{`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "v1.SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartChildWorkflowExecutionInitiatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartChildWorkflowExecutionInitiatedEventAttributes{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v11.TaskQueue", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`WorkflowExecutionTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowRunTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowRunTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowTaskTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskTimeout), "Duration", "types.Duration", 1) + `,`,
		`ParentClosePolicy:` + fmt.Sprintf("%v", this.ParentClosePolicy) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`WorkflowIdReusePolicy:` + fmt.Sprintf("%v", this.WorkflowIdReusePolicy) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "v1.RetryPolicy", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "v1.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "v1.SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartChildWorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartChildWorkflowExecutionFailedEventAttributes{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`WorkflowTaskCompletedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskCompletedEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowExecutionStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowExecutionStartedEventAttributes{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowExecutionCompletedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowExecutionCompletedEventAttributes{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payloads", "v1.Payloads", 1) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowExecutionFailedEventAttributes{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v13.Failure", 1) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`RetryState:` + fmt.Sprintf("%v", this.RetryState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowExecutionCanceledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowExecutionCanceledEventAttributes{`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v1.Payloads", 1) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowExecutionTimedOutEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowExecutionTimedOutEventAttributes{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`RetryState:` + fmt.Sprintf("%v", this.RetryState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowExecutionTerminatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowExecutionTerminatedEventAttributes{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`InitiatedEventId:` + fmt.Sprintf("%v", this.InitiatedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent{`,
		`EventId:` + fmt.Sprintf("%v", this.EventId) + `,`,
		`EventTime:` + strings.Replace(fmt.Sprintf("%v", this.EventTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionStartedEventAttributes{`,
		`WorkflowExecutionStartedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionStartedEventAttributes), "WorkflowExecutionStartedEventAttributes", "WorkflowExecutionStartedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionCompletedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionCompletedEventAttributes{`,
		`WorkflowExecutionCompletedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionCompletedEventAttributes), "WorkflowExecutionCompletedEventAttributes", "WorkflowExecutionCompletedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionFailedEventAttributes{`,
		`WorkflowExecutionFailedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionFailedEventAttributes), "WorkflowExecutionFailedEventAttributes", "WorkflowExecutionFailedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionTimedOutEventAttributes{`,
		`WorkflowExecutionTimedOutEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTimedOutEventAttributes), "WorkflowExecutionTimedOutEventAttributes", "WorkflowExecutionTimedOutEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowTaskScheduledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowTaskScheduledEventAttributes{`,
		`WorkflowTaskScheduledEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskScheduledEventAttributes), "WorkflowTaskScheduledEventAttributes", "WorkflowTaskScheduledEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowTaskStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowTaskStartedEventAttributes{`,
		`WorkflowTaskStartedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskStartedEventAttributes), "WorkflowTaskStartedEventAttributes", "WorkflowTaskStartedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowTaskCompletedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowTaskCompletedEventAttributes{`,
		`WorkflowTaskCompletedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskCompletedEventAttributes), "WorkflowTaskCompletedEventAttributes", "WorkflowTaskCompletedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowTaskTimedOutEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowTaskTimedOutEventAttributes{`,
		`WorkflowTaskTimedOutEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskTimedOutEventAttributes), "WorkflowTaskTimedOutEventAttributes", "WorkflowTaskTimedOutEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowTaskFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowTaskFailedEventAttributes{`,
		`WorkflowTaskFailedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskFailedEventAttributes), "WorkflowTaskFailedEventAttributes", "WorkflowTaskFailedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ActivityTaskScheduledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ActivityTaskScheduledEventAttributes{`,
		`ActivityTaskScheduledEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ActivityTaskScheduledEventAttributes), "ActivityTaskScheduledEventAttributes", "ActivityTaskScheduledEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ActivityTaskStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ActivityTaskStartedEventAttributes{`,
		`ActivityTaskStartedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ActivityTaskStartedEventAttributes), "ActivityTaskStartedEventAttributes", "ActivityTaskStartedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ActivityTaskCompletedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ActivityTaskCompletedEventAttributes{`,
		`ActivityTaskCompletedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ActivityTaskCompletedEventAttributes), "ActivityTaskCompletedEventAttributes", "ActivityTaskCompletedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ActivityTaskFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ActivityTaskFailedEventAttributes{`,
		`ActivityTaskFailedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ActivityTaskFailedEventAttributes), "ActivityTaskFailedEventAttributes", "ActivityTaskFailedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ActivityTaskTimedOutEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ActivityTaskTimedOutEventAttributes{`,
		`ActivityTaskTimedOutEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ActivityTaskTimedOutEventAttributes), "ActivityTaskTimedOutEventAttributes", "ActivityTaskTimedOutEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_TimerStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_TimerStartedEventAttributes{`,
		`TimerStartedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.TimerStartedEventAttributes), "TimerStartedEventAttributes", "TimerStartedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_TimerFiredEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_TimerFiredEventAttributes{`,
		`TimerFiredEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.TimerFiredEventAttributes), "TimerFiredEventAttributes", "TimerFiredEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ActivityTaskCancelRequestedEventAttributes{`,
		`ActivityTaskCancelRequestedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ActivityTaskCancelRequestedEventAttributes), "ActivityTaskCancelRequestedEventAttributes", "ActivityTaskCancelRequestedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ActivityTaskCanceledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ActivityTaskCanceledEventAttributes{`,
		`ActivityTaskCanceledEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ActivityTaskCanceledEventAttributes), "ActivityTaskCanceledEventAttributes", "ActivityTaskCanceledEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_TimerCanceledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_TimerCanceledEventAttributes{`,
		`TimerCanceledEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.TimerCanceledEventAttributes), "TimerCanceledEventAttributes", "TimerCanceledEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_MarkerRecordedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_MarkerRecordedEventAttributes{`,
		`MarkerRecordedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.MarkerRecordedEventAttributes), "MarkerRecordedEventAttributes", "MarkerRecordedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionSignaledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionSignaledEventAttributes{`,
		`WorkflowExecutionSignaledEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionSignaledEventAttributes), "WorkflowExecutionSignaledEventAttributes", "WorkflowExecutionSignaledEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionTerminatedEventAttributes{`,
		`WorkflowExecutionTerminatedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTerminatedEventAttributes), "WorkflowExecutionTerminatedEventAttributes", "WorkflowExecutionTerminatedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes{`,
		`WorkflowExecutionCancelRequestedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionCancelRequestedEventAttributes), "WorkflowExecutionCancelRequestedEventAttributes", "WorkflowExecutionCancelRequestedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionCanceledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionCanceledEventAttributes{`,
		`WorkflowExecutionCanceledEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionCanceledEventAttributes), "WorkflowExecutionCanceledEventAttributes", "WorkflowExecutionCanceledEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{`,
		`RequestCancelExternalWorkflowExecutionInitiatedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes), "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes", "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes{`,
		`RequestCancelExternalWorkflowExecutionFailedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RequestCancelExternalWorkflowExecutionFailedEventAttributes), "RequestCancelExternalWorkflowExecutionFailedEventAttributes", "RequestCancelExternalWorkflowExecutionFailedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes{`,
		`ExternalWorkflowExecutionCancelRequestedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ExternalWorkflowExecutionCancelRequestedEventAttributes), "ExternalWorkflowExecutionCancelRequestedEventAttributes", "ExternalWorkflowExecutionCancelRequestedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes{`,
		`WorkflowExecutionContinuedAsNewEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionContinuedAsNewEventAttributes), "WorkflowExecutionContinuedAsNewEventAttributes", "WorkflowExecutionContinuedAsNewEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes{`,
		`StartChildWorkflowExecutionInitiatedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.StartChildWorkflowExecutionInitiatedEventAttributes), "StartChildWorkflowExecutionInitiatedEventAttributes", "StartChildWorkflowExecutionInitiatedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes{`,
		`StartChildWorkflowExecutionFailedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.StartChildWorkflowExecutionFailedEventAttributes), "StartChildWorkflowExecutionFailedEventAttributes", "StartChildWorkflowExecutionFailedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ChildWorkflowExecutionStartedEventAttributes{`,
		`ChildWorkflowExecutionStartedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ChildWorkflowExecutionStartedEventAttributes), "ChildWorkflowExecutionStartedEventAttributes", "ChildWorkflowExecutionStartedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes{`,
		`ChildWorkflowExecutionCompletedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ChildWorkflowExecutionCompletedEventAttributes), "ChildWorkflowExecutionCompletedEventAttributes", "ChildWorkflowExecutionCompletedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ChildWorkflowExecutionFailedEventAttributes{`,
		`ChildWorkflowExecutionFailedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ChildWorkflowExecutionFailedEventAttributes), "ChildWorkflowExecutionFailedEventAttributes", "ChildWorkflowExecutionFailedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes{`,
		`ChildWorkflowExecutionCanceledEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ChildWorkflowExecutionCanceledEventAttributes), "ChildWorkflowExecutionCanceledEventAttributes", "ChildWorkflowExecutionCanceledEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes{`,
		`ChildWorkflowExecutionTimedOutEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ChildWorkflowExecutionTimedOutEventAttributes), "ChildWorkflowExecutionTimedOutEventAttributes", "ChildWorkflowExecutionTimedOutEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes{`,
		`ChildWorkflowExecutionTerminatedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ChildWorkflowExecutionTerminatedEventAttributes), "ChildWorkflowExecutionTerminatedEventAttributes", "ChildWorkflowExecutionTerminatedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes{`,
		`SignalExternalWorkflowExecutionInitiatedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SignalExternalWorkflowExecutionInitiatedEventAttributes), "SignalExternalWorkflowExecutionInitiatedEventAttributes", "SignalExternalWorkflowExecutionInitiatedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes{`,
		`SignalExternalWorkflowExecutionFailedEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SignalExternalWorkflowExecutionFailedEventAttributes), "SignalExternalWorkflowExecutionFailedEventAttributes", "SignalExternalWorkflowExecutionFailedEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes{`,
		`ExternalWorkflowExecutionSignaledEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ExternalWorkflowExecutionSignaledEventAttributes), "ExternalWorkflowExecutionSignaledEventAttributes", "ExternalWorkflowExecutionSignaledEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes{`,
		`UpsertWorkflowSearchAttributesEventAttributes:` + strings.Replace(fmt.Sprintf("%v", this.UpsertWorkflowSearchAttributesEventAttributes), "UpsertWorkflowSearchAttributesEventAttributes", "UpsertWorkflowSearchAttributesEventAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *History) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*HistoryEvent{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(f.String(), "HistoryEvent", "HistoryEvent", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&History{`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WorkflowExecutionStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentWorkflowNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentWorkflowNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentWorkflowExecution == nil {
				m.ParentWorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.ParentWorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentInitiatedEventId", wireType)
			}
			m.ParentInitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentInitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v11.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionTimeout == nil {
				m.WorkflowExecutionTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowExecutionTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowRunTimeout == nil {
				m.WorkflowRunTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowRunTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowTaskTimeout == nil {
				m.WorkflowTaskTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowTaskTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuedExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContinuedExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			m.Initiator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Initiator |= v12.ContinueAsNewInitiator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuedFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContinuedFailure == nil {
				m.ContinuedFailure = &v13.Failure{}
			}
			if err := m.ContinuedFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = &v1.Payloads{}
			}
			if err := m.LastCompletionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &v1.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionExpirationTime == nil {
				m.WorkflowExecutionExpirationTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.WorkflowExecutionExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstWorkflowTaskBackoff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstWorkflowTaskBackoff == nil {
				m.FirstWorkflowTaskBackoff = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.FirstWorkflowTaskBackoff, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &v1.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &v1.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevAutoResetPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevAutoResetPoints == nil {
				m.PrevAutoResetPoints = &v14.ResetPoints{}
			}
			if err := m.PrevAutoResetPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionCompletedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionCompletedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionCompletedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.Payloads{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v13.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryState", wireType)
			}
			m.RetryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryState |= v12.RetryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionTimedOutEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionTimedOutEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionTimedOutEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryState", wireType)
			}
			m.RetryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryState |= v12.RetryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionContinuedAsNewEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionContinuedAsNewEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v11.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowRunTimeout == nil {
				m.WorkflowRunTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowRunTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowTaskTimeout == nil {
				m.WorkflowTaskTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowTaskTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackoffStartInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackoffStartInterval == nil {
				m.BackoffStartInterval = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.BackoffStartInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			m.Initiator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Initiator |= v12.ContinueAsNewInitiator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v13.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = &v1.Payloads{}
			}
			if err := m.LastCompletionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &v1.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &v1.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowTaskScheduledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowTaskScheduledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowTaskScheduledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v11.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToCloseTimeout == nil {
				m.StartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.StartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowTaskStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowTaskStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowTaskStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowTaskCompletedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowTaskCompletedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowTaskCompletedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowTaskTimedOutEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowTaskTimedOutEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowTaskTimedOutEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutType", wireType)
			}
			m.TimeoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutType |= v12.TimeoutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowTaskFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowTaskFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowTaskFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= v12.WorkflowTaskFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v13.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkEventVersion", wireType)
			}
			m.ForkEventVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForkEventVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskScheduledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskScheduledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskScheduledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &v1.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v11.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToCloseTimeout == nil {
				m.ScheduleToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToStartTimeout == nil {
				m.ScheduleToStartTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToStartTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToCloseTimeout == nil {
				m.StartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.StartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatTimeout == nil {
				m.HeartbeatTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.HeartbeatTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &v1.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailure == nil {
				m.LastFailure = &v13.Failure{}
			}
			if err := m.LastFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskCompletedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskCompletedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskCompletedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.Payloads{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v13.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryState", wireType)
			}
			m.RetryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryState |= v12.RetryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskTimedOutEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskTimedOutEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskTimedOutEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v13.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryState", wireType)
			}
			m.RetryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryState |= v12.RetryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskCancelRequestedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskCancelRequestedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskCancelRequestedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskCanceledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskCanceledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskCanceledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v1.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCancelRequestedEventId", wireType)
			}
			m.LatestCancelRequestedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestCancelRequestedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToFireTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToFireTimeout == nil {
				m.StartToFireTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.StartToFireTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerFiredEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerFiredEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerFiredEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerCanceledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerCanceledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerCanceledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionCancelRequestedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionCancelRequestedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalInitiatedEventId", wireType)
			}
			m.ExternalInitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalInitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalWorkflowExecution == nil {
				m.ExternalWorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.ExternalWorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionCanceledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionCanceledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionCanceledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v1.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkerRecordedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkerRecordedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkerRecordedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = make(map[string]*v1.Payloads)
			}
			var mapkey string
			var mapvalue *v1.Payloads
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &v1.Payloads{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Details[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v13.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionSignaledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionSignaledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionSignaledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionTerminatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionTerminatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionTerminatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v1.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= v12.CancelExternalWorkflowExecutionFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalWorkflowExecutionCancelRequestedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalWorkflowExecutionCancelRequestedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionInitiatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionInitiatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= v12.SignalExternalWorkflowExecutionFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalWorkflowExecutionSignaledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalWorkflowExecutionSignaledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &v1.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionInitiatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionInitiatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v11.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionTimeout == nil {
				m.WorkflowExecutionTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowExecutionTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowRunTimeout == nil {
				m.WorkflowRunTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowRunTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowTaskTimeout == nil {
				m.WorkflowTaskTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowTaskTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= v12.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIdReusePolicy", wireType)
			}
			m.WorkflowIdReusePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowIdReusePolicy |= v12.WorkflowIdReusePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &v1.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &v1.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &v1.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= v12.StartChildWorkflowExecutionFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventId", wireType)
			}
			m.WorkflowTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionCompletedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionCompletedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.Payloads{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v13.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryState", wireType)
			}
			m.RetryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryState |= v12.RetryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionCanceledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionCanceledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v1.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionTimedOutEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionTimedOutEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryState", wireType)
			}
			m.RetryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryState |= v12.RetryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionTerminatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionTerminatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventTime == nil {
				m.EventTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EventTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= v12.EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionStartedEventAttributes{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionCompletedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionCompletedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionCompletedEventAttributes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimedOutEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionTimedOutEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionTimedOutEventAttributes{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskScheduledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowTaskScheduledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowTaskScheduledEventAttributes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowTaskStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowTaskStartedEventAttributes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskCompletedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowTaskCompletedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowTaskCompletedEventAttributes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimedOutEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowTaskTimedOutEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowTaskTimedOutEventAttributes{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowTaskFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowTaskFailedEventAttributes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskScheduledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskScheduledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskScheduledEventAttributes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskStartedEventAttributes{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskCompletedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskCompletedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskCompletedEventAttributes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskFailedEventAttributes{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskTimedOutEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskTimedOutEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskTimedOutEventAttributes{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimerStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_TimerStartedEventAttributes{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerFiredEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimerFiredEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_TimerFiredEventAttributes{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskCancelRequestedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskCancelRequestedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskCancelRequestedEventAttributes{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskCanceledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskCanceledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskCanceledEventAttributes{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerCanceledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimerCanceledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_TimerCanceledEventAttributes{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerRecordedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MarkerRecordedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_MarkerRecordedEventAttributes{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionSignaledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionSignaledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionSignaledEventAttributes{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTerminatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionTerminatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionTerminatedEventAttributes{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionCancelRequestedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionCancelRequestedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionCanceledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionCanceledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionCanceledEventAttributes{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelExternalWorkflowExecutionInitiatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelExternalWorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelExternalWorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalWorkflowExecutionCancelRequestedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExternalWorkflowExecutionCancelRequestedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionContinuedAsNewEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionContinuedAsNewEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartChildWorkflowExecutionInitiatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartChildWorkflowExecutionInitiatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartChildWorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartChildWorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionStartedEventAttributes{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionCompletedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionCompletedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionCanceledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionCanceledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionTimedOutEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionTimedOutEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionTerminatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionTerminatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalExternalWorkflowExecutionInitiatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalExternalWorkflowExecutionInitiatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalExternalWorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalExternalWorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalWorkflowExecutionSignaledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExternalWorkflowExecutionSignaledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpsertWorkflowSearchAttributesEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpsertWorkflowSearchAttributesEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &HistoryEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
