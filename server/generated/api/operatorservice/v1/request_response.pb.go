// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/operatorservice/v1/request_response.proto

package operatorservice

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	v1 "go.temporal.io/api/enums/v1"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddSearchAttributesRequest struct {
	// Mapping between search attribute name and its IndexedValueType.
	SearchAttributes map[string]v1.IndexedValueType `protobuf:"bytes,1,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=temporal.api.enums.v1.IndexedValueType"`
}

func (m *AddSearchAttributesRequest) Reset()      { *m = AddSearchAttributesRequest{} }
func (*AddSearchAttributesRequest) ProtoMessage() {}
func (*AddSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cdd5e82c482041, []int{0}
}
func (m *AddSearchAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSearchAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSearchAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSearchAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSearchAttributesRequest.Merge(m, src)
}
func (m *AddSearchAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddSearchAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSearchAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddSearchAttributesRequest proto.InternalMessageInfo

func (m *AddSearchAttributesRequest) GetSearchAttributes() map[string]v1.IndexedValueType {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type AddSearchAttributesResponse struct {
}

func (m *AddSearchAttributesResponse) Reset()      { *m = AddSearchAttributesResponse{} }
func (*AddSearchAttributesResponse) ProtoMessage() {}
func (*AddSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cdd5e82c482041, []int{1}
}
func (m *AddSearchAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSearchAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSearchAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSearchAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSearchAttributesResponse.Merge(m, src)
}
func (m *AddSearchAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddSearchAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSearchAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddSearchAttributesResponse proto.InternalMessageInfo

type RemoveSearchAttributesRequest struct {
	// Search attribute names to delete.
	SearchAttributes []string `protobuf:"bytes,1,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *RemoveSearchAttributesRequest) Reset()      { *m = RemoveSearchAttributesRequest{} }
func (*RemoveSearchAttributesRequest) ProtoMessage() {}
func (*RemoveSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cdd5e82c482041, []int{2}
}
func (m *RemoveSearchAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveSearchAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveSearchAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveSearchAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveSearchAttributesRequest.Merge(m, src)
}
func (m *RemoveSearchAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveSearchAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveSearchAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveSearchAttributesRequest proto.InternalMessageInfo

func (m *RemoveSearchAttributesRequest) GetSearchAttributes() []string {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type RemoveSearchAttributesResponse struct {
}

func (m *RemoveSearchAttributesResponse) Reset()      { *m = RemoveSearchAttributesResponse{} }
func (*RemoveSearchAttributesResponse) ProtoMessage() {}
func (*RemoveSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cdd5e82c482041, []int{3}
}
func (m *RemoveSearchAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveSearchAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveSearchAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveSearchAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveSearchAttributesResponse.Merge(m, src)
}
func (m *RemoveSearchAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveSearchAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveSearchAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveSearchAttributesResponse proto.InternalMessageInfo

type ListSearchAttributesRequest struct {
}

func (m *ListSearchAttributesRequest) Reset()      { *m = ListSearchAttributesRequest{} }
func (*ListSearchAttributesRequest) ProtoMessage() {}
func (*ListSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cdd5e82c482041, []int{4}
}
func (m *ListSearchAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSearchAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSearchAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSearchAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSearchAttributesRequest.Merge(m, src)
}
func (m *ListSearchAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSearchAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSearchAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSearchAttributesRequest proto.InternalMessageInfo

type ListSearchAttributesResponse struct {
	// Mapping between custom (user-registered) search attribute name to its IndexedValueType.
	CustomAttributes map[string]v1.IndexedValueType `protobuf:"bytes,1,rep,name=custom_attributes,json=customAttributes,proto3" json:"custom_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=temporal.api.enums.v1.IndexedValueType"`
	// Mapping between system (predefined) search attribute name to its IndexedValueType.
	SystemAttributes map[string]v1.IndexedValueType `protobuf:"bytes,2,rep,name=system_attributes,json=systemAttributes,proto3" json:"system_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=temporal.api.enums.v1.IndexedValueType"`
	// Mapping from the attribute name to the visibility storage native type
	StorageSchema map[string]string `protobuf:"bytes,3,rep,name=storage_schema,json=storageSchema,proto3" json:"storage_schema,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ListSearchAttributesResponse) Reset()      { *m = ListSearchAttributesResponse{} }
func (*ListSearchAttributesResponse) ProtoMessage() {}
func (*ListSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cdd5e82c482041, []int{5}
}
func (m *ListSearchAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSearchAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSearchAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSearchAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSearchAttributesResponse.Merge(m, src)
}
func (m *ListSearchAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSearchAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSearchAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSearchAttributesResponse proto.InternalMessageInfo

func (m *ListSearchAttributesResponse) GetCustomAttributes() map[string]v1.IndexedValueType {
	if m != nil {
		return m.CustomAttributes
	}
	return nil
}

func (m *ListSearchAttributesResponse) GetSystemAttributes() map[string]v1.IndexedValueType {
	if m != nil {
		return m.SystemAttributes
	}
	return nil
}

func (m *ListSearchAttributesResponse) GetStorageSchema() map[string]string {
	if m != nil {
		return m.StorageSchema
	}
	return nil
}

func init() {
	proto.RegisterType((*AddSearchAttributesRequest)(nil), "temporal.api.operatorservice.v1.AddSearchAttributesRequest")
	proto.RegisterMapType((map[string]v1.IndexedValueType)(nil), "temporal.api.operatorservice.v1.AddSearchAttributesRequest.SearchAttributesEntry")
	proto.RegisterType((*AddSearchAttributesResponse)(nil), "temporal.api.operatorservice.v1.AddSearchAttributesResponse")
	proto.RegisterType((*RemoveSearchAttributesRequest)(nil), "temporal.api.operatorservice.v1.RemoveSearchAttributesRequest")
	proto.RegisterType((*RemoveSearchAttributesResponse)(nil), "temporal.api.operatorservice.v1.RemoveSearchAttributesResponse")
	proto.RegisterType((*ListSearchAttributesRequest)(nil), "temporal.api.operatorservice.v1.ListSearchAttributesRequest")
	proto.RegisterType((*ListSearchAttributesResponse)(nil), "temporal.api.operatorservice.v1.ListSearchAttributesResponse")
	proto.RegisterMapType((map[string]v1.IndexedValueType)(nil), "temporal.api.operatorservice.v1.ListSearchAttributesResponse.CustomAttributesEntry")
	proto.RegisterMapType((map[string]string)(nil), "temporal.api.operatorservice.v1.ListSearchAttributesResponse.StorageSchemaEntry")
	proto.RegisterMapType((map[string]v1.IndexedValueType)(nil), "temporal.api.operatorservice.v1.ListSearchAttributesResponse.SystemAttributesEntry")
}

func init() {
	proto.RegisterFile("temporal/api/operatorservice/v1/request_response.proto", fileDescriptor_43cdd5e82c482041)
}

var fileDescriptor_43cdd5e82c482041 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xcf, 0xa4, 0xac, 0xd0, 0x11, 0x97, 0xdd, 0xb0, 0x42, 0xe9, 0xda, 0xd9, 0x92, 0x8b, 0x05,
	0x21, 0xa5, 0x2b, 0x8a, 0x44, 0x04, 0xbb, 0xe2, 0x41, 0x58, 0xb0, 0x36, 0x4b, 0x0f, 0x5e, 0x4a,
	0x36, 0x7d, 0xec, 0x06, 0x9b, 0x4c, 0x9c, 0x99, 0x44, 0x7b, 0x91, 0x3d, 0x7b, 0xf2, 0x63, 0x88,
	0x5f, 0xc1, 0x2f, 0xe0, 0xb1, 0xc7, 0x3d, 0xda, 0xf4, 0x22, 0x1e, 0x64, 0x3f, 0x82, 0x64, 0xd2,
	0x4a, 0x9b, 0x3f, 0xf6, 0xa0, 0x7b, 0x0b, 0xef, 0xbd, 0xdf, 0x9f, 0xfc, 0xde, 0xcc, 0xe0, 0x87,
	0x02, 0xbc, 0x80, 0x32, 0x7b, 0xdc, 0xb6, 0x03, 0xb7, 0x4d, 0x03, 0x60, 0xb6, 0xa0, 0x8c, 0x03,
	0x8b, 0x5c, 0x07, 0xda, 0x51, 0xa7, 0xcd, 0xe0, 0x6d, 0x08, 0x5c, 0x0c, 0x19, 0xf0, 0x80, 0xfa,
	0x1c, 0x8c, 0x80, 0x51, 0x41, 0xb5, 0x83, 0x25, 0xce, 0xb0, 0x03, 0xd7, 0xc8, 0xe0, 0x8c, 0xa8,
	0x53, 0xd7, 0xd7, 0x88, 0xc1, 0x0f, 0x3d, 0x9e, 0xd0, 0x39, 0xd4, 0xf3, 0xa8, 0x9f, 0x92, 0xe8,
	0x1f, 0x55, 0x5c, 0xef, 0x8e, 0x46, 0x16, 0xd8, 0xcc, 0x39, 0xef, 0x0a, 0xc1, 0xdc, 0xd3, 0x50,
	0x00, 0xef, 0xa7, 0x92, 0xda, 0x07, 0xbc, 0xcb, 0x65, 0x6b, 0x68, 0xff, 0xe9, 0xd5, 0x50, 0xb3,
	0xd2, 0xba, 0x79, 0xf8, 0xca, 0xd8, 0xa0, 0x6f, 0x94, 0xf3, 0x1a, 0xd9, 0xfa, 0x73, 0x5f, 0xb0,
	0x49, 0x7f, 0x87, 0x67, 0xca, 0xf5, 0x31, 0xbe, 0x5d, 0x38, 0xaa, 0xed, 0xe0, 0xca, 0x1b, 0x98,
	0xd4, 0x50, 0x13, 0xb5, 0xaa, 0xfd, 0xe4, 0x53, 0x7b, 0x82, 0xb7, 0x22, 0x7b, 0x1c, 0x42, 0x4d,
	0x6d, 0xa2, 0xd6, 0xf6, 0xe1, 0xdd, 0x75, 0x7b, 0xf2, 0xef, 0x13, 0x53, 0x2f, 0xfc, 0x11, 0xbc,
	0x87, 0xd1, 0x20, 0x19, 0x3d, 0x99, 0x04, 0xd0, 0x4f, 0x51, 0xa6, 0xfa, 0x08, 0xe9, 0x0d, 0xbc,
	0x5f, 0xe8, 0x39, 0x8d, 0x5d, 0x3f, 0xc6, 0x8d, 0x3e, 0x78, 0x34, 0x82, 0xb2, 0xb4, 0xee, 0x95,
	0xa5, 0x55, 0xcd, 0xff, 0x9a, 0xde, 0xc4, 0xa4, 0x8c, 0x6d, 0xa1, 0xd7, 0xc0, 0xfb, 0xc7, 0x2e,
	0x17, 0x25, 0x6a, 0xfa, 0xd7, 0x2d, 0x7c, 0xa7, 0xb8, 0x9f, 0xe2, 0xb5, 0x0b, 0x84, 0x77, 0x9d,
	0x90, 0x0b, 0xea, 0xe5, 0xb7, 0x67, 0x6d, 0xdc, 0xde, 0xdf, 0xa8, 0x8d, 0x67, 0x92, 0x36, 0xb7,
	0x3f, 0x27, 0x53, 0x96, 0x16, 0xf8, 0x84, 0x0b, 0x58, 0xb3, 0xa0, 0xfe, 0x0f, 0x0b, 0x96, 0xa4,
	0xcd, 0x1f, 0xa1, 0x4c, 0x59, 0x7b, 0x87, 0xb7, 0xb9, 0xa0, 0xcc, 0x3e, 0x83, 0x21, 0x77, 0xce,
	0xc1, 0xb3, 0x6b, 0x15, 0x29, 0xdf, 0xfb, 0x47, 0xf9, 0x94, 0xd3, 0x92, 0x94, 0xa9, 0xf6, 0x2d,
	0xbe, 0x5a, 0x4b, 0xce, 0x6e, 0x61, 0x4c, 0xd7, 0x72, 0x76, 0xe5, 0x4d, 0x29, 0x4a, 0xe4, 0x7a,
	0xd4, 0x9e, 0x62, 0x2d, 0x1f, 0x40, 0x81, 0xd4, 0xde, 0xaa, 0x54, 0x75, 0x85, 0xe1, 0xe8, 0x17,
	0x9a, 0xce, 0x88, 0x72, 0x39, 0x23, 0xca, 0xd5, 0x8c, 0xa0, 0x8b, 0x98, 0xa0, 0xcf, 0x31, 0x41,
	0xdf, 0x62, 0x82, 0xa6, 0x31, 0x41, 0xdf, 0x63, 0x82, 0x7e, 0xc4, 0x44, 0xb9, 0x8a, 0x09, 0xfa,
	0x34, 0x27, 0xca, 0x74, 0x4e, 0x94, 0xcb, 0x39, 0x51, 0xb0, 0xee, 0xd2, 0x4d, 0x7b, 0x3b, 0xda,
	0x5b, 0xdc, 0x90, 0xe5, 0xae, 0x7a, 0xc9, 0x4b, 0xd7, 0x43, 0xaf, 0x1f, 0x9c, 0xad, 0x60, 0x5d,
	0x5a, 0xf2, 0xdc, 0x3e, 0xce, 0x94, 0xbe, 0xa8, 0x07, 0x27, 0x4b, 0x50, 0x37, 0x70, 0x8d, 0x97,
	0x8b, 0xb6, 0xb5, 0x10, 0x1c, 0x74, 0x7e, 0xaa, 0xfa, 0x72, 0xc2, 0x34, 0xbb, 0x81, 0x6b, 0x9a,
	0x99, 0x19, 0xd3, 0x1c, 0x74, 0x4e, 0x6f, 0xc8, 0x07, 0xf7, 0xfe, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x27, 0x67, 0x10, 0xef, 0x05, 0x00, 0x00,
}

func (this *AddSearchAttributesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSearchAttributesRequest)
	if !ok {
		that2, ok := that.(AddSearchAttributesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SearchAttributes) != len(that1.SearchAttributes) {
		return false
	}
	for i := range this.SearchAttributes {
		if this.SearchAttributes[i] != that1.SearchAttributes[i] {
			return false
		}
	}
	return true
}
func (this *AddSearchAttributesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSearchAttributesResponse)
	if !ok {
		that2, ok := that.(AddSearchAttributesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveSearchAttributesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveSearchAttributesRequest)
	if !ok {
		that2, ok := that.(RemoveSearchAttributesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SearchAttributes) != len(that1.SearchAttributes) {
		return false
	}
	for i := range this.SearchAttributes {
		if this.SearchAttributes[i] != that1.SearchAttributes[i] {
			return false
		}
	}
	return true
}
func (this *RemoveSearchAttributesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveSearchAttributesResponse)
	if !ok {
		that2, ok := that.(RemoveSearchAttributesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListSearchAttributesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSearchAttributesRequest)
	if !ok {
		that2, ok := that.(ListSearchAttributesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListSearchAttributesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSearchAttributesResponse)
	if !ok {
		that2, ok := that.(ListSearchAttributesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CustomAttributes) != len(that1.CustomAttributes) {
		return false
	}
	for i := range this.CustomAttributes {
		if this.CustomAttributes[i] != that1.CustomAttributes[i] {
			return false
		}
	}
	if len(this.SystemAttributes) != len(that1.SystemAttributes) {
		return false
	}
	for i := range this.SystemAttributes {
		if this.SystemAttributes[i] != that1.SystemAttributes[i] {
			return false
		}
	}
	if len(this.StorageSchema) != len(that1.StorageSchema) {
		return false
	}
	for i := range this.StorageSchema {
		if this.StorageSchema[i] != that1.StorageSchema[i] {
			return false
		}
	}
	return true
}
func (this *AddSearchAttributesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&operatorservice.AddSearchAttributesRequest{")
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]v1.IndexedValueType{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%#v: %#v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+mapStringForSearchAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddSearchAttributesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&operatorservice.AddSearchAttributesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveSearchAttributesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&operatorservice.RemoveSearchAttributesRequest{")
	s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveSearchAttributesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&operatorservice.RemoveSearchAttributesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSearchAttributesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&operatorservice.ListSearchAttributesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSearchAttributesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&operatorservice.ListSearchAttributesResponse{")
	keysForCustomAttributes := make([]string, 0, len(this.CustomAttributes))
	for k, _ := range this.CustomAttributes {
		keysForCustomAttributes = append(keysForCustomAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCustomAttributes)
	mapStringForCustomAttributes := "map[string]v1.IndexedValueType{"
	for _, k := range keysForCustomAttributes {
		mapStringForCustomAttributes += fmt.Sprintf("%#v: %#v,", k, this.CustomAttributes[k])
	}
	mapStringForCustomAttributes += "}"
	if this.CustomAttributes != nil {
		s = append(s, "CustomAttributes: "+mapStringForCustomAttributes+",\n")
	}
	keysForSystemAttributes := make([]string, 0, len(this.SystemAttributes))
	for k, _ := range this.SystemAttributes {
		keysForSystemAttributes = append(keysForSystemAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSystemAttributes)
	mapStringForSystemAttributes := "map[string]v1.IndexedValueType{"
	for _, k := range keysForSystemAttributes {
		mapStringForSystemAttributes += fmt.Sprintf("%#v: %#v,", k, this.SystemAttributes[k])
	}
	mapStringForSystemAttributes += "}"
	if this.SystemAttributes != nil {
		s = append(s, "SystemAttributes: "+mapStringForSystemAttributes+",\n")
	}
	keysForStorageSchema := make([]string, 0, len(this.StorageSchema))
	for k, _ := range this.StorageSchema {
		keysForStorageSchema = append(keysForStorageSchema, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStorageSchema)
	mapStringForStorageSchema := "map[string]string{"
	for _, k := range keysForStorageSchema {
		mapStringForStorageSchema += fmt.Sprintf("%#v: %#v,", k, this.StorageSchema[k])
	}
	mapStringForStorageSchema += "}"
	if this.StorageSchema != nil {
		s = append(s, "StorageSchema: "+mapStringForStorageSchema+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRequestResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AddSearchAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSearchAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSearchAttributesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SearchAttributes) > 0 {
		for k := range m.SearchAttributes {
			v := m.SearchAttributes[k]
			baseI := i
			i = encodeVarintRequestResponse(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddSearchAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSearchAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSearchAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveSearchAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveSearchAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveSearchAttributesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SearchAttributes) > 0 {
		for iNdEx := len(m.SearchAttributes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SearchAttributes[iNdEx])
			copy(dAtA[i:], m.SearchAttributes[iNdEx])
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SearchAttributes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RemoveSearchAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveSearchAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveSearchAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListSearchAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSearchAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSearchAttributesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListSearchAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSearchAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSearchAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageSchema) > 0 {
		for k := range m.StorageSchema {
			v := m.StorageSchema[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SystemAttributes) > 0 {
		for k := range m.SystemAttributes {
			v := m.SystemAttributes[k]
			baseI := i
			i = encodeVarintRequestResponse(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CustomAttributes) > 0 {
		for k := range m.CustomAttributes {
			v := m.CustomAttributes[k]
			baseI := i
			i = encodeVarintRequestResponse(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddSearchAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SearchAttributes) > 0 {
		for k, v := range m.SearchAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + 1 + sovRequestResponse(uint64(v))
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AddSearchAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveSearchAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SearchAttributes) > 0 {
		for _, s := range m.SearchAttributes {
			l = len(s)
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	return n
}

func (m *RemoveSearchAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListSearchAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListSearchAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CustomAttributes) > 0 {
		for k, v := range m.CustomAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + 1 + sovRequestResponse(uint64(v))
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	if len(m.SystemAttributes) > 0 {
		for k, v := range m.SystemAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + 1 + sovRequestResponse(uint64(v))
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	if len(m.StorageSchema) > 0 {
		for k, v := range m.StorageSchema {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + 1 + len(v) + sovRequestResponse(uint64(len(v)))
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func sovRequestResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestResponse(x uint64) (n int) {
	return sovRequestResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AddSearchAttributesRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]v1.IndexedValueType{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%v: %v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	s := strings.Join([]string{`&AddSearchAttributesRequest{`,
		`SearchAttributes:` + mapStringForSearchAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddSearchAttributesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSearchAttributesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveSearchAttributesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveSearchAttributesRequest{`,
		`SearchAttributes:` + fmt.Sprintf("%v", this.SearchAttributes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveSearchAttributesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveSearchAttributesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ListSearchAttributesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListSearchAttributesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListSearchAttributesResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForCustomAttributes := make([]string, 0, len(this.CustomAttributes))
	for k, _ := range this.CustomAttributes {
		keysForCustomAttributes = append(keysForCustomAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCustomAttributes)
	mapStringForCustomAttributes := "map[string]v1.IndexedValueType{"
	for _, k := range keysForCustomAttributes {
		mapStringForCustomAttributes += fmt.Sprintf("%v: %v,", k, this.CustomAttributes[k])
	}
	mapStringForCustomAttributes += "}"
	keysForSystemAttributes := make([]string, 0, len(this.SystemAttributes))
	for k, _ := range this.SystemAttributes {
		keysForSystemAttributes = append(keysForSystemAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSystemAttributes)
	mapStringForSystemAttributes := "map[string]v1.IndexedValueType{"
	for _, k := range keysForSystemAttributes {
		mapStringForSystemAttributes += fmt.Sprintf("%v: %v,", k, this.SystemAttributes[k])
	}
	mapStringForSystemAttributes += "}"
	keysForStorageSchema := make([]string, 0, len(this.StorageSchema))
	for k, _ := range this.StorageSchema {
		keysForStorageSchema = append(keysForStorageSchema, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStorageSchema)
	mapStringForStorageSchema := "map[string]string{"
	for _, k := range keysForStorageSchema {
		mapStringForStorageSchema += fmt.Sprintf("%v: %v,", k, this.StorageSchema[k])
	}
	mapStringForStorageSchema += "}"
	s := strings.Join([]string{`&ListSearchAttributesResponse{`,
		`CustomAttributes:` + mapStringForCustomAttributes + `,`,
		`SystemAttributes:` + mapStringForSystemAttributes + `,`,
		`StorageSchema:` + mapStringForStorageSchema + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRequestResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AddSearchAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSearchAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSearchAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = make(map[string]v1.IndexedValueType)
			}
			var mapkey string
			var mapvalue v1.IndexedValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= v1.IndexedValueType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SearchAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSearchAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSearchAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSearchAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveSearchAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveSearchAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveSearchAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchAttributes = append(m.SearchAttributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveSearchAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveSearchAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveSearchAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSearchAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSearchAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSearchAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSearchAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSearchAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSearchAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomAttributes == nil {
				m.CustomAttributes = make(map[string]v1.IndexedValueType)
			}
			var mapkey string
			var mapvalue v1.IndexedValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= v1.IndexedValueType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemAttributes == nil {
				m.SystemAttributes = make(map[string]v1.IndexedValueType)
			}
			var mapkey string
			var mapvalue v1.IndexedValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= v1.IndexedValueType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SystemAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageSchema == nil {
				m.StorageSchema = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StorageSchema[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequestResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequestResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequestResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequestResponse = fmt.Errorf("proto: unexpected end of group")
)
