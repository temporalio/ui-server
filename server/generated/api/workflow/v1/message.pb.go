// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/workflow/v1/message.proto

package workflow

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	v1 "go.temporal.io/api/common/v1"
	v11 "go.temporal.io/api/enums/v1"
	v13 "go.temporal.io/api/failure/v1"
	v12 "go.temporal.io/api/taskqueue/v1"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecutionInfo struct {
	Execution            *v1.WorkflowExecution       `protobuf:"bytes,1,opt,name=execution,proto3" json:"execution,omitempty"`
	Type                 *v1.WorkflowType            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	StartTime            *time.Time                  `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
	CloseTime            *time.Time                  `protobuf:"bytes,4,opt,name=close_time,json=closeTime,proto3,stdtime" json:"close_time,omitempty"`
	Status               v11.WorkflowExecutionStatus `protobuf:"varint,5,opt,name=status,proto3,enum=temporal.api.enums.v1.WorkflowExecutionStatus" json:"status,omitempty"`
	HistoryLength        int64                       `protobuf:"varint,6,opt,name=history_length,json=historyLength,proto3" json:"history_length,omitempty"`
	ParentNamespaceId    string                      `protobuf:"bytes,7,opt,name=parent_namespace_id,json=parentNamespaceId,proto3" json:"parent_namespace_id,omitempty"`
	ParentExecution      *v1.WorkflowExecution       `protobuf:"bytes,8,opt,name=parent_execution,json=parentExecution,proto3" json:"parent_execution,omitempty"`
	ExecutionTime        *time.Time                  `protobuf:"bytes,9,opt,name=execution_time,json=executionTime,proto3,stdtime" json:"execution_time,omitempty"`
	Memo                 *v1.Memo                    `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes     *v1.SearchAttributes        `protobuf:"bytes,11,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	AutoResetPoints      *ResetPoints                `protobuf:"bytes,12,opt,name=auto_reset_points,json=autoResetPoints,proto3" json:"auto_reset_points,omitempty"`
	TaskQueue            string                      `protobuf:"bytes,13,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	StateTransitionCount int64                       `protobuf:"varint,14,opt,name=state_transition_count,json=stateTransitionCount,proto3" json:"state_transition_count,omitempty"`
}

func (m *WorkflowExecutionInfo) Reset()      { *m = WorkflowExecutionInfo{} }
func (*WorkflowExecutionInfo) ProtoMessage() {}
func (*WorkflowExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dd1a9976dc3da7, []int{0}
}
func (m *WorkflowExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionInfo.Merge(m, src)
}
func (m *WorkflowExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionInfo proto.InternalMessageInfo

func (m *WorkflowExecutionInfo) GetExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetType() *v1.WorkflowType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetCloseTime() *time.Time {
	if m != nil {
		return m.CloseTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetStatus() v11.WorkflowExecutionStatus {
	if m != nil {
		return m.Status
	}
	return v11.WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
}

func (m *WorkflowExecutionInfo) GetHistoryLength() int64 {
	if m != nil {
		return m.HistoryLength
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetParentNamespaceId() string {
	if m != nil {
		return m.ParentNamespaceId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetParentExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.ParentExecution
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetExecutionTime() *time.Time {
	if m != nil {
		return m.ExecutionTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetMemo() *v1.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetSearchAttributes() *v1.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetAutoResetPoints() *ResetPoints {
	if m != nil {
		return m.AutoResetPoints
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetStateTransitionCount() int64 {
	if m != nil {
		return m.StateTransitionCount
	}
	return 0
}

type WorkflowExecutionConfig struct {
	TaskQueue                  *v12.TaskQueue `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	WorkflowExecutionTimeout   *time.Duration `protobuf:"bytes,2,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3,stdduration" json:"workflow_execution_timeout,omitempty"`
	WorkflowRunTimeout         *time.Duration `protobuf:"bytes,3,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3,stdduration" json:"workflow_run_timeout,omitempty"`
	DefaultWorkflowTaskTimeout *time.Duration `protobuf:"bytes,4,opt,name=default_workflow_task_timeout,json=defaultWorkflowTaskTimeout,proto3,stdduration" json:"default_workflow_task_timeout,omitempty"`
}

func (m *WorkflowExecutionConfig) Reset()      { *m = WorkflowExecutionConfig{} }
func (*WorkflowExecutionConfig) ProtoMessage() {}
func (*WorkflowExecutionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dd1a9976dc3da7, []int{1}
}
func (m *WorkflowExecutionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionConfig.Merge(m, src)
}
func (m *WorkflowExecutionConfig) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionConfig proto.InternalMessageInfo

func (m *WorkflowExecutionConfig) GetTaskQueue() *v12.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *WorkflowExecutionConfig) GetWorkflowExecutionTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowExecutionTimeout
	}
	return nil
}

func (m *WorkflowExecutionConfig) GetWorkflowRunTimeout() *time.Duration {
	if m != nil {
		return m.WorkflowRunTimeout
	}
	return nil
}

func (m *WorkflowExecutionConfig) GetDefaultWorkflowTaskTimeout() *time.Duration {
	if m != nil {
		return m.DefaultWorkflowTaskTimeout
	}
	return nil
}

type PendingActivityInfo struct {
	ActivityId         string                   `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType       *v1.ActivityType         `protobuf:"bytes,2,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	State              v11.PendingActivityState `protobuf:"varint,3,opt,name=state,proto3,enum=temporal.api.enums.v1.PendingActivityState" json:"state,omitempty"`
	HeartbeatDetails   *v1.Payloads             `protobuf:"bytes,4,opt,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	LastHeartbeatTime  *time.Time               `protobuf:"bytes,5,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3,stdtime" json:"last_heartbeat_time,omitempty"`
	LastStartedTime    *time.Time               `protobuf:"bytes,6,opt,name=last_started_time,json=lastStartedTime,proto3,stdtime" json:"last_started_time,omitempty"`
	Attempt            int32                    `protobuf:"varint,7,opt,name=attempt,proto3" json:"attempt,omitempty"`
	MaximumAttempts    int32                    `protobuf:"varint,8,opt,name=maximum_attempts,json=maximumAttempts,proto3" json:"maximum_attempts,omitempty"`
	ScheduledTime      *time.Time               `protobuf:"bytes,9,opt,name=scheduled_time,json=scheduledTime,proto3,stdtime" json:"scheduled_time,omitempty"`
	ExpirationTime     *time.Time               `protobuf:"bytes,10,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time,omitempty"`
	LastFailure        *v13.Failure             `protobuf:"bytes,11,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
	LastWorkerIdentity string                   `protobuf:"bytes,12,opt,name=last_worker_identity,json=lastWorkerIdentity,proto3" json:"last_worker_identity,omitempty"`
}

func (m *PendingActivityInfo) Reset()      { *m = PendingActivityInfo{} }
func (*PendingActivityInfo) ProtoMessage() {}
func (*PendingActivityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dd1a9976dc3da7, []int{2}
}
func (m *PendingActivityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingActivityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingActivityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingActivityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingActivityInfo.Merge(m, src)
}
func (m *PendingActivityInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingActivityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingActivityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingActivityInfo proto.InternalMessageInfo

func (m *PendingActivityInfo) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *PendingActivityInfo) GetActivityType() *v1.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *PendingActivityInfo) GetState() v11.PendingActivityState {
	if m != nil {
		return m.State
	}
	return v11.PENDING_ACTIVITY_STATE_UNSPECIFIED
}

func (m *PendingActivityInfo) GetHeartbeatDetails() *v1.Payloads {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *PendingActivityInfo) GetLastHeartbeatTime() *time.Time {
	if m != nil {
		return m.LastHeartbeatTime
	}
	return nil
}

func (m *PendingActivityInfo) GetLastStartedTime() *time.Time {
	if m != nil {
		return m.LastStartedTime
	}
	return nil
}

func (m *PendingActivityInfo) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PendingActivityInfo) GetMaximumAttempts() int32 {
	if m != nil {
		return m.MaximumAttempts
	}
	return 0
}

func (m *PendingActivityInfo) GetScheduledTime() *time.Time {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PendingActivityInfo) GetExpirationTime() *time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *PendingActivityInfo) GetLastFailure() *v13.Failure {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

func (m *PendingActivityInfo) GetLastWorkerIdentity() string {
	if m != nil {
		return m.LastWorkerIdentity
	}
	return ""
}

type PendingChildExecutionInfo struct {
	WorkflowId       string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId            string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	WorkflowTypeName string `protobuf:"bytes,3,opt,name=workflow_type_name,json=workflowTypeName,proto3" json:"workflow_type_name,omitempty"`
	InitiatedId      int64  `protobuf:"varint,4,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
	// Default: PARENT_CLOSE_POLICY_TERMINATE.
	ParentClosePolicy v11.ParentClosePolicy `protobuf:"varint,5,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.api.enums.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
}

func (m *PendingChildExecutionInfo) Reset()      { *m = PendingChildExecutionInfo{} }
func (*PendingChildExecutionInfo) ProtoMessage() {}
func (*PendingChildExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dd1a9976dc3da7, []int{3}
}
func (m *PendingChildExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingChildExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingChildExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingChildExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingChildExecutionInfo.Merge(m, src)
}
func (m *PendingChildExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingChildExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingChildExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingChildExecutionInfo proto.InternalMessageInfo

func (m *PendingChildExecutionInfo) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetWorkflowTypeName() string {
	if m != nil {
		return m.WorkflowTypeName
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

func (m *PendingChildExecutionInfo) GetParentClosePolicy() v11.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return v11.PARENT_CLOSE_POLICY_UNSPECIFIED
}

type PendingWorkflowTaskInfo struct {
	State         v11.PendingWorkflowTaskState `protobuf:"varint,1,opt,name=state,proto3,enum=temporal.api.enums.v1.PendingWorkflowTaskState" json:"state,omitempty"`
	ScheduledTime *time.Time                   `protobuf:"bytes,2,opt,name=scheduled_time,json=scheduledTime,proto3,stdtime" json:"scheduled_time,omitempty"`
	// original_scheduled_time is the scheduled time of the first workflow task during workflow task heartbeat.
	// Heartbeat workflow task is done by RespondWorkflowTaskComplete with ForceCreateNewWorkflowTask == true and no command
	// In this case, OriginalScheduledTime won't change. Then when current time - original_scheduled_time exceeds
	// some threshold, the workflow task will be forced timeout.
	OriginalScheduledTime *time.Time `protobuf:"bytes,3,opt,name=original_scheduled_time,json=originalScheduledTime,proto3,stdtime" json:"original_scheduled_time,omitempty"`
	StartedTime           *time.Time `protobuf:"bytes,4,opt,name=started_time,json=startedTime,proto3,stdtime" json:"started_time,omitempty"`
	Attempt               int32      `protobuf:"varint,5,opt,name=attempt,proto3" json:"attempt,omitempty"`
}

func (m *PendingWorkflowTaskInfo) Reset()      { *m = PendingWorkflowTaskInfo{} }
func (*PendingWorkflowTaskInfo) ProtoMessage() {}
func (*PendingWorkflowTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dd1a9976dc3da7, []int{4}
}
func (m *PendingWorkflowTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingWorkflowTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingWorkflowTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingWorkflowTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingWorkflowTaskInfo.Merge(m, src)
}
func (m *PendingWorkflowTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingWorkflowTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingWorkflowTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingWorkflowTaskInfo proto.InternalMessageInfo

func (m *PendingWorkflowTaskInfo) GetState() v11.PendingWorkflowTaskState {
	if m != nil {
		return m.State
	}
	return v11.PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED
}

func (m *PendingWorkflowTaskInfo) GetScheduledTime() *time.Time {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PendingWorkflowTaskInfo) GetOriginalScheduledTime() *time.Time {
	if m != nil {
		return m.OriginalScheduledTime
	}
	return nil
}

func (m *PendingWorkflowTaskInfo) GetStartedTime() *time.Time {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *PendingWorkflowTaskInfo) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

type ResetPoints struct {
	Points []*ResetPointInfo `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (m *ResetPoints) Reset()      { *m = ResetPoints{} }
func (*ResetPoints) ProtoMessage() {}
func (*ResetPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dd1a9976dc3da7, []int{5}
}
func (m *ResetPoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetPoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPoints.Merge(m, src)
}
func (m *ResetPoints) XXX_Size() int {
	return m.Size()
}
func (m *ResetPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPoints.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPoints proto.InternalMessageInfo

func (m *ResetPoints) GetPoints() []*ResetPointInfo {
	if m != nil {
		return m.Points
	}
	return nil
}

type ResetPointInfo struct {
	BinaryChecksum               string     `protobuf:"bytes,1,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	RunId                        string     `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	FirstWorkflowTaskCompletedId int64      `protobuf:"varint,3,opt,name=first_workflow_task_completed_id,json=firstWorkflowTaskCompletedId,proto3" json:"first_workflow_task_completed_id,omitempty"`
	CreateTime                   *time.Time `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3,stdtime" json:"create_time,omitempty"`
	// (-- api-linter: core::0214::resource-expiry=disabled
	//     aip.dev/not-precedent: TTL is not defined for ResetPointInfo. --)
	// The time that the run is deleted due to retention.
	ExpireTime *time.Time `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3,stdtime" json:"expire_time,omitempty"`
	// false if the reset point has pending childWFs/reqCancels/signalExternals.
	Resettable bool `protobuf:"varint,6,opt,name=resettable,proto3" json:"resettable,omitempty"`
}

func (m *ResetPointInfo) Reset()      { *m = ResetPointInfo{} }
func (*ResetPointInfo) ProtoMessage() {}
func (*ResetPointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dd1a9976dc3da7, []int{6}
}
func (m *ResetPointInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetPointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetPointInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetPointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPointInfo.Merge(m, src)
}
func (m *ResetPointInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResetPointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPointInfo proto.InternalMessageInfo

func (m *ResetPointInfo) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

func (m *ResetPointInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ResetPointInfo) GetFirstWorkflowTaskCompletedId() int64 {
	if m != nil {
		return m.FirstWorkflowTaskCompletedId
	}
	return 0
}

func (m *ResetPointInfo) GetCreateTime() *time.Time {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *ResetPointInfo) GetExpireTime() *time.Time {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

func (m *ResetPointInfo) GetResettable() bool {
	if m != nil {
		return m.Resettable
	}
	return false
}

func init() {
	proto.RegisterType((*WorkflowExecutionInfo)(nil), "temporal.api.workflow.v1.WorkflowExecutionInfo")
	proto.RegisterType((*WorkflowExecutionConfig)(nil), "temporal.api.workflow.v1.WorkflowExecutionConfig")
	proto.RegisterType((*PendingActivityInfo)(nil), "temporal.api.workflow.v1.PendingActivityInfo")
	proto.RegisterType((*PendingChildExecutionInfo)(nil), "temporal.api.workflow.v1.PendingChildExecutionInfo")
	proto.RegisterType((*PendingWorkflowTaskInfo)(nil), "temporal.api.workflow.v1.PendingWorkflowTaskInfo")
	proto.RegisterType((*ResetPoints)(nil), "temporal.api.workflow.v1.ResetPoints")
	proto.RegisterType((*ResetPointInfo)(nil), "temporal.api.workflow.v1.ResetPointInfo")
}

func init() {
	proto.RegisterFile("temporal/api/workflow/v1/message.proto", fileDescriptor_f2dd1a9976dc3da7)
}

var fileDescriptor_f2dd1a9976dc3da7 = []byte{
	// 1366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcb, 0x6f, 0xdc, 0x54,
	0x17, 0x8f, 0xf3, 0x6a, 0xe7, 0x4c, 0x32, 0x49, 0x6e, 0xdb, 0xaf, 0x6e, 0xda, 0x3a, 0xf9, 0xa2,
	0xf6, 0x6b, 0xaa, 0x0f, 0x3c, 0x4d, 0x61, 0x81, 0xc2, 0x02, 0x26, 0xd3, 0x07, 0x23, 0xb5, 0x90,
	0x3a, 0xa1, 0xad, 0x90, 0x90, 0x75, 0xc7, 0xbe, 0x33, 0x73, 0x15, 0xdb, 0xd7, 0xd8, 0xd7, 0x49,
	0x67, 0x87, 0xc4, 0x92, 0x4d, 0x97, 0xfc, 0x09, 0x88, 0x3f, 0x82, 0x0d, 0x1b, 0x96, 0x5d, 0x76,
	0x07, 0x9d, 0x6e, 0x10, 0xab, 0x2e, 0x58, 0x23, 0x74, 0x8f, 0x1f, 0xf3, 0xca, 0xc0, 0x94, 0x9d,
	0xef, 0x39, 0xe7, 0xf7, 0xf3, 0xf1, 0x79, 0x5e, 0xc3, 0xff, 0x24, 0xf3, 0x43, 0x11, 0x51, 0xaf,
	0x4a, 0x43, 0x5e, 0x3d, 0x11, 0xd1, 0x51, 0xcb, 0x13, 0x27, 0xd5, 0xe3, 0x9d, 0xaa, 0xcf, 0xe2,
	0x98, 0xb6, 0x99, 0x19, 0x46, 0x42, 0x0a, 0xa2, 0xe7, 0x76, 0x26, 0x0d, 0xb9, 0x99, 0xdb, 0x99,
	0xc7, 0x3b, 0xeb, 0x46, 0x5b, 0x88, 0xb6, 0xc7, 0xaa, 0x68, 0xd7, 0x4c, 0x5a, 0x55, 0x37, 0x89,
	0xa8, 0xe4, 0x22, 0x48, 0x91, 0xeb, 0x1b, 0xa3, 0x7a, 0xc9, 0x7d, 0x16, 0x4b, 0xea, 0x87, 0x99,
	0xc1, 0xbb, 0x6d, 0x2e, 0x3b, 0x49, 0xd3, 0x74, 0x84, 0x5f, 0x6d, 0x8b, 0xb6, 0xe8, 0x5b, 0xaa,
	0x13, 0x1e, 0xf0, 0x29, 0x33, 0xbf, 0x36, 0xe4, 0x31, 0x0b, 0x12, 0x3f, 0x56, 0xee, 0x16, 0x2e,
	0x9d, 0x66, 0xe5, 0x08, 0xdf, 0x17, 0xc1, 0xd8, 0x57, 0xad, 0x5f, 0x1f, 0xb2, 0x6a, 0x51, 0xee,
	0x25, 0x11, 0x1b, 0x37, 0xbb, 0x31, 0x64, 0x26, 0x69, 0x7c, 0xf4, 0x55, 0xc2, 0x92, 0x71, 0xc3,
	0xad, 0x6f, 0xcf, 0xc0, 0x85, 0x27, 0x99, 0x23, 0x77, 0x9f, 0x31, 0x27, 0x51, 0x71, 0x68, 0x04,
	0x2d, 0x41, 0xee, 0x43, 0x89, 0xe5, 0x02, 0x5d, 0xdb, 0xd4, 0xb6, 0xcb, 0xb7, 0x6f, 0x9a, 0x43,
	0x31, 0x4d, 0x7d, 0x34, 0x8f, 0x77, 0xcc, 0x31, 0x06, 0xab, 0x8f, 0x25, 0x1f, 0xc0, 0xbc, 0xec,
	0x86, 0x4c, 0x9f, 0x45, 0x8e, 0x6b, 0xff, 0xc4, 0x71, 0xd8, 0x0d, 0x99, 0x85, 0x08, 0xf2, 0x11,
	0x40, 0x2c, 0x69, 0x24, 0x6d, 0x95, 0x00, 0x7d, 0x0e, 0xf1, 0xeb, 0x66, 0x9a, 0x1d, 0x33, 0x8f,
	0xb9, 0x79, 0x98, 0x67, 0x67, 0x6f, 0xfe, 0xf9, 0x2f, 0x1b, 0x9a, 0x55, 0x42, 0x8c, 0x92, 0x2a,
	0x02, 0xc7, 0x13, 0x31, 0x4b, 0x09, 0xe6, 0xa7, 0x25, 0x40, 0x0c, 0x12, 0xdc, 0x83, 0xc5, 0x58,
	0x52, 0x99, 0xc4, 0xfa, 0xc2, 0xa6, 0xb6, 0x5d, 0xb9, 0x6d, 0x0e, 0x7b, 0x8f, 0xb9, 0x3c, 0x35,
	0x00, 0x07, 0x88, 0xb2, 0x32, 0x34, 0xb9, 0x0e, 0x95, 0x0e, 0x8f, 0xa5, 0x88, 0xba, 0xb6, 0xc7,
	0x82, 0xb6, 0xec, 0xe8, 0x8b, 0x9b, 0xda, 0xf6, 0x9c, 0xb5, 0x9c, 0x49, 0x1f, 0xa0, 0x90, 0x98,
	0x70, 0x2e, 0xa4, 0x11, 0x0b, 0xa4, 0x1d, 0x50, 0x9f, 0xc5, 0x21, 0x75, 0x98, 0xcd, 0x5d, 0xfd,
	0xcc, 0xa6, 0xb6, 0x5d, 0xb2, 0xd6, 0x52, 0xd5, 0xa7, 0xb9, 0xa6, 0xe1, 0x92, 0x43, 0x58, 0xcd,
	0xec, 0xfb, 0xa9, 0x3a, 0xfb, 0xb6, 0xa9, 0x5a, 0x49, 0x29, 0x0a, 0x01, 0xb9, 0x0f, 0x95, 0x82,
	0x2e, 0x8d, 0x5c, 0x69, 0xca, 0xc8, 0x2d, 0x17, 0x38, 0x8c, 0xde, 0x2d, 0x98, 0xf7, 0x99, 0x2f,
	0x74, 0x40, 0xf8, 0x95, 0x49, 0x2e, 0x3d, 0x64, 0xbe, 0xb0, 0xd0, 0x92, 0x7c, 0x0e, 0x6b, 0x31,
	0xa3, 0x91, 0xd3, 0xb1, 0xa9, 0x94, 0x11, 0x6f, 0x26, 0x92, 0xc5, 0x7a, 0x19, 0xe1, 0xdb, 0x93,
	0xe0, 0x07, 0x08, 0xa8, 0x15, 0xf6, 0xd6, 0x6a, 0x3c, 0x22, 0x21, 0x8f, 0x60, 0x8d, 0x26, 0x52,
	0xd8, 0x11, 0x8b, 0x99, 0xb4, 0x43, 0xc1, 0x03, 0x19, 0xeb, 0x4b, 0x48, 0x7b, 0xdd, 0x9c, 0x34,
	0x27, 0x4c, 0x4b, 0x59, 0xef, 0xa3, 0xb1, 0xb5, 0xa2, 0xf0, 0x03, 0x02, 0x72, 0x15, 0x40, 0xb5,
	0x95, 0x8d, 0x7d, 0xa5, 0x2f, 0x63, 0x86, 0x4a, 0x4a, 0xf2, 0x48, 0x09, 0xc8, 0xfb, 0xf0, 0x1f,
	0x95, 0x7a, 0x66, 0xcb, 0x88, 0x06, 0x31, 0xc7, 0x50, 0x3a, 0x22, 0x09, 0xa4, 0x5e, 0xc1, 0xc4,
	0x9f, 0x47, 0xed, 0x61, 0xa1, 0xac, 0x2b, 0xdd, 0xd6, 0x1f, 0xb3, 0x70, 0x71, 0x2c, 0x41, 0x75,
	0x11, 0xb4, 0x78, 0x9b, 0xd4, 0x87, 0x5e, 0xa8, 0x9d, 0xd6, 0x4c, 0x45, 0x9f, 0x2b, 0xef, 0x0f,
	0x73, 0x5f, 0x06, 0xdd, 0xfa, 0x12, 0xd6, 0xf3, 0x2f, 0xb4, 0x87, 0x73, 0x2c, 0x12, 0x99, 0x75,
	0xe8, 0xa5, 0xb1, 0x34, 0xdf, 0xc9, 0xe6, 0xe3, 0xde, 0xfc, 0x77, 0x2a, 0xcb, 0xfa, 0xc9, 0xa8,
	0x8b, 0x87, 0x29, 0x01, 0x79, 0x04, 0xe7, 0x0b, 0xfa, 0x28, 0xe9, 0x13, 0xcf, 0x4d, 0x47, 0x4c,
	0x72, 0xb0, 0x95, 0x14, 0x94, 0x4d, 0xb8, 0xea, 0xb2, 0x16, 0x4d, 0x3c, 0x69, 0x17, 0xd4, 0x18,
	0x87, 0x9c, 0x7b, 0x7e, 0x3a, 0xee, 0xf5, 0x8c, 0xa5, 0x18, 0x33, 0x34, 0x3e, 0xca, 0xde, 0xb1,
	0xf5, 0xcd, 0x22, 0x9c, 0xdb, 0x67, 0x81, 0xcb, 0x83, 0x76, 0xcd, 0x91, 0xfc, 0x98, 0xcb, 0x2e,
	0x8e, 0xc0, 0x0d, 0x28, 0xd3, 0xec, 0xac, 0xda, 0x50, 0xc3, 0x24, 0x43, 0x2e, 0x6a, 0xb8, 0xa4,
	0x01, 0xcb, 0x85, 0xc1, 0x34, 0x33, 0x2e, 0x67, 0xc7, 0x19, 0xb7, 0x44, 0x07, 0x4e, 0xa4, 0x06,
	0x0b, 0x58, 0x12, 0x18, 0xab, 0xca, 0xed, 0xff, 0x4f, 0x18, 0x34, 0x23, 0x6e, 0xaa, 0x31, 0xc3,
	0xac, 0x14, 0x49, 0x1e, 0xc2, 0x5a, 0x87, 0xd1, 0x48, 0x36, 0x19, 0x95, 0xb6, 0xcb, 0x24, 0xe5,
	0x5e, 0x9c, 0x85, 0x67, 0x73, 0x92, 0x47, 0xfb, 0xb4, 0xeb, 0x09, 0xea, 0xc6, 0xd6, 0x6a, 0x01,
	0xbd, 0x93, 0x22, 0xc9, 0x3e, 0x9c, 0xf3, 0x68, 0x2c, 0xed, 0x3e, 0x27, 0xce, 0x82, 0x85, 0x29,
	0x67, 0xc1, 0x9a, 0x02, 0x7f, 0x92, 0x63, 0x71, 0x1e, 0x3c, 0x00, 0x14, 0xda, 0x38, 0xa0, 0x99,
	0x9b, 0xf2, 0x2d, 0x4e, 0xc9, 0xb7, 0xa2, 0xa0, 0x07, 0x29, 0x12, 0xd9, 0x74, 0x38, 0x43, 0xa5,
	0xfa, 0x2c, 0x89, 0x03, 0x72, 0xc1, 0xca, 0x8f, 0xe4, 0x26, 0xac, 0xfa, 0xf4, 0x19, 0xf7, 0x13,
	0xdf, 0xce, 0x44, 0x31, 0x8e, 0xc5, 0x05, 0x6b, 0x25, 0x93, 0xd7, 0x32, 0xb1, 0x9a, 0x75, 0xb1,
	0xd3, 0x61, 0x6e, 0xe2, 0xe5, 0xfe, 0x4c, 0x3d, 0xeb, 0x0a, 0x1c, 0x7a, 0xd3, 0x80, 0x15, 0xf6,
	0x2c, 0xe4, 0x69, 0xcd, 0xa5, 0x4c, 0x30, 0x25, 0x53, 0xa5, 0x0f, 0x44, 0xaa, 0x3a, 0x2c, 0x61,
	0x98, 0xb2, 0xed, 0x9e, 0xcd, 0xbf, 0x91, 0x14, 0x66, 0x4a, 0x95, 0xc3, 0x7b, 0xe9, 0xa3, 0x55,
	0x56, 0xa8, 0xec, 0x40, 0x6e, 0xc1, 0x79, 0x24, 0x51, 0x4d, 0xc3, 0x22, 0x9b, 0xbb, 0x2c, 0x90,
	0x5c, 0x76, 0x71, 0xea, 0x95, 0x2c, 0xa2, 0x74, 0x4f, 0x50, 0xd5, 0xc8, 0x34, 0x5b, 0x7f, 0x6a,
	0x70, 0x29, 0x2b, 0xaf, 0x7a, 0x87, 0x7b, 0xee, 0xf0, 0x75, 0x60, 0x03, 0xca, 0x45, 0xff, 0xf5,
	0x7b, 0x21, 0x17, 0x35, 0x5c, 0x72, 0x01, 0x16, 0x55, 0xcb, 0x73, 0x17, 0x9b, 0xa0, 0x64, 0x2d,
	0x44, 0x49, 0xd0, 0x70, 0xc9, 0x3b, 0x40, 0xfa, 0x7d, 0xdb, 0x0d, 0x19, 0x6e, 0x36, 0x2c, 0xf2,
	0x92, 0xb5, 0x7a, 0x32, 0xb0, 0xf3, 0xd5, 0x5e, 0x23, 0xff, 0x85, 0x25, 0x1e, 0x70, 0xc9, 0xa9,
	0x2a, 0x0f, 0xee, 0x62, 0xf5, 0xce, 0x59, 0xe5, 0x42, 0xd6, 0x70, 0xc9, 0xd3, 0x62, 0x47, 0xa6,
	0xab, 0x3d, 0x14, 0x1e, 0x77, 0xba, 0xd9, 0x7e, 0xde, 0x9e, 0xd4, 0x36, 0x88, 0xa8, 0x2b, 0xc0,
	0x3e, 0xda, 0xe7, 0xdb, 0x74, 0x40, 0xb4, 0xd5, 0x9b, 0x85, 0x8b, 0x59, 0x00, 0x06, 0xa7, 0x04,
	0x7e, 0xfe, 0xdd, 0xbc, 0x3d, 0x35, 0x7c, 0x4f, 0xf5, 0xef, 0xdb, 0x73, 0x10, 0x3e, 0xd4, 0xa2,
	0xe3, 0xe5, 0x36, 0xfb, 0xef, 0xca, 0xed, 0x29, 0x5c, 0x14, 0x11, 0x6f, 0xf3, 0x80, 0x7a, 0xf6,
	0x08, 0xe3, 0xb4, 0xf7, 0xa4, 0x0b, 0x39, 0xc1, 0xc1, 0x10, 0x73, 0x1d, 0x96, 0x86, 0xfa, 0x73,
	0xda, 0x5b, 0x53, 0x39, 0x3e, 0xbd, 0x37, 0x17, 0x86, 0x7a, 0x73, 0xeb, 0x33, 0x28, 0x0f, 0xae,
	0xd1, 0x8f, 0x61, 0x31, 0x5b, 0xc7, 0xda, 0xe6, 0xdc, 0xf8, 0x96, 0x3f, 0x7d, 0x1d, 0xab, 0x8c,
	0x58, 0x19, 0x6e, 0xeb, 0xc7, 0x59, 0xa8, 0x0c, 0xab, 0xc8, 0x0d, 0x58, 0x69, 0xf2, 0x80, 0x46,
	0x5d, 0xdb, 0xe9, 0x30, 0xe7, 0x28, 0x4e, 0xfc, 0xac, 0x5e, 0x2b, 0xa9, 0xb8, 0x9e, 0x49, 0x27,
	0xd5, 0xec, 0x3d, 0xd8, 0x6c, 0xf1, 0x28, 0x1e, 0xdd, 0x38, 0x8e, 0xf0, 0x43, 0x8f, 0x65, 0x95,
	0x39, 0x87, 0x95, 0x79, 0x05, 0xed, 0x06, 0xd3, 0x5d, 0xcf, 0x8d, 0x1a, 0x2e, 0xa9, 0x41, 0xd9,
	0x89, 0x18, 0xde, 0x02, 0xde, 0x26, 0x92, 0x90, 0x82, 0x30, 0x90, 0x35, 0x28, 0xe3, 0x74, 0x60,
	0x6f, 0x37, 0x7c, 0x21, 0x05, 0x21, 0x85, 0x01, 0x80, 0xf7, 0x1e, 0x49, 0x9b, 0x5e, 0x3a, 0x6e,
	0xcf, 0x5a, 0x03, 0x92, 0xbd, 0x9f, 0xb4, 0x17, 0xaf, 0x8c, 0x99, 0x97, 0xaf, 0x8c, 0x99, 0x37,
	0xaf, 0x0c, 0xed, 0xeb, 0x9e, 0xa1, 0x7d, 0xdf, 0x33, 0xb4, 0x9f, 0x7b, 0x86, 0xf6, 0xa2, 0x67,
	0x68, 0xbf, 0xf6, 0x0c, 0xed, 0xb7, 0x9e, 0x31, 0xf3, 0xa6, 0x67, 0x68, 0xcf, 0x5f, 0x1b, 0x33,
	0x2f, 0x5e, 0x1b, 0x33, 0x2f, 0x5f, 0x1b, 0x33, 0x70, 0x99, 0x8b, 0x89, 0xb9, 0xda, 0x5b, 0x7a,
	0x98, 0xfe, 0x65, 0xec, 0x2b, 0x07, 0xf7, 0xb5, 0x2f, 0x6e, 0xb4, 0x07, 0x8c, 0xb9, 0x18, 0xfd,
	0x75, 0xfb, 0x30, 0x7f, 0xfe, 0x61, 0x56, 0x3f, 0xcc, 0xcd, 0x6a, 0x21, 0x2f, 0x6e, 0xab, 0xe6,
	0xe3, 0x9d, 0xdf, 0x67, 0x2f, 0xe7, 0xaa, 0xdd, 0xdd, 0x5a, 0xc8, 0x77, 0x77, 0x73, 0xe5, 0xee,
	0xee, 0xe3, 0x9d, 0xe6, 0x22, 0xc6, 0xe2, 0xbd, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xa0,
	0xb2, 0x13, 0x1f, 0x0e, 0x00, 0x00,
}

func (this *WorkflowExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionInfo)
	if !ok {
		that2, ok := that.(WorkflowExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if that1.StartTime == nil {
		if this.StartTime != nil {
			return false
		}
	} else if !this.StartTime.Equal(*that1.StartTime) {
		return false
	}
	if that1.CloseTime == nil {
		if this.CloseTime != nil {
			return false
		}
	} else if !this.CloseTime.Equal(*that1.CloseTime) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.HistoryLength != that1.HistoryLength {
		return false
	}
	if this.ParentNamespaceId != that1.ParentNamespaceId {
		return false
	}
	if !this.ParentExecution.Equal(that1.ParentExecution) {
		return false
	}
	if that1.ExecutionTime == nil {
		if this.ExecutionTime != nil {
			return false
		}
	} else if !this.ExecutionTime.Equal(*that1.ExecutionTime) {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	if !this.AutoResetPoints.Equal(that1.AutoResetPoints) {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if this.StateTransitionCount != that1.StateTransitionCount {
		return false
	}
	return true
}
func (this *WorkflowExecutionConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionConfig)
	if !ok {
		that2, ok := that.(WorkflowExecutionConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if this.WorkflowExecutionTimeout != nil && that1.WorkflowExecutionTimeout != nil {
		if *this.WorkflowExecutionTimeout != *that1.WorkflowExecutionTimeout {
			return false
		}
	} else if this.WorkflowExecutionTimeout != nil {
		return false
	} else if that1.WorkflowExecutionTimeout != nil {
		return false
	}
	if this.WorkflowRunTimeout != nil && that1.WorkflowRunTimeout != nil {
		if *this.WorkflowRunTimeout != *that1.WorkflowRunTimeout {
			return false
		}
	} else if this.WorkflowRunTimeout != nil {
		return false
	} else if that1.WorkflowRunTimeout != nil {
		return false
	}
	if this.DefaultWorkflowTaskTimeout != nil && that1.DefaultWorkflowTaskTimeout != nil {
		if *this.DefaultWorkflowTaskTimeout != *that1.DefaultWorkflowTaskTimeout {
			return false
		}
	} else if this.DefaultWorkflowTaskTimeout != nil {
		return false
	} else if that1.DefaultWorkflowTaskTimeout != nil {
		return false
	}
	return true
}
func (this *PendingActivityInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingActivityInfo)
	if !ok {
		that2, ok := that.(PendingActivityInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.HeartbeatDetails.Equal(that1.HeartbeatDetails) {
		return false
	}
	if that1.LastHeartbeatTime == nil {
		if this.LastHeartbeatTime != nil {
			return false
		}
	} else if !this.LastHeartbeatTime.Equal(*that1.LastHeartbeatTime) {
		return false
	}
	if that1.LastStartedTime == nil {
		if this.LastStartedTime != nil {
			return false
		}
	} else if !this.LastStartedTime.Equal(*that1.LastStartedTime) {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.MaximumAttempts != that1.MaximumAttempts {
		return false
	}
	if that1.ScheduledTime == nil {
		if this.ScheduledTime != nil {
			return false
		}
	} else if !this.ScheduledTime.Equal(*that1.ScheduledTime) {
		return false
	}
	if that1.ExpirationTime == nil {
		if this.ExpirationTime != nil {
			return false
		}
	} else if !this.ExpirationTime.Equal(*that1.ExpirationTime) {
		return false
	}
	if !this.LastFailure.Equal(that1.LastFailure) {
		return false
	}
	if this.LastWorkerIdentity != that1.LastWorkerIdentity {
		return false
	}
	return true
}
func (this *PendingChildExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingChildExecutionInfo)
	if !ok {
		that2, ok := that.(PendingChildExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.WorkflowTypeName != that1.WorkflowTypeName {
		return false
	}
	if this.InitiatedId != that1.InitiatedId {
		return false
	}
	if this.ParentClosePolicy != that1.ParentClosePolicy {
		return false
	}
	return true
}
func (this *PendingWorkflowTaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingWorkflowTaskInfo)
	if !ok {
		that2, ok := that.(PendingWorkflowTaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if that1.ScheduledTime == nil {
		if this.ScheduledTime != nil {
			return false
		}
	} else if !this.ScheduledTime.Equal(*that1.ScheduledTime) {
		return false
	}
	if that1.OriginalScheduledTime == nil {
		if this.OriginalScheduledTime != nil {
			return false
		}
	} else if !this.OriginalScheduledTime.Equal(*that1.OriginalScheduledTime) {
		return false
	}
	if that1.StartedTime == nil {
		if this.StartedTime != nil {
			return false
		}
	} else if !this.StartedTime.Equal(*that1.StartedTime) {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	return true
}
func (this *ResetPoints) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetPoints)
	if !ok {
		that2, ok := that.(ResetPoints)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Points) != len(that1.Points) {
		return false
	}
	for i := range this.Points {
		if !this.Points[i].Equal(that1.Points[i]) {
			return false
		}
	}
	return true
}
func (this *ResetPointInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetPointInfo)
	if !ok {
		that2, ok := that.(ResetPointInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.FirstWorkflowTaskCompletedId != that1.FirstWorkflowTaskCompletedId {
		return false
	}
	if that1.CreateTime == nil {
		if this.CreateTime != nil {
			return false
		}
	} else if !this.CreateTime.Equal(*that1.CreateTime) {
		return false
	}
	if that1.ExpireTime == nil {
		if this.ExpireTime != nil {
			return false
		}
	} else if !this.ExpireTime.Equal(*that1.ExpireTime) {
		return false
	}
	if this.Resettable != that1.Resettable {
		return false
	}
	return true
}
func (this *WorkflowExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&workflow.WorkflowExecutionInfo{")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "CloseTime: "+fmt.Sprintf("%#v", this.CloseTime)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "HistoryLength: "+fmt.Sprintf("%#v", this.HistoryLength)+",\n")
	s = append(s, "ParentNamespaceId: "+fmt.Sprintf("%#v", this.ParentNamespaceId)+",\n")
	if this.ParentExecution != nil {
		s = append(s, "ParentExecution: "+fmt.Sprintf("%#v", this.ParentExecution)+",\n")
	}
	s = append(s, "ExecutionTime: "+fmt.Sprintf("%#v", this.ExecutionTime)+",\n")
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	if this.AutoResetPoints != nil {
		s = append(s, "AutoResetPoints: "+fmt.Sprintf("%#v", this.AutoResetPoints)+",\n")
	}
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "StateTransitionCount: "+fmt.Sprintf("%#v", this.StateTransitionCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflow.WorkflowExecutionConfig{")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "WorkflowExecutionTimeout: "+fmt.Sprintf("%#v", this.WorkflowExecutionTimeout)+",\n")
	s = append(s, "WorkflowRunTimeout: "+fmt.Sprintf("%#v", this.WorkflowRunTimeout)+",\n")
	s = append(s, "DefaultWorkflowTaskTimeout: "+fmt.Sprintf("%#v", this.DefaultWorkflowTaskTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingActivityInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&workflow.PendingActivityInfo{")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.HeartbeatDetails != nil {
		s = append(s, "HeartbeatDetails: "+fmt.Sprintf("%#v", this.HeartbeatDetails)+",\n")
	}
	s = append(s, "LastHeartbeatTime: "+fmt.Sprintf("%#v", this.LastHeartbeatTime)+",\n")
	s = append(s, "LastStartedTime: "+fmt.Sprintf("%#v", this.LastStartedTime)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "MaximumAttempts: "+fmt.Sprintf("%#v", this.MaximumAttempts)+",\n")
	s = append(s, "ScheduledTime: "+fmt.Sprintf("%#v", this.ScheduledTime)+",\n")
	s = append(s, "ExpirationTime: "+fmt.Sprintf("%#v", this.ExpirationTime)+",\n")
	if this.LastFailure != nil {
		s = append(s, "LastFailure: "+fmt.Sprintf("%#v", this.LastFailure)+",\n")
	}
	s = append(s, "LastWorkerIdentity: "+fmt.Sprintf("%#v", this.LastWorkerIdentity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingChildExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflow.PendingChildExecutionInfo{")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "WorkflowTypeName: "+fmt.Sprintf("%#v", this.WorkflowTypeName)+",\n")
	s = append(s, "InitiatedId: "+fmt.Sprintf("%#v", this.InitiatedId)+",\n")
	s = append(s, "ParentClosePolicy: "+fmt.Sprintf("%#v", this.ParentClosePolicy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingWorkflowTaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflow.PendingWorkflowTaskInfo{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "ScheduledTime: "+fmt.Sprintf("%#v", this.ScheduledTime)+",\n")
	s = append(s, "OriginalScheduledTime: "+fmt.Sprintf("%#v", this.OriginalScheduledTime)+",\n")
	s = append(s, "StartedTime: "+fmt.Sprintf("%#v", this.StartedTime)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetPoints) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflow.ResetPoints{")
	if this.Points != nil {
		s = append(s, "Points: "+fmt.Sprintf("%#v", this.Points)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetPointInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&workflow.ResetPointInfo{")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "FirstWorkflowTaskCompletedId: "+fmt.Sprintf("%#v", this.FirstWorkflowTaskCompletedId)+",\n")
	s = append(s, "CreateTime: "+fmt.Sprintf("%#v", this.CreateTime)+",\n")
	s = append(s, "ExpireTime: "+fmt.Sprintf("%#v", this.ExpireTime)+",\n")
	s = append(s, "Resettable: "+fmt.Sprintf("%#v", this.Resettable)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WorkflowExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StateTransitionCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StateTransitionCount))
		i--
		dAtA[i] = 0x70
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x6a
	}
	if m.AutoResetPoints != nil {
		{
			size, err := m.AutoResetPoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ExecutionTime != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExecutionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExecutionTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintMessage(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x4a
	}
	if m.ParentExecution != nil {
		{
			size, err := m.ParentExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParentNamespaceId) > 0 {
		i -= len(m.ParentNamespaceId)
		copy(dAtA[i:], m.ParentNamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ParentNamespaceId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.HistoryLength != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HistoryLength))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.CloseTime != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CloseTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CloseTime):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintMessage(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x22
	}
	if m.StartTime != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintMessage(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultWorkflowTaskTimeout != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.DefaultWorkflowTaskTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.DefaultWorkflowTaskTimeout):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintMessage(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowRunTimeout != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowRunTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowRunTimeout):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintMessage(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecutionTimeout != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowExecutionTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionTimeout):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintMessage(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingActivityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingActivityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingActivityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastWorkerIdentity) > 0 {
		i -= len(m.LastWorkerIdentity)
		copy(dAtA[i:], m.LastWorkerIdentity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LastWorkerIdentity)))
		i--
		dAtA[i] = 0x62
	}
	if m.LastFailure != nil {
		{
			size, err := m.LastFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ExpirationTime != nil {
		n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpirationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpirationTime):])
		if err15 != nil {
			return 0, err15
		}
		i -= n15
		i = encodeVarintMessage(dAtA, i, uint64(n15))
		i--
		dAtA[i] = 0x52
	}
	if m.ScheduledTime != nil {
		n16, err16 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ScheduledTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime):])
		if err16 != nil {
			return 0, err16
		}
		i -= n16
		i = encodeVarintMessage(dAtA, i, uint64(n16))
		i--
		dAtA[i] = 0x4a
	}
	if m.MaximumAttempts != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MaximumAttempts))
		i--
		dAtA[i] = 0x40
	}
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x38
	}
	if m.LastStartedTime != nil {
		n17, err17 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastStartedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStartedTime):])
		if err17 != nil {
			return 0, err17
		}
		i -= n17
		i = encodeVarintMessage(dAtA, i, uint64(n17))
		i--
		dAtA[i] = 0x32
	}
	if m.LastHeartbeatTime != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastHeartbeatTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastHeartbeatTime):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintMessage(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0x2a
	}
	if m.HeartbeatDetails != nil {
		{
			size, err := m.HeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingChildExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingChildExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingChildExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParentClosePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WorkflowTypeName) > 0 {
		i -= len(m.WorkflowTypeName)
		copy(dAtA[i:], m.WorkflowTypeName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowTypeName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingWorkflowTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingWorkflowTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingWorkflowTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x28
	}
	if m.StartedTime != nil {
		n21, err21 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime):])
		if err21 != nil {
			return 0, err21
		}
		i -= n21
		i = encodeVarintMessage(dAtA, i, uint64(n21))
		i--
		dAtA[i] = 0x22
	}
	if m.OriginalScheduledTime != nil {
		n22, err22 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.OriginalScheduledTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.OriginalScheduledTime):])
		if err22 != nil {
			return 0, err22
		}
		i -= n22
		i = encodeVarintMessage(dAtA, i, uint64(n22))
		i--
		dAtA[i] = 0x1a
	}
	if m.ScheduledTime != nil {
		n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ScheduledTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime):])
		if err23 != nil {
			return 0, err23
		}
		i -= n23
		i = encodeVarintMessage(dAtA, i, uint64(n23))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResetPoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetPoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetPoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Points[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResetPointInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetPointInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetPointInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resettable {
		i--
		if m.Resettable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ExpireTime != nil {
		n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpireTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpireTime):])
		if err24 != nil {
			return 0, err24
		}
		i -= n24
		i = encodeVarintMessage(dAtA, i, uint64(n24))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreateTime != nil {
		n25, err25 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreateTime):])
		if err25 != nil {
			return 0, err25
		}
		i -= n25
		i = encodeVarintMessage(dAtA, i, uint64(n25))
		i--
		dAtA[i] = 0x22
	}
	if m.FirstWorkflowTaskCompletedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FirstWorkflowTaskCompletedId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CloseTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CloseTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.HistoryLength != 0 {
		n += 1 + sovMessage(uint64(m.HistoryLength))
	}
	l = len(m.ParentNamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ParentExecution != nil {
		l = m.ParentExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExecutionTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExecutionTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AutoResetPoints != nil {
		l = m.AutoResetPoints.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StateTransitionCount != 0 {
		n += 1 + sovMessage(uint64(m.StateTransitionCount))
	}
	return n
}

func (m *WorkflowExecutionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecutionTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowRunTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowRunTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DefaultWorkflowTaskTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.DefaultWorkflowTaskTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *PendingActivityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	if m.HeartbeatDetails != nil {
		l = m.HeartbeatDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastHeartbeatTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastHeartbeatTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastStartedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStartedTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovMessage(uint64(m.Attempt))
	}
	if m.MaximumAttempts != 0 {
		n += 1 + sovMessage(uint64(m.MaximumAttempts))
	}
	if m.ScheduledTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExpirationTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpirationTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastFailure != nil {
		l = m.LastFailure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.LastWorkerIdentity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *PendingChildExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowTypeName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedId))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovMessage(uint64(m.ParentClosePolicy))
	}
	return n
}

func (m *PendingWorkflowTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	if m.ScheduledTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.OriginalScheduledTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.OriginalScheduledTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovMessage(uint64(m.Attempt))
	}
	return n
}

func (m *ResetPoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *ResetPointInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FirstWorkflowTaskCompletedId != 0 {
		n += 1 + sovMessage(uint64(m.FirstWorkflowTaskCompletedId))
	}
	if m.CreateTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreateTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExpireTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpireTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Resettable {
		n += 2
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WorkflowExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionInfo{`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`Type:` + strings.Replace(fmt.Sprintf("%v", this.Type), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`CloseTime:` + strings.Replace(fmt.Sprintf("%v", this.CloseTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`HistoryLength:` + fmt.Sprintf("%v", this.HistoryLength) + `,`,
		`ParentNamespaceId:` + fmt.Sprintf("%v", this.ParentNamespaceId) + `,`,
		`ParentExecution:` + strings.Replace(fmt.Sprintf("%v", this.ParentExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`ExecutionTime:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "v1.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "v1.SearchAttributes", 1) + `,`,
		`AutoResetPoints:` + strings.Replace(this.AutoResetPoints.String(), "ResetPoints", "ResetPoints", 1) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`StateTransitionCount:` + fmt.Sprintf("%v", this.StateTransitionCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionConfig{`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v12.TaskQueue", 1) + `,`,
		`WorkflowExecutionTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowRunTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowRunTimeout), "Duration", "types.Duration", 1) + `,`,
		`DefaultWorkflowTaskTimeout:` + strings.Replace(fmt.Sprintf("%v", this.DefaultWorkflowTaskTimeout), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingActivityInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingActivityInfo{`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "v1.ActivityType", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`HeartbeatDetails:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatDetails), "Payloads", "v1.Payloads", 1) + `,`,
		`LastHeartbeatTime:` + strings.Replace(fmt.Sprintf("%v", this.LastHeartbeatTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastStartedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastStartedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`MaximumAttempts:` + fmt.Sprintf("%v", this.MaximumAttempts) + `,`,
		`ScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`ExpirationTime:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastFailure:` + strings.Replace(fmt.Sprintf("%v", this.LastFailure), "Failure", "v13.Failure", 1) + `,`,
		`LastWorkerIdentity:` + fmt.Sprintf("%v", this.LastWorkerIdentity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingChildExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingChildExecutionInfo{`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`WorkflowTypeName:` + fmt.Sprintf("%v", this.WorkflowTypeName) + `,`,
		`InitiatedId:` + fmt.Sprintf("%v", this.InitiatedId) + `,`,
		`ParentClosePolicy:` + fmt.Sprintf("%v", this.ParentClosePolicy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingWorkflowTaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingWorkflowTaskInfo{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`ScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`OriginalScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.OriginalScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`StartedTime:` + strings.Replace(fmt.Sprintf("%v", this.StartedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetPoints) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPoints := "[]*ResetPointInfo{"
	for _, f := range this.Points {
		repeatedStringForPoints += strings.Replace(f.String(), "ResetPointInfo", "ResetPointInfo", 1) + ","
	}
	repeatedStringForPoints += "}"
	s := strings.Join([]string{`&ResetPoints{`,
		`Points:` + repeatedStringForPoints + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetPointInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetPointInfo{`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`FirstWorkflowTaskCompletedId:` + fmt.Sprintf("%v", this.FirstWorkflowTaskCompletedId) + `,`,
		`CreateTime:` + strings.Replace(fmt.Sprintf("%v", this.CreateTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`ExpireTime:` + strings.Replace(fmt.Sprintf("%v", this.ExpireTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Resettable:` + fmt.Sprintf("%v", this.Resettable) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WorkflowExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &v1.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &v1.WorkflowType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseTime == nil {
				m.CloseTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CloseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v11.WorkflowExecutionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryLength", wireType)
			}
			m.HistoryLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentNamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentNamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentExecution == nil {
				m.ParentExecution = &v1.WorkflowExecution{}
			}
			if err := m.ParentExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionTime == nil {
				m.ExecutionTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExecutionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &v1.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &v1.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoResetPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoResetPoints == nil {
				m.AutoResetPoints = &ResetPoints{}
			}
			if err := m.AutoResetPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateTransitionCount", wireType)
			}
			m.StateTransitionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateTransitionCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v12.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionTimeout == nil {
				m.WorkflowExecutionTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowExecutionTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowRunTimeout == nil {
				m.WorkflowRunTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowRunTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultWorkflowTaskTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultWorkflowTaskTimeout == nil {
				m.DefaultWorkflowTaskTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.DefaultWorkflowTaskTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingActivityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingActivityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingActivityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &v1.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v11.PendingActivityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatDetails == nil {
				m.HeartbeatDetails = &v1.Payloads{}
			}
			if err := m.HeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatTime == nil {
				m.LastHeartbeatTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastHeartbeatTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStartedTime == nil {
				m.LastStartedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastStartedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumAttempts", wireType)
			}
			m.MaximumAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumAttempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ScheduledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTime == nil {
				m.ExpirationTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailure == nil {
				m.LastFailure = &v13.Failure{}
			}
			if err := m.LastFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWorkerIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastWorkerIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingChildExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingChildExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingChildExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= v11.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingWorkflowTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingWorkflowTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingWorkflowTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v11.PendingWorkflowTaskState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ScheduledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginalScheduledTime == nil {
				m.OriginalScheduledTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.OriginalScheduledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetPoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetPoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetPoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &ResetPointInfo{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetPointInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetPointInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetPointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstWorkflowTaskCompletedId", wireType)
			}
			m.FirstWorkflowTaskCompletedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstWorkflowTaskCompletedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateTime == nil {
				m.CreateTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpireTime == nil {
				m.ExpireTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpireTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resettable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resettable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
