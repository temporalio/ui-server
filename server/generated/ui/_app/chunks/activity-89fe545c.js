const a=["ActivityTaskCanceled","ActivityTaskCancelRequested","ActivityTaskCompleted","ActivityTaskFailed","ActivityTaskScheduled","ActivityTaskStarted","ActivityTaskTimedOut"],d=t=>!!a.includes(t.eventType),n=t=>t.eventType==="ActivityTaskScheduled";class u{constructor(i){var e,r,c;this._events=new Map,this.id=(e=i==null?void 0:i.activityTaskScheduledEventAttributes)==null?void 0:e.activityId,this.name=(c=(r=i==null?void 0:i.activityTaskScheduledEventAttributes)==null?void 0:r.activityType)==null?void 0:c.name,this.set(i.eventType,i)}set(i,e){this._events.set(i,e)}get(i){return this._events.get(i)}toArray(){return[...this]}get events(){return this._events}get length(){return this.events.size}get last(){let i;for(const e of this)i=e;return i}[Symbol.iterator](){return this._events.values()}}const s=class{constructor(t){if(this._activities=new Map,Array.isArray(t))return s.from(t,this);t&&this.add(t)}get(t){return this._activities.get(String(t))}add(t){if(n(t)){const i=String(t.id);return this._activities.set(i,new u(t))}if(t.eventType==="ActivityTaskStarted"){const{scheduledEventId:i}=t.activityTaskStartedEventAttributes;return this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskCanceled"){const{scheduledEventId:i}=t.activityTaskCanceledEventAttributes;return this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskCancelRequested"){const{scheduledEventId:i}=t.activityTaskCancelRequestedEventAttributes;return this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskFailed"){const{scheduledEventId:i}=t.activityTaskFailedEventAttributes;return this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskTimedOut"){const{scheduledEventId:i}=t.activityTaskTimedOutEventAttributes;return this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskCompleted"){const{scheduledEventId:i}=t.activityTaskCompletedEventAttributes;return this.get(i).set(t.eventType,t)}}get length(){return this._activities.size}slice(...t){return[...this].slice(...t)}[Symbol.iterator](){return this._activities.values()}};let y=s;y.from=(t,i=new s)=>{for(const e of t)d(e)&&i.add(e);return i};export{y as A,u as a};
