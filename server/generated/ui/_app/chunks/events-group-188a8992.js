const E=["ActivityTaskCanceled","ActivityTaskCancelRequested","ActivityTaskCompleted","ActivityTaskFailed","ActivityTaskScheduled","ActivityTaskStarted","ActivityTaskTimedOut"],f=["TimerStarted","TimerCanceled","TimerFired"],k=["WorkflowExecutionSignaled"],m=["MarkerRecorded"],A=["StartChildWorkflowExecutionInitiated","ChildWorkflowExecutionStarted","ChildWorkflowExecutionCompleted"],g=t=>!!(E.includes(t.eventType)||f.includes(t.eventType)||r(t)||d(t)||A.includes(t.eventType)),y=t=>t.eventType==="ActivityTaskScheduled",h=t=>t.eventType==="StartChildWorkflowExecutionInitiated",p=t=>t.eventType==="TimerStarted",r=t=>k.includes(t.eventType),d=t=>m.includes(t.eventType);class C{constructor(i){var e,a,c,o,l,u,n,T;this._events=new Map,y(i)&&(this.id=(e=i==null?void 0:i.activityTaskScheduledEventAttributes)==null?void 0:e.activityId,this.name=(c=(a=i==null?void 0:i.activityTaskScheduledEventAttributes)==null?void 0:a.activityType)==null?void 0:c.name),p(i)&&(this.id=i.id,this.name=`Timer ${(o=i==null?void 0:i.timerStartedEventAttributes)==null?void 0:o.timerId}`),r(i)&&(this.id=i.id,this.name=`Signal: ${(l=i==null?void 0:i.workflowExecutionSignaledEventAttributes)==null?void 0:l.signalName}`),d(i)&&(this.id=i.id,this.name=`Marker: ${(u=i==null?void 0:i.markerRecordedEventAttributes)==null?void 0:u.markerName}`),h(i)&&(this.id=i.id,this.name=`Child Workflow: ${(T=(n=i==null?void 0:i.startChildWorkflowExecutionInitiatedEventAttributes)==null?void 0:n.workflowType)==null?void 0:T.name}`),this.set(i.eventType,i)}set(i,e){this._events.set(i,e)}get(i){return this._events.get(i)}toArray(){return[...this]}get events(){return[...this]}get length(){return this._events.size}get last(){let i;for(const e of this)i=e;return i}[Symbol.iterator](){return this._events.values()}}const s=class{constructor(t){if(this._groups=new Map,Array.isArray(t))return s.from(t,this);t&&this.add(t)}static async fromPromise(t){return s.from(await t)}get(t){return this._groups.get(String(t))}add(t){if(y(t)||p(t)||r(t)||d(t)||h(t)){const i=String(t.id);this._groups.set(i,new C(t))}if(t.eventType==="ActivityTaskStarted"){const{scheduledEventId:i}=t.activityTaskStartedEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskCanceled"){const{scheduledEventId:i}=t.activityTaskCanceledEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskCancelRequested"){const{scheduledEventId:i}=t.activityTaskCancelRequestedEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskFailed"){const{scheduledEventId:i}=t.activityTaskFailedEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskTimedOut"){const{scheduledEventId:i}=t.activityTaskTimedOutEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="ActivityTaskCompleted"){const{scheduledEventId:i}=t.activityTaskCompletedEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="ChildWorkflowExecutionStarted"){const{initiatedEventId:i}=t.childWorkflowExecutionStartedEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="ChildWorkflowExecutionCompleted"){const{initiatedEventId:i}=t.childWorkflowExecutionCompletedEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="TimerFired"){const{startedEventId:i}=t.timerFiredEventAttributes;this.get(i).set(t.eventType,t)}if(t.eventType==="TimerCanceled"){const{startedEventId:i}=t.timerCanceledEventAttributes;this.get(i).set(t.eventType,t)}}get length(){return this._groups.size}slice(...t){return[...this].slice(...t)}[Symbol.iterator](){return this._groups.values()}};let S=s;S.from=(t,i=new s)=>{for(const e of t)g(e)&&i.add(e);return i};export{S as E,C as a};
