import{r as p,a as f,d as l}from"./route-for-api-b7e90108.js";import{g as m,c as h,a as _}from"./get-codec-d6ce5d47.js";import{s as u,p as g}from"./parse-with-big-int-02e81897.js";const I=t=>{const e=t.indexOf("["),r=t.indexOf("]");return t.slice(e+1,r).split(" ").filter(a=>a!=="__stack_trace").map(a=>a.endsWith(",")?a.slice(0,a.length-1):a)},T=async(t,e)=>(e=await e,{namespace:t,workflowId:e.id,runId:e.runId});async function d({workflow:t,namespace:e,queryType:r},a=fetch,n){t=await t;const o=await T(e,t),c=await p("query",o);return await f(c,{options:{method:"POST",body:u({execution:{workflowId:t.id,runId:t.runId},query:{queryType:r}})},request:a,onError:n,notifyOnError:!1})}async function x(t,e=fetch){return new Promise((r,a)=>{d({...t,queryType:"@@temporal-internal__list"},e,n=>{l(n.body)&&n.body.message.includes("@@temporal-internal__list")?r(I(n.body.message)):a(n)})})}async function O(t,e,r,a=fetch){return d(t,a).then(async n=>{const{queryResult:o}=n??{queryResult:{payloads:[]}};let c=o.payloads;try{if(c[0]){const i=m(e),y={...e,codec:{...e==null?void 0:e.codec,endpoint:i}},s=i?await h({attributes:o,namespace:t.namespace,settings:y,accessToken:r}):await _(o);c=s==null?void 0:s.payloads[0]}return g(c)}catch{return typeof c!="string"?u(c):c}})}async function q(t,e,r){return O({...t,queryType:"__stack_trace"},e,r)}export{O as a,q as b,x as g};
