import{g as l,w as y}from"./D1QWZ-ZU.js";import{A as n}from"./TBME1SPK.js";import{g as I}from"./brOJZyi7.js";import{p as w}from"./BVaBiGIv.js";import{t as T}from"./Be6M6cLL.js";import{s as b}from"./byHaz_JD.js";import{r as c,a as m,i as p}from"./B84F7gez.js";import{c as i,d as h}from"./DNNVWk-J.js";const k=e=>e.map(o=>o.runId).reduce((o,r,s,u)=>(o+=`RunId="${r}"`,s!==u.length-1&&(o+=" OR "),o),""),j=(e,t)=>{const o=I().email;switch(e){case n.Cancel:return{cancellationOperation:{identity:o}};case n.Terminate:return{terminationOperation:{identity:o}};case n.Reset:return{resetOperation:{identity:o,options:t==="first"?{firstWorkflowTask:{}}:{lastWorkflowTask:{}},resetType:t==="first"?1:2}}}},R=({id:e,runId:t})=>({workflowId:e,runId:t}),f=(e,t)=>{const o={jobId:t.jobId,namespace:t.namespace,reason:t.reason,...j(e,t.resetType)};if(t.workflows)return p(l(T),"1.19")?{...o,executions:t.workflows.map(R)}:{...o,visibilityQuery:k(t.workflows)};if(t.query)return{...o,visibilityQuery:t.query}};async function S(e){const t=c("batch-operations",{namespace:e.namespace,batchJobId:e.jobId}),o=f(n.Cancel,e);await m(t,{options:{method:"POST",body:b(o)},notifyOnError:!1}),a.set({jobId:o.jobId,namespace:o.namespace})}async function v(e){const t=c("batch-operations",{namespace:e.namespace,batchJobId:e.jobId}),o=f(n.Terminate,e);await m(t,{options:{method:"POST",body:b(o)},notifyOnError:!1}),a.set({jobId:o.jobId,namespace:o.namespace})}const Q=async e=>{const t=c("batch-operations",{namespace:e.namespace,batchJobId:e.jobId}),o=f(n.Reset,e);await m(t,{options:{method:"POST",body:b(o)},notifyOnError:!1}),a.set({jobId:o.jobId,namespace:o.namespace})};async function d({namespace:e,jobId:t}){return new Promise((o,r)=>{g({namespace:e,jobId:t}).then(({state:s,completeOperationCount:u})=>{s==="Failed"?r():s!=="Running"?o(u):setTimeout(()=>{try{o(d({namespace:e,jobId:t}))}catch{r()}},5e3)})})}async function g({jobId:e,namespace:t},o=fetch){const r=c("batch-operations",{namespace:t,batchJobId:e}),s=await m(r,{request:o});return C(s)}const C=e=>({...e,operationType:h(e.operationType),state:i(e.state),startTime:e.startTime,closeTime:e.closeTime,totalOperationCount:parseInt((e==null?void 0:e.totalOperationCount)??"0",10),completeOperationCount:parseInt((e==null?void 0:e.completeOperationCount)??"0",10),failureOperationCount:parseInt((e==null?void 0:e.failureOperationCount)??"0",10)});async function V(e,t=fetch){const o=c("batch-operations.list",{namespace:e,batchJobId:""}),r=await m(o,{request:t});return{nextPageToken:r.nextPageToken,operations:r.operationInfo?r.operationInfo.map(P):[]}}const P=e=>({startTime:e.startTime,closeTime:e.closeTime,jobId:e.jobId,state:i(e.state)}),a=y();a.subscribe(async e=>{e&&await d(e).then(()=>a.set(void 0))});const N=w("auto-refresh-batch-operation",!1);export{N as a,S as b,Q as c,g as d,v as e,a as i,V as l};
